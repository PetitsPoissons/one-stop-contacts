%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: HEX-WD-006.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: Gontar Alex
%%CreationDate: 11/14/2018
%%BoundingBox: 0 0 1500 1000
%%HiResBoundingBox: 0 0 1500 1000
%%CropBox: 0 0 1500 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2018-11-14T21:46:44+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2018-11-14T21:46:45+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2018-11-14T21:46:45+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AgsES29nJ+kYJfQZx6EYP&#xA;pOZAPiKs6uOIX7W3XjlyETLaPe6XCujWszwRyMbyEfvpRMfsM7IiVQoPg22PPxwe9UdcjR7fT7C3&#xA;8xW122qRxnitvIkLpbE1hScSxyHnuxXp8BX2oN+iUVrGm+Z7zULSfy7bXs2jmGEaO9qkjKka7cGa&#xA;McRKsvL1T3fk3Q4gjqqavcfl2PPEUmorcPercRfX54zENNN4Aomk4BfU9D16saNuvTbbI+qk7Wi/&#xA;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&#xA;vxxld+ajkqedP+VXf4a0Lh+lP8Nfvv0d+haej6nL956vP4+da05e/vgjzPepTfVP+VR/o/y7/iuv&#xA;r/Vk/Rf6U5fWfQqOPr+j8Ph9v3rvywDrSUJ5p/wn/wArLsvrf6f/AE7yt/0f9U9P6nxr8PH/ACK8&#xA;ufL3rtjGuFBu2Uwf8q1/xzJ6X1T/ABhQ+pSn1j+6Ffavpdab0yPTrTLqkfkf9Bf4z1X6r/iD69Sb&#xA;9I/pPh9Sr6m/Gnw15fY4dq9slKqQLtOdP/wD+hNZ/wAK+lw9Nvr/AOhPR+sV4tThTbnTlw/DInnu&#xA;qG8m/wCGv8JXn1z9I/oX1G+sf4n4V40XlX1f91Vp9vauGVX+pRdIjzL+gv8ACFv+iP0h+ifUX0P8&#xA;K8PU4Vb7Ho/7r5fa4d/auAVe/wBqTdJp/wA67+htN/TfHjxj+r/pj0fX9Xj8PPl8PrU603wbXsu6&#xA;G8w/8d/SeP6Zpy2/R3p/U/tjl9b5b0p49um+I4aU2nT/AKH/AEgnP0v0jw/d14ev6e/2f2+PXBsn&#xA;dKrCn+LdRr+luPpL/vR6f6N6LT6vT4ufj9Ne2E8NI3Te3/RfqXH1X0/V5/6T6XDlzp+3T9r54Nk7&#xA;pf5Zr+j5fX/SFfWf/jqej6tNvs+j8Pp+Ff1YZcKBaK1D0v0TN9U9f7H7r6j6Xq/88vV/d1+eAcK7&#xA;oi04/VIefq8/TXl63D1K0FefD4OXjx28MfSndSv/AFPUtfR+s8fWHq+h9X48KGvq+tvw8fT+LwxH&#xA;Cu6L/de+D0ruof8AH6f770fTH++vS5cj/wA9edP9jT3w+ld1f9174PSu6lBT95z9T7Z4+pw+z248&#xA;P2fDlv44+ld1X9174+ld3fuvfH0ru//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1500.000000</stDim:w>
            <stDim:h>1000.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=69 G=70 B=82</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>69</xmpG:red>
                           <xmpG:green>70</xmpG:green>
                           <xmpG:blue>82</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=247 B=235</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>247</xmpG:green>
                           <xmpG:blue>235</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">HEX-WD-006</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:7a02aec1-87e4-ca42-b2ac-9cba50c0830c</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:7a02aec1-87e4-ca42-b2ac-9cba50c0830c</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:59735cea-2b2f-44a5-b987-fcae135c7e10</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:9db0922b-6576-054c-8a56-f50f703f9d45</stRef:instanceID>
            <stRef:documentID>xmp.did:9db0922b-6576-054c-8a56-f50f703f9d45</stRef:documentID>
            <stRef:originalDocumentID>uuid:59735cea-2b2f-44a5-b987-fcae135c7e10</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:eecce2bb-daca-534f-a001-63f3801f2801</stEvt:instanceID>
                  <stEvt:when>2018-11-13T23:03:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7a02aec1-87e4-ca42-b2ac-9cba50c0830c</stEvt:instanceID>
                  <stEvt:when>2018-11-14T21:46:45+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1500 1000 li
1500 0 li
cp
clp
1500 0 mo
1500 1000 li
6.73444e-008 1000 li
0 4.48963e-008 li
1500 0 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .0221866 .0643015 0 cmyk
f
gsave
0 0 mo
1500 0 li
1500 1000 li
0 1000 li
0 0 li
cp
clp
757.025 511.71 mo
743.504 511.71 li
736.744 500 li
743.504 488.29 li
757.025 488.29 li
763.786 500 li
757.025 511.71 li
cp
.717037 .648096 .493019 .35758 cmyk
f
715.97 536.191 mo
701.775 536.191 li
694.677 523.898 li
701.775 511.605 li
715.97 511.605 li
723.067 523.898 li
715.97 536.191 li
cp
f
757.025 559.506 mo
743.504 559.506 li
736.744 547.796 li
743.504 536.086 li
757.025 536.086 li
763.786 547.796 li
757.025 559.506 li
cp
f
798.093 535.045 mo
785.221 535.045 li
778.785 523.898 li
785.221 512.751 li
798.093 512.751 li
804.529 523.898 li
798.093 535.045 li
cp
f
798.093 487.249 mo
785.221 487.249 li
778.785 476.102 li
785.221 464.955 li
798.093 464.955 li
804.529 476.102 li
798.093 487.249 li
cp
f
757.025 463.914 mo
743.504 463.914 li
736.744 452.204 li
743.504 440.494 li
757.025 440.494 li
763.786 452.204 li
757.025 463.914 li
cp
f
715.97 488.395 mo
701.775 488.395 li
694.677 476.102 li
701.775 463.809 li
715.97 463.809 li
723.067 476.102 li
715.97 488.395 li
cp
f
674.965 560.762 mo
659.994 560.762 li
652.508 547.796 li
659.994 534.83 li
674.965 534.83 li
682.451 547.796 li
674.965 560.762 li
cp
f
715.97 583.987 mo
701.775 583.987 li
694.677 571.694 li
701.775 559.401 li
715.97 559.401 li
723.067 571.694 li
715.97 583.987 li
cp
f
757.025 607.302 mo
743.504 607.302 li
736.744 595.592 li
743.504 583.883 li
757.025 583.883 li
763.786 595.592 li
757.025 607.302 li
cp
f
798.093 582.841 mo
785.221 582.841 li
778.785 571.694 li
785.221 560.547 li
798.093 560.547 li
804.529 571.694 li
798.093 582.841 li
cp
f
839.161 558.381 mo
826.939 558.381 li
820.827 547.796 li
826.939 537.211 li
839.161 537.211 li
845.273 547.796 li
839.161 558.381 li
cp
f
839.161 510.585 mo
826.939 510.585 li
820.827 500 li
826.939 489.415 li
839.161 489.415 li
845.273 500 li
839.161 510.585 li
cp
f
839.161 462.789 mo
826.939 462.789 li
820.827 452.204 li
826.939 441.619 li
839.161 441.619 li
845.273 452.204 li
839.161 462.789 li
cp
f
798.093 439.453 mo
785.221 439.453 li
778.785 428.306 li
785.221 417.159 li
798.093 417.159 li
804.529 428.306 li
798.093 439.453 li
cp
f
757.025 416.117 mo
743.504 416.117 li
736.744 404.408 li
743.504 392.698 li
757.025 392.698 li
763.786 404.408 li
757.025 416.117 li
cp
f
715.97 440.599 mo
701.775 440.599 li
694.677 428.306 li
701.775 416.013 li
715.97 416.013 li
723.067 428.306 li
715.97 440.599 li
cp
f
674.965 465.17 mo
659.994 465.17 li
652.508 452.204 li
659.994 439.238 li
674.965 439.238 li
682.451 452.204 li
674.965 465.17 li
cp
f
674.965 512.966 mo
659.994 512.966 li
652.508 500 li
659.994 487.034 li
674.965 487.034 li
682.451 500 li
674.965 512.966 li
cp
f
633.897 585.222 mo
618.276 585.222 li
610.466 571.694 li
618.276 558.166 li
633.897 558.166 li
641.708 571.694 li
633.897 585.222 li
cp
f
674.965 608.558 mo
659.994 608.558 li
652.508 595.592 li
659.994 582.627 li
674.965 582.627 li
682.451 595.592 li
674.965 608.558 li
cp
f
715.97 631.784 mo
701.775 631.784 li
694.677 619.49 li
701.775 607.197 li
715.97 607.197 li
723.067 619.49 li
715.97 631.784 li
cp
f
757.025 655.098 mo
743.504 655.098 li
736.744 643.388 li
743.504 631.679 li
757.025 631.679 li
763.786 643.388 li
757.025 655.098 li
cp
f
798.093 630.638 mo
785.221 630.638 li
778.785 619.49 li
785.221 608.343 li
798.093 608.343 li
804.529 619.49 li
798.093 630.638 li
cp
f
839.161 606.177 mo
826.939 606.177 li
820.827 595.592 li
826.939 585.007 li
839.161 585.007 li
845.273 595.592 li
839.161 606.177 li
cp
f
880.217 581.695 mo
868.668 581.695 li
862.894 571.694 li
868.668 561.693 li
880.217 561.693 li
885.991 571.694 li
880.217 581.695 li
cp
f
880.217 533.899 mo
868.668 533.899 li
862.894 523.898 li
868.668 513.897 li
880.217 513.897 li
885.991 523.898 li
880.217 533.899 li
cp
f
880.217 486.103 mo
868.668 486.103 li
862.894 476.102 li
868.668 466.101 li
880.217 466.101 li
885.991 476.102 li
880.217 486.103 li
cp
f
880.217 438.307 mo
868.668 438.307 li
862.894 428.306 li
868.668 418.304 li
880.217 418.304 li
885.991 428.306 li
880.217 438.307 li
cp
f
839.161 414.993 mo
826.939 414.993 li
820.827 404.408 li
826.939 393.823 li
839.161 393.823 li
845.273 404.408 li
839.161 414.993 li
cp
f
798.093 391.657 mo
785.221 391.657 li
778.785 380.51 li
785.221 369.362 li
798.093 369.362 li
804.529 380.51 li
798.093 391.657 li
cp
f
757.025 368.321 mo
743.504 368.321 li
736.744 356.612 li
743.504 344.902 li
757.025 344.902 li
763.786 356.612 li
757.025 368.321 li
cp
f
715.97 392.803 mo
701.775 392.803 li
694.677 380.51 li
701.775 368.216 li
715.97 368.216 li
723.067 380.51 li
715.97 392.803 li
cp
f
674.965 417.374 mo
659.994 417.374 li
652.508 404.408 li
659.994 391.442 li
674.965 391.442 li
682.451 404.408 li
674.965 417.374 li
cp
f
633.897 441.834 mo
618.276 441.834 li
610.466 428.306 li
618.276 414.778 li
633.897 414.778 li
641.708 428.306 li
633.897 441.834 li
cp
f
633.897 489.63 mo
618.276 489.63 li
610.466 476.102 li
618.276 462.574 li
633.897 462.574 li
641.708 476.102 li
633.897 489.63 li
cp
f
633.897 537.426 mo
618.276 537.426 li
610.466 523.898 li
618.276 510.37 li
633.897 510.37 li
641.708 523.898 li
633.897 537.426 li
cp
f
592.862 609.738 mo
576.527 609.738 li
568.359 595.592 li
576.527 581.446 li
592.862 581.446 li
601.029 595.592 li
592.862 609.738 li
cp
f
633.897 633.018 mo
618.276 633.018 li
610.466 619.49 li
618.276 605.962 li
633.897 605.962 li
641.708 619.49 li
633.897 633.018 li
cp
f
674.965 656.354 mo
659.994 656.354 li
652.508 643.388 li
659.994 630.423 li
674.965 630.423 li
682.451 643.388 li
674.965 656.354 li
cp
f
715.97 679.58 mo
701.775 679.58 li
694.677 667.286 li
701.775 654.993 li
715.97 654.993 li
723.067 667.286 li
715.97 679.58 li
cp
f
757.025 702.894 mo
743.504 702.894 li
736.744 691.184 li
743.504 679.475 li
757.025 679.475 li
763.786 691.184 li
757.025 702.894 li
cp
f
798.093 678.434 mo
785.221 678.434 li
778.785 667.286 li
785.221 656.139 li
798.093 656.139 li
804.529 667.286 li
798.093 678.434 li
cp
f
839.161 653.973 mo
826.939 653.973 li
820.827 643.388 li
826.939 632.803 li
839.161 632.803 li
845.273 643.388 li
839.161 653.973 li
cp
f
880.217 629.492 mo
868.668 629.492 li
862.894 619.49 li
868.668 609.489 li
880.217 609.489 li
885.991 619.49 li
880.217 629.492 li
cp
f
921.221 604.921 mo
910.449 604.921 li
905.063 595.592 li
910.449 586.263 li
921.221 586.263 li
926.607 595.592 li
921.221 604.921 li
cp
f
921.221 557.125 mo
910.449 557.125 li
905.063 547.796 li
910.449 538.467 li
921.221 538.467 li
926.607 547.796 li
921.221 557.125 li
cp
f
921.221 509.329 mo
910.449 509.329 li
905.063 500 li
910.449 490.671 li
921.221 490.671 li
926.607 500 li
921.221 509.329 li
cp
f
921.221 461.533 mo
910.449 461.533 li
905.063 452.204 li
910.449 442.875 li
921.221 442.875 li
926.607 452.204 li
921.221 461.533 li
cp
f
921.221 413.737 mo
910.449 413.737 li
905.063 404.408 li
910.449 395.079 li
921.221 395.079 li
926.607 404.408 li
921.221 413.737 li
cp
f
880.217 390.511 mo
868.668 390.511 li
862.894 380.51 li
868.668 370.508 li
880.217 370.508 li
885.991 380.51 li
880.217 390.511 li
cp
f
839.161 367.197 mo
826.939 367.197 li
820.827 356.612 li
826.939 346.027 li
839.161 346.027 li
845.273 356.612 li
839.161 367.197 li
cp
f
798.093 343.861 mo
785.221 343.861 li
778.785 332.714 li
785.221 321.566 li
798.093 321.566 li
804.529 332.714 li
798.093 343.861 li
cp
f
757.025 320.525 mo
743.504 320.525 li
736.744 308.816 li
743.504 297.106 li
757.025 297.106 li
763.786 308.816 li
757.025 320.525 li
cp
f
715.97 345.007 mo
701.775 345.007 li
694.677 332.714 li
701.775 320.42 li
715.97 320.42 li
723.067 332.714 li
715.97 345.007 li
cp
f
674.965 369.577 mo
659.994 369.577 li
652.508 356.612 li
659.994 343.646 li
674.965 343.646 li
682.451 356.612 li
674.965 369.577 li
cp
f
633.897 394.038 mo
618.276 394.038 li
610.466 380.51 li
618.276 366.982 li
633.897 366.982 li
641.708 380.51 li
633.897 394.038 li
cp
f
592.862 418.554 mo
576.527 418.554 li
568.359 404.408 li
576.527 390.262 li
592.862 390.262 li
601.029 404.408 li
592.862 418.554 li
cp
f
592.862 466.35 mo
576.527 466.35 li
568.359 452.204 li
576.527 438.058 li
592.862 438.058 li
601.029 452.204 li
592.862 466.35 li
cp
f
592.862 514.146 mo
576.527 514.146 li
568.359 500 li
576.527 485.854 li
592.862 485.854 li
601.029 500 li
592.862 514.146 li
cp
f
592.862 561.942 mo
576.527 561.942 li
568.359 547.796 li
576.527 533.65 li
592.862 533.65 li
601.029 547.796 li
592.862 561.942 li
cp
f
551.806 634.22 mo
534.797 634.22 li
526.293 619.49 li
534.797 604.76 li
551.806 604.76 li
560.31 619.49 li
551.806 634.22 li
cp
f
592.862 657.535 mo
576.527 657.535 li
568.359 643.388 li
576.527 629.242 li
592.862 629.242 li
601.029 643.388 li
592.862 657.535 li
cp
f
633.897 680.814 mo
618.276 680.814 li
610.466 667.286 li
618.276 653.758 li
633.897 653.758 li
641.708 667.286 li
633.897 680.814 li
cp
f
674.965 704.15 mo
659.994 704.15 li
652.508 691.184 li
659.994 678.219 li
674.965 678.219 li
682.451 691.184 li
674.965 704.15 li
cp
f
715.97 727.376 mo
701.775 727.376 li
694.677 715.082 li
701.775 702.789 li
715.97 702.789 li
723.067 715.082 li
715.97 727.376 li
cp
f
757.025 750.69 mo
743.504 750.69 li
736.744 738.98 li
743.504 727.271 li
757.025 727.271 li
763.786 738.98 li
757.025 750.69 li
cp
f
798.093 726.23 mo
785.221 726.23 li
778.785 715.082 li
785.221 703.935 li
798.093 703.935 li
804.529 715.082 li
798.093 726.23 li
cp
f
839.161 701.769 mo
826.939 701.769 li
820.827 691.184 li
826.939 680.599 li
839.161 680.599 li
845.273 691.184 li
839.161 701.769 li
cp
f
880.217 677.288 mo
868.668 677.288 li
862.894 667.286 li
868.668 657.285 li
880.217 657.285 li
885.991 667.286 li
880.217 677.288 li
cp
f
921.221 652.717 mo
910.449 652.717 li
905.063 643.388 li
910.449 634.059 li
921.221 634.059 li
926.607 643.388 li
921.221 652.717 li
cp
f
962.289 628.257 mo
952.166 628.257 li
947.105 619.49 li
952.166 610.723 li
962.289 610.723 li
967.351 619.49 li
962.289 628.257 li
cp
f
962.289 580.461 mo
952.166 580.461 li
947.105 571.694 li
952.166 562.927 li
962.289 562.927 li
967.351 571.694 li
962.289 580.461 li
cp
f
962.289 532.665 mo
952.166 532.665 li
947.105 523.898 li
952.166 515.131 li
962.289 515.131 li
967.351 523.898 li
962.289 532.665 li
cp
f
962.289 484.869 mo
952.166 484.869 li
947.105 476.102 li
952.166 467.335 li
962.289 467.335 li
967.351 476.102 li
962.289 484.869 li
cp
f
962.289 437.073 mo
952.166 437.073 li
947.105 428.306 li
952.166 419.539 li
962.289 419.539 li
967.351 428.306 li
962.289 437.073 li
cp
f
962.289 389.277 mo
952.166 389.277 li
947.105 380.51 li
952.166 371.743 li
962.289 371.743 li
967.351 380.51 li
962.289 389.277 li
cp
f
921.221 365.941 mo
910.449 365.941 li
905.063 356.612 li
910.449 347.283 li
921.221 347.283 li
926.607 356.612 li
921.221 365.941 li
cp
f
880.217 342.715 mo
868.668 342.715 li
862.894 332.714 li
868.668 322.712 li
880.217 322.712 li
885.991 332.714 li
880.217 342.715 li
cp
f
839.161 319.401 mo
826.939 319.401 li
820.827 308.816 li
826.939 298.231 li
839.161 298.231 li
845.273 308.816 li
839.161 319.401 li
cp
f
798.093 296.065 mo
785.221 296.065 li
778.785 284.918 li
785.221 273.77 li
798.093 273.77 li
804.529 284.918 li
798.093 296.065 li
cp
f
757.025 272.729 mo
743.504 272.729 li
736.744 261.02 li
743.504 249.31 li
757.025 249.31 li
763.786 261.02 li
757.025 272.729 li
cp
f
715.97 297.211 mo
701.775 297.211 li
694.677 284.918 li
701.775 272.624 li
715.97 272.624 li
723.067 284.918 li
715.97 297.211 li
cp
f
674.965 321.781 mo
659.994 321.781 li
652.508 308.816 li
659.994 295.85 li
674.965 295.85 li
682.451 308.816 li
674.965 321.781 li
cp
f
633.897 346.242 mo
618.276 346.242 li
610.466 332.714 li
618.276 319.186 li
633.897 319.186 li
641.708 332.714 li
633.897 346.242 li
cp
f
592.862 370.758 mo
576.527 370.758 li
568.359 356.612 li
576.527 342.465 li
592.862 342.465 li
601.029 356.612 li
592.862 370.758 li
cp
f
551.806 395.24 mo
534.797 395.24 li
526.293 380.51 li
534.797 365.78 li
551.806 365.78 li
560.31 380.51 li
551.806 395.24 li
cp
f
551.806 443.036 mo
534.797 443.036 li
526.293 428.306 li
534.797 413.576 li
551.806 413.576 li
560.31 428.306 li
551.806 443.036 li
cp
f
551.806 490.832 mo
534.797 490.832 li
526.293 476.102 li
534.797 461.372 li
551.806 461.372 li
560.31 476.102 li
551.806 490.832 li
cp
f
551.806 538.628 mo
534.797 538.628 li
526.293 523.898 li
534.797 509.168 li
551.806 509.168 li
560.31 523.898 li
551.806 538.628 li
cp
f
551.806 586.424 mo
534.797 586.424 li
526.293 571.694 li
534.797 556.964 li
551.806 556.964 li
560.31 571.694 li
551.806 586.424 li
cp
f
510.802 658.791 mo
493.016 658.791 li
484.124 643.388 li
493.016 627.986 li
510.802 627.986 li
519.694 643.388 li
510.802 658.791 li
cp
f
551.806 682.016 mo
534.797 682.016 li
526.293 667.286 li
534.797 652.556 li
551.806 652.556 li
560.31 667.286 li
551.806 682.016 li
cp
f
592.862 705.331 mo
576.527 705.331 li
568.359 691.184 li
576.527 677.038 li
592.862 677.038 li
601.029 691.184 li
592.862 705.331 li
cp
f
633.897 728.61 mo
618.276 728.61 li
610.466 715.082 li
618.276 701.554 li
633.897 701.554 li
641.708 715.082 li
633.897 728.61 li
cp
f
674.965 751.946 mo
659.994 751.946 li
652.508 738.98 li
659.994 726.015 li
674.965 726.015 li
682.451 738.98 li
674.965 751.946 li
cp
f
715.97 775.172 mo
701.775 775.172 li
694.677 762.878 li
701.775 750.585 li
715.97 750.585 li
723.067 762.878 li
715.97 775.172 li
cp
f
757.025 798.486 mo
743.504 798.486 li
736.744 786.776 li
743.504 775.067 li
757.025 775.067 li
763.786 786.776 li
757.025 798.486 li
cp
f
798.093 774.026 mo
785.221 774.026 li
778.785 762.878 li
785.221 751.731 li
798.093 751.731 li
804.529 762.878 li
798.093 774.026 li
cp
f
839.161 749.565 mo
826.939 749.565 li
820.827 738.98 li
826.939 728.395 li
839.161 728.395 li
845.273 738.98 li
839.161 749.565 li
cp
f
880.217 725.084 mo
868.668 725.084 li
862.894 715.082 li
868.668 705.081 li
880.217 705.081 li
885.991 715.082 li
880.217 725.084 li
cp
f
921.221 700.513 mo
910.449 700.513 li
905.063 691.184 li
910.449 681.855 li
921.221 681.855 li
926.607 691.184 li
921.221 700.513 li
cp
f
962.289 676.053 mo
952.166 676.053 li
947.105 667.286 li
952.166 658.52 li
962.289 658.52 li
967.351 667.286 li
962.289 676.053 li
cp
f
1003.36 651.593 mo
993.884 651.593 li
989.147 643.388 li
993.884 635.184 li
1003.36 635.184 li
1008.09 643.388 li
1003.36 651.593 li
cp
f
1003.36 603.797 mo
993.884 603.797 li
989.147 595.592 li
993.884 587.388 li
1003.36 587.388 li
1008.09 595.592 li
1003.36 603.797 li
cp
f
1003.36 556.001 mo
993.884 556.001 li
989.147 547.796 li
993.884 539.592 li
1003.36 539.592 li
1008.09 547.796 li
1003.36 556.001 li
cp
f
1003.36 508.204 mo
993.884 508.204 li
989.147 500 li
993.884 491.796 li
1003.36 491.796 li
1008.09 500 li
1003.36 508.204 li
cp
f
1003.36 460.408 mo
993.884 460.408 li
989.147 452.204 li
993.884 443.999 li
1003.36 443.999 li
1008.09 452.204 li
1003.36 460.408 li
cp
f
1003.36 412.612 mo
993.884 412.612 li
989.147 404.408 li
993.884 396.203 li
1003.36 396.203 li
1008.09 404.408 li
1003.36 412.612 li
cp
f
1003.36 364.816 mo
993.884 364.816 li
989.147 356.612 li
993.884 348.407 li
1003.36 348.407 li
1008.09 356.612 li
1003.36 364.816 li
cp
f
962.289 341.48 mo
952.166 341.48 li
947.105 332.714 li
952.166 323.947 li
962.289 323.947 li
967.351 332.714 li
962.289 341.48 li
cp
f
921.221 318.145 mo
910.449 318.145 li
905.063 308.816 li
910.449 299.487 li
921.221 299.487 li
926.607 308.816 li
921.221 318.145 li
cp
f
880.217 294.919 mo
868.668 294.919 li
862.894 284.918 li
868.668 274.916 li
880.217 274.916 li
885.991 284.918 li
880.217 294.919 li
cp
f
839.161 271.605 mo
826.939 271.605 li
820.827 261.02 li
826.939 250.435 li
839.161 250.435 li
845.273 261.02 li
839.161 271.605 li
cp
f
798.093 248.269 mo
785.221 248.269 li
778.785 237.122 li
785.221 225.974 li
798.093 225.974 li
804.529 237.122 li
798.093 248.269 li
cp
f
757.025 224.933 mo
743.504 224.933 li
736.744 213.224 li
743.504 201.514 li
757.025 201.514 li
763.786 213.224 li
757.025 224.933 li
cp
f
715.97 249.415 mo
701.775 249.415 li
694.677 237.122 li
701.775 224.828 li
715.97 224.828 li
723.067 237.122 li
715.97 249.415 li
cp
f
674.965 273.985 mo
659.994 273.985 li
652.508 261.02 li
659.994 248.054 li
674.965 248.054 li
682.451 261.02 li
674.965 273.985 li
cp
f
633.897 298.446 mo
618.276 298.446 li
610.466 284.918 li
618.276 271.39 li
633.897 271.39 li
641.708 284.918 li
633.897 298.446 li
cp
f
592.862 322.962 mo
576.527 322.962 li
568.359 308.816 li
576.527 294.669 li
592.862 294.669 li
601.029 308.816 li
592.862 322.962 li
cp
f
551.806 347.444 mo
534.797 347.444 li
526.293 332.714 li
534.797 317.984 li
551.806 317.984 li
560.31 332.714 li
551.806 347.444 li
cp
f
510.802 372.014 mo
493.016 372.014 li
484.124 356.612 li
493.016 341.209 li
510.802 341.209 li
519.694 356.612 li
510.802 372.014 li
cp
f
510.802 419.81 mo
493.016 419.81 li
484.124 404.408 li
493.016 389.005 li
510.802 389.005 li
519.694 404.408 li
510.802 419.81 li
cp
f
510.802 467.606 mo
493.016 467.606 li
484.124 452.204 li
493.016 436.802 li
510.802 436.802 li
519.694 452.204 li
510.802 467.606 li
cp
f
510.802 515.402 mo
493.016 515.402 li
484.124 500 li
493.016 484.598 li
510.802 484.598 li
519.694 500 li
510.802 515.402 li
cp
f
510.802 563.198 mo
493.016 563.198 li
484.124 547.796 li
493.016 532.394 li
510.802 532.394 li
519.694 547.796 li
510.802 563.198 li
cp
f
510.802 610.995 mo
493.016 610.995 li
484.124 595.592 li
493.016 580.19 li
510.802 580.19 li
519.694 595.592 li
510.802 610.995 li
cp
f
469.638 683.085 mo
451.395 683.085 li
442.274 667.286 li
451.395 651.488 li
469.638 651.488 li
478.759 667.286 li
469.638 683.085 li
cp
f
510.802 706.587 mo
493.016 706.587 li
484.124 691.184 li
493.016 675.782 li
510.802 675.782 li
519.694 691.184 li
510.802 706.587 li
cp
f
551.806 729.812 mo
534.797 729.812 li
526.293 715.082 li
534.797 700.352 li
551.806 700.352 li
560.31 715.082 li
551.806 729.812 li
cp
f
592.862 753.127 mo
576.527 753.127 li
568.359 738.98 li
576.527 724.834 li
592.862 724.834 li
601.029 738.98 li
592.862 753.127 li
cp
f
633.897 776.406 mo
618.276 776.406 li
610.466 762.878 li
618.276 749.35 li
633.897 749.35 li
641.708 762.878 li
633.897 776.406 li
cp
f
674.965 799.742 mo
659.994 799.742 li
652.508 786.776 li
659.994 773.811 li
674.965 773.811 li
682.451 786.776 li
674.965 799.742 li
cp
f
715.97 822.968 mo
701.775 822.968 li
694.677 810.675 li
701.775 798.381 li
715.97 798.381 li
723.067 810.675 li
715.97 822.968 li
cp
f
757.025 846.282 mo
743.504 846.282 li
736.744 834.573 li
743.504 822.863 li
757.025 822.863 li
763.786 834.573 li
757.025 846.282 li
cp
f
798.093 821.822 mo
785.221 821.822 li
778.785 810.675 li
785.221 799.527 li
798.093 799.527 li
804.529 810.675 li
798.093 821.822 li
cp
f
839.161 797.362 mo
826.939 797.362 li
820.827 786.776 li
826.939 776.191 li
839.161 776.191 li
845.273 786.776 li
839.161 797.362 li
cp
f
880.217 772.88 mo
868.668 772.88 li
862.894 762.878 li
868.668 752.877 li
880.217 752.877 li
885.991 762.878 li
880.217 772.88 li
cp
f
921.221 748.309 mo
910.449 748.309 li
905.063 738.98 li
910.449 729.651 li
921.221 729.651 li
926.607 738.98 li
921.221 748.309 li
cp
f
962.289 723.849 mo
952.166 723.849 li
947.105 715.082 li
952.166 706.316 li
962.289 706.316 li
967.351 715.082 li
962.289 723.849 li
cp
f
1003.36 699.389 mo
993.884 699.389 li
989.147 691.184 li
993.884 682.98 li
1003.36 682.98 li
1008.09 691.184 li
1003.36 699.389 li
cp
f
1044.43 674.928 mo
1035.6 674.928 li
1031.19 667.286 li
1035.6 659.644 li
1044.43 659.644 li
1048.84 667.286 li
1044.43 674.928 li
cp
f
1044.43 627.132 mo
1035.6 627.132 li
1031.19 619.49 li
1035.6 611.848 li
1044.43 611.848 li
1048.84 619.49 li
1044.43 627.132 li
cp
f
1044.43 579.336 mo
1035.6 579.336 li
1031.19 571.694 li
1035.6 564.052 li
1044.43 564.052 li
1048.84 571.694 li
1044.43 579.336 li
cp
f
1044.43 531.54 mo
1035.6 531.54 li
1031.19 523.898 li
1035.6 516.256 li
1044.43 516.256 li
1048.84 523.898 li
1044.43 531.54 li
cp
f
1044.43 483.744 mo
1035.6 483.744 li
1031.19 476.102 li
1035.6 468.46 li
1044.43 468.46 li
1048.84 476.102 li
1044.43 483.744 li
cp
f
1044.43 435.948 mo
1035.6 435.948 li
1031.19 428.306 li
1035.6 420.664 li
1044.43 420.664 li
1048.84 428.306 li
1044.43 435.948 li
cp
f
1044.43 388.152 mo
1035.6 388.152 li
1031.19 380.51 li
1035.6 372.868 li
1044.43 372.868 li
1048.84 380.51 li
1044.43 388.152 li
cp
f
1044.43 340.356 mo
1035.6 340.356 li
1031.19 332.714 li
1035.6 325.072 li
1044.43 325.072 li
1048.84 332.714 li
1044.43 340.356 li
cp
f
1003.36 317.02 mo
993.884 317.02 li
989.147 308.816 li
993.884 300.611 li
1003.36 300.611 li
1008.09 308.816 li
1003.36 317.02 li
cp
f
962.289 293.684 mo
952.166 293.684 li
947.105 284.918 li
952.166 276.151 li
962.289 276.151 li
967.351 284.918 li
962.289 293.684 li
cp
f
921.221 270.349 mo
910.449 270.349 li
905.063 261.02 li
910.449 251.691 li
921.221 251.691 li
926.607 261.02 li
921.221 270.349 li
cp
f
880.217 247.123 mo
868.668 247.123 li
862.894 237.122 li
868.668 227.12 li
880.217 227.12 li
885.991 237.122 li
880.217 247.123 li
cp
f
839.161 223.809 mo
826.939 223.809 li
820.827 213.224 li
826.939 202.638 li
839.161 202.638 li
845.273 213.224 li
839.161 223.809 li
cp
f
798.093 200.473 mo
785.221 200.473 li
778.785 189.325 li
785.221 178.178 li
798.093 178.178 li
804.529 189.325 li
798.093 200.473 li
cp
f
757.025 177.137 mo
743.504 177.137 li
736.744 165.427 li
743.504 153.718 li
757.025 153.718 li
763.786 165.427 li
757.025 177.137 li
cp
f
715.97 201.619 mo
701.775 201.619 li
694.677 189.325 li
701.775 177.032 li
715.97 177.032 li
723.067 189.325 li
715.97 201.619 li
cp
f
674.965 226.189 mo
659.994 226.189 li
652.508 213.224 li
659.994 200.258 li
674.965 200.258 li
682.451 213.224 li
674.965 226.189 li
cp
f
633.897 250.65 mo
618.276 250.65 li
610.466 237.122 li
618.276 223.594 li
633.897 223.594 li
641.708 237.122 li
633.897 250.65 li
cp
f
592.862 275.166 mo
576.527 275.166 li
568.359 261.02 li
576.527 246.873 li
592.862 246.873 li
601.029 261.02 li
592.862 275.166 li
cp
f
551.806 299.648 mo
534.797 299.648 li
526.293 284.918 li
534.797 270.188 li
551.806 270.188 li
560.31 284.918 li
551.806 299.648 li
cp
f
510.802 324.218 mo
493.016 324.218 li
484.124 308.816 li
493.016 293.413 li
510.802 293.413 li
519.694 308.816 li
510.802 324.218 li
cp
f
469.638 348.512 mo
451.395 348.512 li
442.274 332.714 li
451.395 316.915 li
469.638 316.915 li
478.759 332.714 li
469.638 348.512 li
cp
f
469.638 396.308 mo
451.395 396.308 li
442.274 380.51 li
451.395 364.711 li
469.638 364.711 li
478.759 380.51 li
469.638 396.308 li
cp
f
469.638 444.104 mo
451.395 444.104 li
442.274 428.306 li
451.395 412.507 li
469.638 412.507 li
478.759 428.306 li
469.638 444.104 li
cp
f
469.638 491.901 mo
451.395 491.901 li
442.274 476.102 li
451.395 460.303 li
469.638 460.303 li
478.759 476.102 li
469.638 491.901 li
cp
f
469.638 539.697 mo
451.395 539.697 li
442.274 523.898 li
451.395 508.099 li
469.638 508.099 li
478.759 523.898 li
469.638 539.697 li
cp
f
469.638 587.493 mo
451.395 587.493 li
442.274 571.694 li
451.395 555.896 li
469.638 555.896 li
478.759 571.694 li
469.638 587.493 li
cp
f
469.638 635.289 mo
451.395 635.289 li
442.274 619.49 li
451.395 603.692 li
469.638 603.692 li
478.759 619.49 li
469.638 635.289 li
cp
f
428.633 707.655 mo
409.614 707.655 li
400.105 691.184 li
409.614 674.713 li
428.633 674.713 li
438.143 691.184 li
428.633 707.655 li
cp
f
469.638 730.881 mo
451.395 730.881 li
442.274 715.082 li
451.395 699.284 li
469.638 699.284 li
478.759 715.082 li
469.638 730.881 li
cp
f
510.802 754.383 mo
493.016 754.383 li
484.124 738.98 li
493.016 723.578 li
510.802 723.578 li
519.694 738.98 li
510.802 754.383 li
cp
f
551.806 777.608 mo
534.797 777.608 li
526.293 762.878 li
534.797 748.148 li
551.806 748.148 li
560.31 762.878 li
551.806 777.608 li
cp
f
592.862 800.923 mo
576.527 800.923 li
568.359 786.776 li
576.527 772.63 li
592.862 772.63 li
601.029 786.776 li
592.862 800.923 li
cp
f
633.897 824.203 mo
618.276 824.203 li
610.466 810.675 li
618.276 797.147 li
633.897 797.147 li
641.708 810.675 li
633.897 824.203 li
cp
f
674.965 847.538 mo
659.994 847.538 li
652.508 834.573 li
659.994 821.607 li
674.965 821.607 li
682.451 834.573 li
674.965 847.538 li
cp
f
715.97 870.764 mo
701.775 870.764 li
694.677 858.471 li
701.775 846.177 li
715.97 846.177 li
723.067 858.471 li
715.97 870.764 li
cp
f
757.025 894.078 mo
743.504 894.078 li
736.744 882.369 li
743.504 870.659 li
757.025 870.659 li
763.786 882.369 li
757.025 894.078 li
cp
f
798.093 869.618 mo
785.221 869.618 li
778.785 858.471 li
785.221 847.323 li
798.093 847.323 li
804.529 858.471 li
798.093 869.618 li
cp
f
839.161 845.158 mo
826.939 845.158 li
820.827 834.573 li
826.939 823.987 li
839.161 823.987 li
845.273 834.573 li
839.161 845.158 li
cp
f
880.217 820.676 mo
868.668 820.676 li
862.894 810.675 li
868.668 800.673 li
880.217 800.673 li
885.991 810.675 li
880.217 820.676 li
cp
f
921.221 796.106 mo
910.449 796.106 li
905.063 786.776 li
910.449 777.447 li
921.221 777.447 li
926.607 786.776 li
921.221 796.106 li
cp
f
962.289 771.645 mo
952.166 771.645 li
947.105 762.878 li
952.166 754.112 li
962.289 754.112 li
967.351 762.878 li
962.289 771.645 li
cp
f
1003.36 747.185 mo
993.884 747.185 li
989.147 738.98 li
993.884 730.776 li
1003.36 730.776 li
1008.09 738.98 li
1003.36 747.185 li
cp
f
1044.43 722.724 mo
1035.6 722.724 li
1031.19 715.082 li
1035.6 707.44 li
1044.43 707.44 li
1048.84 715.082 li
1044.43 722.724 li
cp
f
1085.48 698.243 mo
1077.33 698.243 li
1073.26 691.184 li
1077.33 684.126 li
1085.48 684.126 li
1089.56 691.184 li
1085.48 698.243 li
cp
f
1085.48 650.447 mo
1077.33 650.447 li
1073.26 643.388 li
1077.33 636.33 li
1085.48 636.33 li
1089.56 643.388 li
1085.48 650.447 li
cp
f
1085.48 602.651 mo
1077.33 602.651 li
1073.26 595.592 li
1077.33 588.534 li
1085.48 588.534 li
1089.56 595.592 li
1085.48 602.651 li
cp
f
1085.48 554.854 mo
1077.33 554.854 li
1073.26 547.796 li
1077.33 540.738 li
1085.48 540.738 li
1089.56 547.796 li
1085.48 554.854 li
cp
f
1085.48 507.058 mo
1077.33 507.058 li
1073.26 500 li
1077.33 492.942 li
1085.48 492.942 li
1089.56 500 li
1085.48 507.058 li
cp
f
1085.48 459.262 mo
1077.33 459.262 li
1073.26 452.204 li
1077.33 445.145 li
1085.48 445.145 li
1089.56 452.204 li
1085.48 459.262 li
cp
f
1085.48 411.466 mo
1077.33 411.466 li
1073.26 404.408 li
1077.33 397.349 li
1085.48 397.349 li
1089.56 404.408 li
1085.48 411.466 li
cp
f
1085.48 363.67 mo
1077.33 363.67 li
1073.26 356.612 li
1077.33 349.553 li
1085.48 349.553 li
1089.56 356.612 li
1085.48 363.67 li
cp
f
1085.48 315.874 mo
1077.33 315.874 li
1073.26 308.816 li
1077.33 301.757 li
1085.48 301.757 li
1089.56 308.816 li
1085.48 315.874 li
cp
f
1044.43 292.56 mo
1035.6 292.56 li
1031.19 284.918 li
1035.6 277.276 li
1044.43 277.276 li
1048.84 284.918 li
1044.43 292.56 li
cp
f
1003.36 269.224 mo
993.884 269.224 li
989.147 261.02 li
993.884 252.815 li
1003.36 252.815 li
1008.09 261.02 li
1003.36 269.224 li
cp
f
962.289 245.888 mo
952.166 245.888 li
947.105 237.122 li
952.166 228.355 li
962.289 228.355 li
967.351 237.122 li
962.289 245.888 li
cp
f
921.221 222.553 mo
910.449 222.553 li
905.063 213.224 li
910.449 203.894 li
921.221 203.894 li
926.607 213.224 li
921.221 222.553 li
cp
f
880.217 199.327 mo
868.668 199.327 li
862.894 189.325 li
868.668 179.324 li
880.217 179.324 li
885.991 189.325 li
880.217 199.327 li
cp
f
839.161 176.012 mo
826.939 176.012 li
820.827 165.427 li
826.939 154.842 li
839.161 154.842 li
845.273 165.427 li
839.161 176.012 li
cp
f
798.093 152.677 mo
785.221 152.677 li
778.785 141.529 li
785.221 130.382 li
798.093 130.382 li
804.529 141.529 li
798.093 152.677 li
cp
f
757.025 129.341 mo
743.504 129.341 li
736.744 117.631 li
743.504 105.922 li
757.025 105.922 li
763.786 117.631 li
757.025 129.341 li
cp
f
715.97 153.823 mo
701.775 153.823 li
694.677 141.529 li
701.775 129.236 li
715.97 129.236 li
723.067 141.529 li
715.97 153.823 li
cp
f
674.965 178.393 mo
659.994 178.393 li
652.508 165.427 li
659.994 152.462 li
674.965 152.462 li
682.451 165.427 li
674.965 178.393 li
cp
f
633.897 202.853 mo
618.276 202.853 li
610.466 189.325 li
618.276 175.798 li
633.897 175.798 li
641.708 189.325 li
633.897 202.853 li
cp
f
592.862 227.37 mo
576.527 227.37 li
568.359 213.224 li
576.527 199.077 li
592.862 199.077 li
601.029 213.224 li
592.862 227.37 li
cp
f
551.806 251.852 mo
534.797 251.852 li
526.293 237.122 li
534.797 222.392 li
551.806 222.392 li
560.31 237.122 li
551.806 251.852 li
cp
f
510.802 276.422 mo
493.016 276.422 li
484.124 261.02 li
493.016 245.617 li
510.802 245.617 li
519.694 261.02 li
510.802 276.422 li
cp
f
469.638 300.716 mo
451.395 300.716 li
442.274 284.918 li
451.395 269.119 li
469.638 269.119 li
478.759 284.918 li
469.638 300.716 li
cp
f
428.633 325.287 mo
409.614 325.287 li
400.105 308.816 li
409.614 292.345 li
428.633 292.345 li
438.143 308.816 li
428.633 325.287 li
cp
f
428.633 373.083 mo
409.614 373.083 li
400.105 356.612 li
409.614 340.141 li
428.633 340.141 li
438.143 356.612 li
428.633 373.083 li
cp
f
428.633 420.879 mo
409.614 420.879 li
400.105 404.408 li
409.614 387.937 li
428.633 387.937 li
438.143 404.408 li
428.633 420.879 li
cp
f
428.633 468.675 mo
409.614 468.675 li
400.105 452.204 li
409.614 435.733 li
428.633 435.733 li
438.143 452.204 li
428.633 468.675 li
cp
f
428.633 516.471 mo
409.614 516.471 li
400.105 500 li
409.614 483.529 li
428.633 483.529 li
438.143 500 li
428.633 516.471 li
cp
f
428.633 564.267 mo
409.614 564.267 li
400.105 547.796 li
409.614 531.325 li
428.633 531.325 li
438.143 547.796 li
428.633 564.267 li
cp
f
428.633 612.063 mo
409.614 612.063 li
400.105 595.592 li
409.614 579.121 li
428.633 579.121 li
438.143 595.592 li
428.633 612.063 li
cp
f
428.633 659.859 mo
409.614 659.859 li
400.105 643.388 li
409.614 626.917 li
428.633 626.917 li
438.143 643.388 li
428.633 659.859 li
cp
f
387.565 732.116 mo
367.897 732.116 li
358.063 715.082 li
367.897 698.049 li
387.565 698.049 li
397.399 715.082 li
387.565 732.116 li
cp
f
428.633 755.451 mo
409.614 755.451 li
400.105 738.98 li
409.614 722.51 li
428.633 722.51 li
438.143 738.98 li
428.633 755.451 li
cp
f
469.638 778.677 mo
451.395 778.677 li
442.274 762.878 li
451.395 747.08 li
469.638 747.08 li
478.759 762.878 li
469.638 778.677 li
cp
f
510.802 802.179 mo
493.016 802.179 li
484.124 786.776 li
493.016 771.374 li
510.802 771.374 li
519.694 786.776 li
510.802 802.179 li
cp
f
551.806 825.405 mo
534.797 825.405 li
526.293 810.675 li
534.797 795.945 li
551.806 795.945 li
560.31 810.675 li
551.806 825.405 li
cp
f
592.862 848.719 mo
576.527 848.719 li
568.359 834.573 li
576.527 820.426 li
592.862 820.426 li
601.029 834.573 li
592.862 848.719 li
cp
f
633.897 871.999 mo
618.276 871.999 li
610.466 858.471 li
618.276 844.943 li
633.897 844.943 li
641.708 858.471 li
633.897 871.999 li
cp
f
674.965 895.334 mo
659.994 895.334 li
652.508 882.369 li
659.994 869.403 li
674.965 869.403 li
682.451 882.369 li
674.965 895.334 li
cp
f
715.97 918.56 mo
701.775 918.56 li
694.677 906.267 li
701.775 893.973 li
715.97 893.973 li
723.067 906.267 li
715.97 918.56 li
cp
f
757.025 941.874 mo
743.504 941.874 li
736.744 930.165 li
743.504 918.455 li
757.025 918.455 li
763.786 930.165 li
757.025 941.874 li
cp
f
798.093 917.414 mo
785.221 917.414 li
778.785 906.267 li
785.221 895.119 li
798.093 895.119 li
804.529 906.267 li
798.093 917.414 li
cp
f
839.161 892.954 mo
826.939 892.954 li
820.827 882.369 li
826.939 871.784 li
839.161 871.784 li
845.273 882.369 li
839.161 892.954 li
cp
f
880.217 868.472 mo
868.668 868.472 li
862.894 858.471 li
868.668 848.469 li
880.217 848.469 li
885.991 858.471 li
880.217 868.472 li
cp
f
921.221 843.902 mo
910.449 843.902 li
905.063 834.573 li
910.449 825.243 li
921.221 825.243 li
926.607 834.573 li
921.221 843.902 li
cp
f
962.289 819.441 mo
952.166 819.441 li
947.105 810.675 li
952.166 801.908 li
962.289 801.908 li
967.351 810.675 li
962.289 819.441 li
cp
f
1003.36 794.981 mo
993.884 794.981 li
989.147 786.776 li
993.884 778.572 li
1003.36 778.572 li
1008.09 786.776 li
1003.36 794.981 li
cp
f
1044.43 770.521 mo
1035.6 770.521 li
1031.19 762.878 li
1035.6 755.236 li
1044.43 755.236 li
1048.84 762.878 li
1044.43 770.521 li
cp
f
1085.48 746.039 mo
1077.33 746.039 li
1073.26 738.98 li
1077.33 731.922 li
1085.48 731.922 li
1089.56 738.98 li
1085.48 746.039 li
cp
f
1126.55 721.578 mo
1119.05 721.578 li
1115.3 715.082 li
1119.05 708.586 li
1126.55 708.586 li
1130.3 715.082 li
1126.55 721.578 li
cp
f
1126.55 673.782 mo
1119.05 673.782 li
1115.3 667.286 li
1119.05 660.79 li
1126.55 660.79 li
1130.3 667.286 li
1126.55 673.782 li
cp
f
1126.55 625.986 mo
1119.05 625.986 li
1115.3 619.49 li
1119.05 612.994 li
1126.55 612.994 li
1130.3 619.49 li
1126.55 625.986 li
cp
f
1126.55 578.19 mo
1119.05 578.19 li
1115.3 571.694 li
1119.05 565.198 li
1126.55 565.198 li
1130.3 571.694 li
1126.55 578.19 li
cp
f
1126.55 530.394 mo
1119.05 530.394 li
1115.3 523.898 li
1119.05 517.402 li
1126.55 517.402 li
1130.3 523.898 li
1126.55 530.394 li
cp
f
1126.55 482.598 mo
1119.05 482.598 li
1115.3 476.102 li
1119.05 469.606 li
1126.55 469.606 li
1130.3 476.102 li
1126.55 482.598 li
cp
f
1126.55 434.802 mo
1119.05 434.802 li
1115.3 428.306 li
1119.05 421.81 li
1126.55 421.81 li
1130.3 428.306 li
1126.55 434.802 li
cp
f
1126.55 387.006 mo
1119.05 387.006 li
1115.3 380.51 li
1119.05 374.014 li
1126.55 374.014 li
1130.3 380.51 li
1126.55 387.006 li
cp
f
1126.55 339.21 mo
1119.05 339.21 li
1115.3 332.714 li
1119.05 326.218 li
1126.55 326.218 li
1130.3 332.714 li
1126.55 339.21 li
cp
f
1126.55 291.414 mo
1119.05 291.414 li
1115.3 284.918 li
1119.05 278.421 li
1126.55 278.421 li
1130.3 284.918 li
1126.55 291.414 li
cp
f
1085.48 268.078 mo
1077.33 268.078 li
1073.26 261.02 li
1077.33 253.961 li
1085.48 253.961 li
1089.56 261.02 li
1085.48 268.078 li
cp
f
1044.43 244.764 mo
1035.6 244.764 li
1031.19 237.122 li
1035.6 229.479 li
1044.43 229.479 li
1048.84 237.122 li
1044.43 244.764 li
cp
f
1003.36 221.428 mo
993.884 221.428 li
989.147 213.224 li
993.884 205.019 li
1003.36 205.019 li
1008.09 213.224 li
1003.36 221.428 li
cp
f
962.289 198.092 mo
952.166 198.092 li
947.105 189.325 li
952.166 180.559 li
962.289 180.559 li
967.351 189.325 li
962.289 198.092 li
cp
f
921.221 174.756 mo
910.449 174.756 li
905.063 165.427 li
910.449 156.098 li
921.221 156.098 li
926.607 165.427 li
921.221 174.756 li
cp
f
880.217 151.531 mo
868.668 151.531 li
862.894 141.529 li
868.668 131.528 li
880.217 131.528 li
885.991 141.529 li
880.217 151.531 li
cp
f
839.161 128.216 mo
826.939 128.216 li
820.827 117.631 li
826.939 107.046 li
839.161 107.046 li
845.273 117.631 li
839.161 128.216 li
cp
f
798.093 104.881 mo
785.221 104.881 li
778.785 93.7333 li
785.221 82.586 li
798.093 82.586 li
804.529 93.7333 li
798.093 104.881 li
cp
f
757.025 81.5449 mo
743.504 81.5449 li
736.744 69.8353 li
743.504 58.1256 li
757.025 58.1256 li
763.786 69.8353 li
757.025 81.5449 li
cp
f
715.97 106.027 mo
701.775 106.027 li
694.677 93.7333 li
701.775 81.44 li
715.97 81.44 li
723.067 93.7333 li
715.97 106.027 li
cp
f
674.965 130.597 mo
659.994 130.597 li
652.508 117.631 li
659.994 104.666 li
674.965 104.666 li
682.451 117.631 li
674.965 130.597 li
cp
f
633.897 155.057 mo
618.276 155.057 li
610.466 141.529 li
618.276 128.001 li
633.897 128.001 li
641.708 141.529 li
633.897 155.057 li
cp
f
592.862 179.574 mo
576.527 179.574 li
568.359 165.427 li
576.527 151.281 li
592.862 151.281 li
601.029 165.427 li
592.862 179.574 li
cp
f
551.806 204.055 mo
534.797 204.055 li
526.293 189.325 li
534.797 174.595 li
551.806 174.595 li
560.31 189.325 li
551.806 204.055 li
cp
f
510.802 228.626 mo
493.016 228.626 li
484.124 213.224 li
493.016 197.821 li
510.802 197.821 li
519.694 213.224 li
510.802 228.626 li
cp
f
469.638 252.92 mo
451.395 252.92 li
442.274 237.122 li
451.395 221.323 li
469.638 221.323 li
478.759 237.122 li
469.638 252.92 li
cp
f
428.633 277.491 mo
409.614 277.491 li
400.105 261.02 li
409.614 244.549 li
428.633 244.549 li
438.143 261.02 li
428.633 277.491 li
cp
f
387.565 301.951 mo
367.897 301.951 li
358.063 284.918 li
367.897 267.884 li
387.565 267.884 li
397.399 284.918 li
387.565 301.951 li
cp
f
387.565 349.747 mo
367.897 349.747 li
358.063 332.714 li
367.897 315.681 li
387.565 315.681 li
397.399 332.714 li
387.565 349.747 li
cp
f
387.565 397.543 mo
367.897 397.543 li
358.063 380.51 li
367.897 363.477 li
387.565 363.477 li
397.399 380.51 li
387.565 397.543 li
cp
f
387.565 445.339 mo
367.897 445.339 li
358.063 428.306 li
367.897 411.273 li
387.565 411.273 li
397.399 428.306 li
387.565 445.339 li
cp
f
387.565 493.135 mo
367.897 493.135 li
358.063 476.102 li
367.897 459.069 li
387.565 459.069 li
397.399 476.102 li
387.565 493.135 li
cp
f
387.565 540.931 mo
367.897 540.931 li
358.063 523.898 li
367.897 506.865 li
387.565 506.865 li
397.399 523.898 li
387.565 540.931 li
cp
f
387.565 588.727 mo
367.897 588.727 li
358.063 571.694 li
367.897 554.661 li
387.565 554.661 li
397.399 571.694 li
387.565 588.727 li
cp
f
387.565 636.523 mo
367.897 636.523 li
358.063 619.49 li
367.897 602.457 li
387.565 602.457 li
397.399 619.49 li
387.565 636.523 li
cp
f
387.565 684.32 mo
367.897 684.32 li
358.063 667.286 li
367.897 650.253 li
387.565 650.253 li
397.399 667.286 li
387.565 684.32 li
cp
f
346.542 756.653 mo
326.135 756.653 li
315.932 738.98 li
326.135 721.307 li
346.542 721.307 li
356.745 738.98 li
346.542 756.653 li
cp
f
387.565 779.912 mo
367.897 779.912 li
358.063 762.878 li
367.897 745.845 li
387.565 745.845 li
397.399 762.878 li
387.565 779.912 li
cp
f
428.633 803.247 mo
409.614 803.247 li
400.105 786.776 li
409.614 770.306 li
428.633 770.306 li
438.143 786.776 li
428.633 803.247 li
cp
f
469.638 826.473 mo
451.395 826.473 li
442.274 810.675 li
451.395 794.876 li
469.638 794.876 li
478.759 810.675 li
469.638 826.473 li
cp
f
510.802 849.975 mo
493.016 849.975 li
484.124 834.573 li
493.016 819.17 li
510.802 819.17 li
519.694 834.573 li
510.802 849.975 li
cp
f
551.806 873.201 mo
534.797 873.201 li
526.293 858.471 li
534.797 843.741 li
551.806 843.741 li
560.31 858.471 li
551.806 873.201 li
cp
f
592.862 896.515 mo
576.527 896.515 li
568.359 882.369 li
576.527 868.222 li
592.862 868.222 li
601.029 882.369 li
592.862 896.515 li
cp
f
633.897 919.795 mo
618.276 919.795 li
610.466 906.267 li
618.276 892.739 li
633.897 892.739 li
641.708 906.267 li
633.897 919.795 li
cp
f
674.965 943.13 mo
659.994 943.13 li
652.508 930.165 li
659.994 917.199 li
674.965 917.199 li
682.451 930.165 li
674.965 943.13 li
cp
f
715.97 966.356 mo
701.775 966.356 li
694.677 954.063 li
701.775 941.769 li
715.97 941.769 li
723.067 954.063 li
715.97 966.356 li
cp
f
757.025 989.67 mo
743.504 989.67 li
736.744 977.961 li
743.504 966.251 li
757.025 966.251 li
763.786 977.961 li
757.025 989.67 li
cp
f
798.093 965.21 mo
785.221 965.21 li
778.785 954.063 li
785.221 942.915 li
798.093 942.915 li
804.529 954.063 li
798.093 965.21 li
cp
f
839.161 940.75 mo
826.939 940.75 li
820.827 930.165 li
826.939 919.58 li
839.161 919.58 li
845.273 930.165 li
839.161 940.75 li
cp
f
880.217 916.268 mo
868.668 916.268 li
862.894 906.267 li
868.668 896.265 li
880.217 896.265 li
885.991 906.267 li
880.217 916.268 li
cp
f
921.221 891.698 mo
910.449 891.698 li
905.063 882.369 li
910.449 873.04 li
921.221 873.04 li
926.607 882.369 li
921.221 891.698 li
cp
f
962.289 867.237 mo
952.166 867.237 li
947.105 858.471 li
952.166 849.704 li
962.289 849.704 li
967.351 858.471 li
962.289 867.237 li
cp
f
1003.36 842.777 mo
993.884 842.777 li
989.147 834.573 li
993.884 826.368 li
1003.36 826.368 li
1008.09 834.573 li
1003.36 842.777 li
cp
f
1044.43 818.317 mo
1035.6 818.317 li
1031.19 810.675 li
1035.6 803.032 li
1044.43 803.032 li
1048.84 810.675 li
1044.43 818.317 li
cp
f
1085.48 793.835 mo
1077.33 793.835 li
1073.26 786.776 li
1077.33 779.718 li
1085.48 779.718 li
1089.56 786.776 li
1085.48 793.835 li
cp
f
1126.55 769.375 mo
1119.05 769.375 li
1115.3 762.878 li
1119.05 756.382 li
1126.55 756.382 li
1130.3 762.878 li
1126.55 769.375 li
cp
f
1167.55 744.804 mo
1160.83 744.804 li
1157.47 738.98 li
1160.83 733.157 li
1167.55 733.157 li
1170.92 738.98 li
1167.55 744.804 li
cp
f
1167.55 697.008 mo
1160.83 697.008 li
1157.47 691.184 li
1160.83 685.361 li
1167.55 685.361 li
1170.92 691.184 li
1167.55 697.008 li
cp
f
1167.55 649.212 mo
1160.83 649.212 li
1157.47 643.388 li
1160.83 637.564 li
1167.55 637.564 li
1170.92 643.388 li
1167.55 649.212 li
cp
f
1167.55 601.416 mo
1160.83 601.416 li
1157.47 595.592 li
1160.83 589.768 li
1167.55 589.768 li
1170.92 595.592 li
1167.55 601.416 li
cp
f
1167.55 553.62 mo
1160.83 553.62 li
1157.47 547.796 li
1160.83 541.972 li
1167.55 541.972 li
1170.92 547.796 li
1167.55 553.62 li
cp
f
1167.55 505.824 mo
1160.83 505.824 li
1157.47 500 li
1160.83 494.176 li
1167.55 494.176 li
1170.92 500 li
1167.55 505.824 li
cp
f
1167.55 458.028 mo
1160.83 458.028 li
1157.47 452.204 li
1160.83 446.38 li
1167.55 446.38 li
1170.92 452.204 li
1167.55 458.028 li
cp
f
1167.55 410.232 mo
1160.83 410.232 li
1157.47 404.408 li
1160.83 398.584 li
1167.55 398.584 li
1170.92 404.408 li
1167.55 410.232 li
cp
f
1167.55 362.436 mo
1160.83 362.436 li
1157.47 356.612 li
1160.83 350.788 li
1167.55 350.788 li
1170.92 356.612 li
1167.55 362.436 li
cp
f
1167.55 314.639 mo
1160.83 314.639 li
1157.47 308.816 li
1160.83 302.992 li
1167.55 302.992 li
1170.92 308.816 li
1167.55 314.639 li
cp
f
1167.55 266.843 mo
1160.83 266.843 li
1157.47 261.02 li
1160.83 255.196 li
1167.55 255.196 li
1170.92 261.02 li
1167.55 266.843 li
cp
f
1126.55 243.618 mo
1119.05 243.618 li
1115.3 237.122 li
1119.05 230.625 li
1126.55 230.625 li
1130.3 237.122 li
1126.55 243.618 li
cp
f
1085.48 220.282 mo
1077.33 220.282 li
1073.26 213.224 li
1077.33 206.165 li
1085.48 206.165 li
1089.56 213.224 li
1085.48 220.282 li
cp
f
1044.43 196.968 mo
1035.6 196.968 li
1031.19 189.325 li
1035.6 181.683 li
1044.43 181.683 li
1048.84 189.325 li
1044.43 196.968 li
cp
f
1003.36 173.632 mo
993.884 173.632 li
989.147 165.427 li
993.884 157.223 li
1003.36 157.223 li
1008.09 165.427 li
1003.36 173.632 li
cp
f
962.289 150.296 mo
952.166 150.296 li
947.105 141.529 li
952.166 132.763 li
962.289 132.763 li
967.351 141.529 li
962.289 150.296 li
cp
f
921.221 126.96 mo
910.449 126.96 li
905.063 117.631 li
910.449 108.302 li
921.221 108.302 li
926.607 117.631 li
921.221 126.96 li
cp
f
880.217 103.735 mo
868.668 103.735 li
862.894 93.7333 li
868.668 83.7319 li
880.217 83.7319 li
885.991 93.7333 li
880.217 103.735 li
cp
f
839.161 80.4203 mo
826.939 80.4203 li
820.827 69.8353 li
826.939 59.2502 li
839.161 59.2502 li
845.273 69.8353 li
839.161 80.4203 li
cp
f
798.093 57.0846 mo
785.221 57.0846 li
778.785 45.9372 li
785.221 34.7899 li
798.093 34.7899 li
804.529 45.9372 li
798.093 57.0846 li
cp
f
757.025 33.7489 mo
743.504 33.7489 li
736.744 22.0392 li
743.504 10.3295 li
757.025 10.3295 li
763.786 22.0392 li
757.025 33.7489 li
cp
f
715.97 58.2306 mo
701.775 58.2306 li
694.677 45.9372 li
701.775 33.6439 li
715.97 33.6439 li
723.067 45.9372 li
715.97 58.2306 li
cp
f
674.965 82.8009 mo
659.994 82.8009 li
652.508 69.8353 li
659.994 56.8696 li
674.965 56.8696 li
682.451 69.8353 li
674.965 82.8009 li
cp
f
633.897 107.261 mo
618.276 107.261 li
610.466 93.7333 li
618.276 80.2053 li
633.897 80.2053 li
641.708 93.7333 li
633.897 107.261 li
cp
f
592.862 131.778 mo
576.527 131.778 li
568.359 117.631 li
576.527 103.485 li
592.862 103.485 li
601.029 117.631 li
592.862 131.778 li
cp
f
551.806 156.259 mo
534.797 156.259 li
526.293 141.529 li
534.797 126.799 li
551.806 126.799 li
560.31 141.529 li
551.806 156.259 li
cp
f
510.802 180.83 mo
493.016 180.83 li
484.124 165.427 li
493.016 150.025 li
510.802 150.025 li
519.694 165.427 li
510.802 180.83 li
cp
f
469.638 205.124 mo
451.395 205.124 li
442.274 189.325 li
451.395 173.527 li
469.638 173.527 li
478.759 189.325 li
469.638 205.124 li
cp
f
428.633 229.694 mo
409.614 229.694 li
400.105 213.224 li
409.614 196.753 li
428.633 196.753 li
438.143 213.224 li
428.633 229.694 li
cp
f
387.565 254.155 mo
367.897 254.155 li
358.063 237.122 li
367.897 220.088 li
387.565 220.088 li
397.399 237.122 li
387.565 254.155 li
cp
f
346.542 278.693 mo
326.135 278.693 li
315.932 261.02 li
326.135 243.347 li
346.542 243.347 li
356.745 261.02 li
346.542 278.693 li
cp
f
346.542 326.489 mo
326.135 326.489 li
315.932 308.816 li
326.135 291.143 li
346.542 291.143 li
356.745 308.816 li
346.542 326.489 li
cp
f
346.542 374.285 mo
326.135 374.285 li
315.932 356.612 li
326.135 338.939 li
346.542 338.939 li
356.745 356.612 li
346.542 374.285 li
cp
f
346.542 422.081 mo
326.135 422.081 li
315.932 404.408 li
326.135 386.735 li
346.542 386.735 li
356.745 404.408 li
346.542 422.081 li
cp
f
346.542 469.877 mo
326.135 469.877 li
315.932 452.204 li
326.135 434.531 li
346.542 434.531 li
356.745 452.204 li
346.542 469.877 li
cp
f
346.542 517.673 mo
326.135 517.673 li
315.932 500 li
326.135 482.327 li
346.542 482.327 li
356.745 500 li
346.542 517.673 li
cp
f
346.542 565.469 mo
326.135 565.469 li
315.932 547.796 li
326.135 530.123 li
346.542 530.123 li
356.745 547.796 li
346.542 565.469 li
cp
f
346.542 613.265 mo
326.135 613.265 li
315.932 595.592 li
326.135 577.919 li
346.542 577.919 li
356.745 595.592 li
346.542 613.265 li
cp
f
346.542 661.061 mo
326.135 661.061 li
315.932 643.388 li
326.135 625.715 li
346.542 625.715 li
356.745 643.388 li
346.542 661.061 li
cp
f
346.542 708.857 mo
326.135 708.857 li
315.932 691.184 li
326.135 673.511 li
346.542 673.511 li
356.745 691.184 li
346.542 708.857 li
cp
f
305.474 781.114 mo
284.418 781.114 li
273.89 762.878 li
284.418 744.643 li
305.474 744.643 li
316.002 762.878 li
305.474 781.114 li
cp
f
346.542 804.449 mo
326.135 804.449 li
315.932 786.776 li
326.135 769.104 li
346.542 769.104 li
356.745 786.776 li
346.542 804.449 li
cp
f
387.565 827.708 mo
367.897 827.708 li
358.063 810.675 li
367.897 793.641 li
387.565 793.641 li
397.399 810.675 li
387.565 827.708 li
cp
f
428.633 851.044 mo
409.614 851.044 li
400.105 834.573 li
409.614 818.102 li
428.633 818.102 li
438.143 834.573 li
428.633 851.044 li
cp
f
469.638 874.269 mo
451.395 874.269 li
442.274 858.471 li
451.395 842.672 li
469.638 842.672 li
478.759 858.471 li
469.638 874.269 li
cp
f
510.802 897.771 mo
493.016 897.771 li
484.124 882.369 li
493.016 866.966 li
510.802 866.966 li
519.694 882.369 li
510.802 897.771 li
cp
f
551.806 920.997 mo
534.797 920.997 li
526.293 906.267 li
534.797 891.537 li
551.806 891.537 li
560.31 906.267 li
551.806 920.997 li
cp
f
592.862 944.311 mo
576.527 944.311 li
568.359 930.165 li
576.527 916.018 li
592.862 916.018 li
601.029 930.165 li
592.862 944.311 li
cp
f
633.897 967.591 mo
618.276 967.591 li
610.466 954.063 li
618.276 940.535 li
633.897 940.535 li
641.708 954.063 li
633.897 967.591 li
cp
f
674.965 990.926 mo
659.994 990.926 li
652.508 977.961 li
659.994 964.995 li
674.965 964.995 li
682.451 977.961 li
674.965 990.926 li
cp
f
715.97 1014.15 mo
701.775 1014.15 li
694.677 1001.86 li
701.775 989.566 li
715.97 989.566 li
723.067 1001.86 li
715.97 1014.15 li
cp
f
798.093 1013.01 mo
785.221 1013.01 li
778.785 1001.86 li
785.221 990.711 li
798.093 990.711 li
804.529 1001.86 li
798.093 1013.01 li
cp
f
839.161 988.546 mo
826.939 988.546 li
820.827 977.961 li
826.939 967.376 li
839.161 967.376 li
845.273 977.961 li
839.161 988.546 li
cp
f
880.217 964.064 mo
868.668 964.064 li
862.894 954.063 li
868.668 944.061 li
880.217 944.061 li
885.991 954.063 li
880.217 964.064 li
cp
f
921.221 939.494 mo
910.449 939.494 li
905.063 930.165 li
910.449 920.836 li
921.221 920.836 li
926.607 930.165 li
921.221 939.494 li
cp
f
962.289 915.033 mo
952.166 915.033 li
947.105 906.267 li
952.166 897.5 li
962.289 897.5 li
967.351 906.267 li
962.289 915.033 li
cp
f
1003.36 890.573 mo
993.884 890.573 li
989.147 882.369 li
993.884 874.164 li
1003.36 874.164 li
1008.09 882.369 li
1003.36 890.573 li
cp
f
1044.43 866.113 mo
1035.6 866.113 li
1031.19 858.471 li
1035.6 850.828 li
1044.43 850.828 li
1048.84 858.471 li
1044.43 866.113 li
cp
f
1085.48 841.631 mo
1077.33 841.631 li
1073.26 834.573 li
1077.33 827.514 li
1085.48 827.514 li
1089.56 834.573 li
1085.48 841.631 li
cp
f
1126.55 817.171 mo
1119.05 817.171 li
1115.3 810.675 li
1119.05 804.178 li
1126.55 804.178 li
1130.3 810.675 li
1126.55 817.171 li
cp
f
1167.55 792.6 mo
1160.83 792.6 li
1157.47 786.776 li
1160.83 780.953 li
1167.55 780.953 li
1170.92 786.776 li
1167.55 792.6 li
cp
f
1208.61 768.119 mo
1202.56 768.119 li
1199.53 762.878 li
1202.56 757.638 li
1208.61 757.638 li
1211.63 762.878 li
1208.61 768.119 li
cp
f
1208.61 720.323 mo
1202.56 720.323 li
1199.53 715.082 li
1202.56 709.842 li
1208.61 709.842 li
1211.63 715.082 li
1208.61 720.323 li
cp
f
1208.61 672.526 mo
1202.56 672.526 li
1199.53 667.286 li
1202.56 662.046 li
1208.61 662.046 li
1211.63 667.286 li
1208.61 672.526 li
cp
f
1208.61 624.73 mo
1202.56 624.73 li
1199.53 619.49 li
1202.56 614.25 li
1208.61 614.25 li
1211.63 619.49 li
1208.61 624.73 li
cp
f
1208.61 576.934 mo
1202.56 576.934 li
1199.53 571.694 li
1202.56 566.454 li
1208.61 566.454 li
1211.63 571.694 li
1208.61 576.934 li
cp
f
1208.61 529.138 mo
1202.56 529.138 li
1199.53 523.898 li
1202.56 518.658 li
1208.61 518.658 li
1211.63 523.898 li
1208.61 529.138 li
cp
f
1208.61 481.342 mo
1202.56 481.342 li
1199.53 476.102 li
1202.56 470.862 li
1208.61 470.862 li
1211.63 476.102 li
1208.61 481.342 li
cp
f
1208.61 433.546 mo
1202.56 433.546 li
1199.53 428.306 li
1202.56 423.066 li
1208.61 423.066 li
1211.63 428.306 li
1208.61 433.546 li
cp
f
1208.61 385.75 mo
1202.56 385.75 li
1199.53 380.51 li
1202.56 375.27 li
1208.61 375.27 li
1211.63 380.51 li
1208.61 385.75 li
cp
f
1208.61 337.954 mo
1202.56 337.954 li
1199.53 332.714 li
1202.56 327.474 li
1208.61 327.474 li
1211.63 332.714 li
1208.61 337.954 li
cp
f
1208.61 290.158 mo
1202.56 290.158 li
1199.53 284.918 li
1202.56 279.677 li
1208.61 279.677 li
1211.63 284.918 li
1208.61 290.158 li
cp
f
1208.61 242.362 mo
1202.56 242.362 li
1199.53 237.122 li
1202.56 231.881 li
1208.61 231.881 li
1211.63 237.122 li
1208.61 242.362 li
cp
f
1167.55 219.047 mo
1160.83 219.047 li
1157.47 213.224 li
1160.83 207.4 li
1167.55 207.4 li
1170.92 213.224 li
1167.55 219.047 li
cp
f
1126.55 195.822 mo
1119.05 195.822 li
1115.3 189.325 li
1119.05 182.829 li
1126.55 182.829 li
1130.3 189.325 li
1126.55 195.822 li
cp
f
1085.48 172.486 mo
1077.33 172.486 li
1073.26 165.427 li
1077.33 158.369 li
1085.48 158.369 li
1089.56 165.427 li
1085.48 172.486 li
cp
f
1044.43 149.172 mo
1035.6 149.172 li
1031.19 141.529 li
1035.6 133.887 li
1044.43 133.887 li
1048.84 141.529 li
1044.43 149.172 li
cp
f
1003.36 125.836 mo
993.884 125.836 li
989.147 117.631 li
993.884 109.427 li
1003.36 109.427 li
1008.09 117.631 li
1003.36 125.836 li
cp
f
962.289 102.5 mo
952.166 102.5 li
947.105 93.7333 li
952.166 84.9666 li
962.289 84.9666 li
967.351 93.7333 li
962.289 102.5 li
cp
f
921.221 79.1643 mo
910.449 79.1643 li
905.063 69.8353 li
910.449 60.5062 li
921.221 60.5062 li
926.607 69.8353 li
921.221 79.1643 li
cp
f
880.217 55.9386 mo
868.668 55.9386 li
862.894 45.9372 li
868.668 35.9359 li
880.217 35.9359 li
885.991 45.9372 li
880.217 55.9386 li
cp
f
839.161 32.6242 mo
826.939 32.6242 li
820.827 22.0392 li
826.939 11.4541 li
839.161 11.4541 li
845.273 22.0392 li
839.161 32.6242 li
cp
f
798.093 9.28851 mo
785.221 9.28851 li
778.785 -1.85885 li
785.221 -13.0062 li
798.093 -13.0062 li
804.529 -1.85885 li
798.093 9.28851 li
cp
f
715.97 10.4345 mo
701.775 10.4345 li
694.677 -1.85885 li
701.775 -14.1522 li
715.97 -14.1522 li
723.067 -1.85885 li
715.97 10.4345 li
cp
f
674.965 35.0049 mo
659.994 35.0049 li
652.508 22.0392 li
659.994 9.07352 li
674.965 9.07352 li
682.451 22.0392 li
674.965 35.0049 li
cp
f
633.897 59.4652 mo
618.276 59.4652 li
610.466 45.9372 li
618.276 32.4093 li
633.897 32.4093 li
641.708 45.9372 li
633.897 59.4652 li
cp
f
592.862 83.9816 mo
576.527 83.9816 li
568.359 69.8353 li
576.527 55.6889 li
592.862 55.6889 li
601.029 69.8353 li
592.862 83.9816 li
cp
f
551.806 108.463 mo
534.797 108.463 li
526.293 93.7333 li
534.797 79.0033 li
551.806 79.0033 li
560.31 93.7333 li
551.806 108.463 li
cp
f
510.802 133.034 mo
493.016 133.034 li
484.124 117.631 li
493.016 102.229 li
510.802 102.229 li
519.694 117.631 li
510.802 133.034 li
cp
f
469.638 157.328 mo
451.395 157.328 li
442.274 141.529 li
451.395 125.731 li
469.638 125.731 li
478.759 141.529 li
469.638 157.328 li
cp
f
428.633 181.898 mo
409.614 181.898 li
400.105 165.427 li
409.614 148.957 li
428.633 148.957 li
438.143 165.427 li
428.633 181.898 li
cp
f
387.565 206.359 mo
367.897 206.359 li
358.063 189.325 li
367.897 172.292 li
387.565 172.292 li
397.399 189.325 li
387.565 206.359 li
cp
f
346.542 230.896 mo
326.135 230.896 li
315.932 213.224 li
326.135 195.551 li
346.542 195.551 li
356.745 213.224 li
346.542 230.896 li
cp
f
305.474 255.357 mo
284.418 255.357 li
273.89 237.122 li
284.418 218.886 li
305.474 218.886 li
316.002 237.122 li
305.474 255.357 li
cp
f
305.474 303.153 mo
284.418 303.153 li
273.89 284.918 li
284.418 266.682 li
305.474 266.682 li
316.002 284.918 li
305.474 303.153 li
cp
f
305.474 350.949 mo
284.418 350.949 li
273.89 332.714 li
284.418 314.478 li
305.474 314.478 li
316.002 332.714 li
305.474 350.949 li
cp
f
305.474 398.745 mo
284.418 398.745 li
273.89 380.51 li
284.418 362.275 li
305.474 362.275 li
316.002 380.51 li
305.474 398.745 li
cp
f
305.474 446.541 mo
284.418 446.541 li
273.89 428.306 li
284.418 410.071 li
305.474 410.071 li
316.002 428.306 li
305.474 446.541 li
cp
f
305.474 494.337 mo
284.418 494.337 li
273.89 476.102 li
284.418 457.867 li
305.474 457.867 li
316.002 476.102 li
305.474 494.337 li
cp
f
305.474 542.133 mo
284.418 542.133 li
273.89 523.898 li
284.418 505.663 li
305.474 505.663 li
316.002 523.898 li
305.474 542.133 li
cp
f
305.474 589.929 mo
284.418 589.929 li
273.89 571.694 li
284.418 553.459 li
305.474 553.459 li
316.002 571.694 li
305.474 589.929 li
cp
f
305.474 637.725 mo
284.418 637.725 li
273.89 619.49 li
284.418 601.255 li
305.474 601.255 li
316.002 619.49 li
305.474 637.725 li
cp
f
305.474 685.521 mo
284.418 685.521 li
273.89 667.286 li
284.418 649.051 li
305.474 649.051 li
316.002 667.286 li
305.474 685.521 li
cp
f
305.474 733.318 mo
284.418 733.318 li
273.89 715.082 li
284.418 696.847 li
305.474 696.847 li
316.002 715.082 li
305.474 733.318 li
cp
f
264.47 805.684 mo
242.637 805.684 li
231.721 786.776 li
242.637 767.869 li
264.47 767.869 li
275.386 786.776 li
264.47 805.684 li
cp
f
305.474 828.91 mo
284.418 828.91 li
273.89 810.675 li
284.418 792.439 li
305.474 792.439 li
316.002 810.675 li
305.474 828.91 li
cp
f
346.542 852.246 mo
326.135 852.246 li
315.932 834.573 li
326.135 816.9 li
346.542 816.9 li
356.745 834.573 li
346.542 852.246 li
cp
f
387.565 875.504 mo
367.897 875.504 li
358.063 858.471 li
367.897 841.437 li
387.565 841.437 li
397.399 858.471 li
387.565 875.504 li
cp
f
428.633 898.84 mo
409.614 898.84 li
400.105 882.369 li
409.614 865.898 li
428.633 865.898 li
438.143 882.369 li
428.633 898.84 li
cp
f
469.638 922.065 mo
451.395 922.065 li
442.274 906.267 li
451.395 890.468 li
469.638 890.468 li
478.759 906.267 li
469.638 922.065 li
cp
f
510.802 945.567 mo
493.016 945.567 li
484.124 930.165 li
493.016 914.762 li
510.802 914.762 li
519.694 930.165 li
510.802 945.567 li
cp
f
551.806 968.793 mo
534.797 968.793 li
526.293 954.063 li
534.797 939.333 li
551.806 939.333 li
560.31 954.063 li
551.806 968.793 li
cp
f
592.862 992.107 mo
576.527 992.107 li
568.359 977.961 li
576.527 963.814 li
592.862 963.814 li
601.029 977.961 li
592.862 992.107 li
cp
f
633.897 1015.39 mo
618.276 1015.39 li
610.466 1001.86 li
618.276 988.331 li
633.897 988.331 li
641.708 1001.86 li
633.897 1015.39 li
cp
f
880.217 1011.86 mo
868.668 1011.86 li
862.894 1001.86 li
868.668 991.857 li
880.217 991.857 li
885.991 1001.86 li
880.217 1011.86 li
cp
f
921.221 987.29 mo
910.449 987.29 li
905.063 977.961 li
910.449 968.632 li
921.221 968.632 li
926.607 977.961 li
921.221 987.29 li
cp
f
962.289 962.83 mo
952.166 962.83 li
947.105 954.063 li
952.166 945.296 li
962.289 945.296 li
967.351 954.063 li
962.289 962.83 li
cp
f
1003.36 938.369 mo
993.884 938.369 li
989.147 930.165 li
993.884 921.96 li
1003.36 921.96 li
1008.09 930.165 li
1003.36 938.369 li
cp
f
1044.43 913.909 mo
1035.6 913.909 li
1031.19 906.267 li
1035.6 898.625 li
1044.43 898.625 li
1048.84 906.267 li
1044.43 913.909 li
cp
f
1085.48 889.427 mo
1077.33 889.427 li
1073.26 882.369 li
1077.33 875.31 li
1085.48 875.31 li
1089.56 882.369 li
1085.48 889.427 li
cp
f
1126.55 864.967 mo
1119.05 864.967 li
1115.3 858.471 li
1119.05 851.974 li
1126.55 851.974 li
1130.3 858.471 li
1126.55 864.967 li
cp
f
1167.55 840.396 mo
1160.83 840.396 li
1157.47 834.573 li
1160.83 828.749 li
1167.55 828.749 li
1170.92 834.573 li
1167.55 840.396 li
cp
f
1208.61 815.915 mo
1202.56 815.915 li
1199.53 810.675 li
1202.56 805.434 li
1208.61 805.434 li
1211.63 810.675 li
1208.61 815.915 li
cp
f
1249.68 791.454 mo
1244.28 791.454 li
1241.57 786.776 li
1244.28 782.099 li
1249.68 782.099 li
1252.38 786.776 li
1249.68 791.454 li
cp
f
1249.68 743.658 mo
1244.28 743.658 li
1241.57 738.98 li
1244.28 734.303 li
1249.68 734.303 li
1252.38 738.98 li
1249.68 743.658 li
cp
f
1249.68 695.862 mo
1244.28 695.862 li
1241.57 691.184 li
1244.28 686.506 li
1249.68 686.506 li
1252.38 691.184 li
1249.68 695.862 li
cp
f
1249.68 648.066 mo
1244.28 648.066 li
1241.57 643.388 li
1244.28 638.71 li
1249.68 638.71 li
1252.38 643.388 li
1249.68 648.066 li
cp
f
1249.68 600.27 mo
1244.28 600.27 li
1241.57 595.592 li
1244.28 590.914 li
1249.68 590.914 li
1252.38 595.592 li
1249.68 600.27 li
cp
f
1249.68 552.474 mo
1244.28 552.474 li
1241.57 547.796 li
1244.28 543.118 li
1249.68 543.118 li
1252.38 547.796 li
1249.68 552.474 li
cp
f
1249.68 504.678 mo
1244.28 504.678 li
1241.57 500 li
1244.28 495.322 li
1249.68 495.322 li
1252.38 500 li
1249.68 504.678 li
cp
f
1249.68 456.882 mo
1244.28 456.882 li
1241.57 452.204 li
1244.28 447.526 li
1249.68 447.526 li
1252.38 452.204 li
1249.68 456.882 li
cp
f
1249.68 409.086 mo
1244.28 409.086 li
1241.57 404.408 li
1244.28 399.73 li
1249.68 399.73 li
1252.38 404.408 li
1249.68 409.086 li
cp
f
1249.68 361.29 mo
1244.28 361.29 li
1241.57 356.612 li
1244.28 351.934 li
1249.68 351.934 li
1252.38 356.612 li
1249.68 361.29 li
cp
f
1249.68 313.493 mo
1244.28 313.493 li
1241.57 308.816 li
1244.28 304.138 li
1249.68 304.138 li
1252.38 308.816 li
1249.68 313.493 li
cp
f
1249.68 265.697 mo
1244.28 265.697 li
1241.57 261.02 li
1244.28 256.342 li
1249.68 256.342 li
1252.38 261.02 li
1249.68 265.697 li
cp
f
1249.68 217.901 mo
1244.28 217.901 li
1241.57 213.224 li
1244.28 208.546 li
1249.68 208.546 li
1252.38 213.224 li
1249.68 217.901 li
cp
f
1208.61 194.566 mo
1202.56 194.566 li
1199.53 189.325 li
1202.56 184.085 li
1208.61 184.085 li
1211.63 189.325 li
1208.61 194.566 li
cp
f
1167.55 171.251 mo
1160.83 171.251 li
1157.47 165.427 li
1160.83 159.604 li
1167.55 159.604 li
1170.92 165.427 li
1167.55 171.251 li
cp
f
1126.55 148.026 mo
1119.05 148.026 li
1115.3 141.529 li
1119.05 135.033 li
1126.55 135.033 li
1130.3 141.529 li
1126.55 148.026 li
cp
f
1085.48 124.69 mo
1077.33 124.69 li
1073.26 117.631 li
1077.33 110.573 li
1085.48 110.573 li
1089.56 117.631 li
1085.48 124.69 li
cp
f
1044.43 101.375 mo
1035.6 101.375 li
1031.19 93.7333 li
1035.6 86.0912 li
1044.43 86.0912 li
1048.84 93.7333 li
1044.43 101.375 li
cp
f
1003.36 78.0397 mo
993.884 78.0397 li
989.147 69.8353 li
993.884 61.6308 li
1003.36 61.6308 li
1008.09 69.8353 li
1003.36 78.0397 li
cp
f
962.289 54.704 mo
952.166 54.704 li
947.105 45.9372 li
952.166 37.1705 li
962.289 37.1705 li
967.351 45.9372 li
962.289 54.704 li
cp
f
921.221 31.3682 mo
910.449 31.3682 li
905.063 22.0392 li
910.449 12.7101 li
921.221 12.7101 li
926.607 22.0392 li
921.221 31.3682 li
cp
f
880.217 8.14253 mo
868.668 8.14253 li
862.894 -1.85885 li
868.668 -11.8602 li
880.217 -11.8602 li
885.991 -1.85885 li
880.217 8.14253 li
cp
f
633.897 11.6691 mo
618.276 11.6691 li
610.466 -1.85885 li
618.276 -15.3868 li
633.897 -15.3868 li
641.708 -1.85885 li
633.897 11.6691 li
cp
f
592.862 36.1855 mo
576.527 36.1855 li
568.359 22.0392 li
576.527 7.89287 li
592.862 7.89287 li
601.029 22.0392 li
592.862 36.1855 li
cp
f
551.806 60.6672 mo
534.797 60.6672 li
526.293 45.9372 li
534.797 31.2072 li
551.806 31.2072 li
560.31 45.9372 li
551.806 60.6672 li
cp
f
510.802 85.2376 mo
493.016 85.2376 li
484.124 69.8353 li
493.016 54.4329 li
510.802 54.4329 li
519.694 69.8353 li
510.802 85.2376 li
cp
f
469.638 109.532 mo
451.395 109.532 li
442.274 93.7333 li
451.395 77.9347 li
469.638 77.9347 li
478.759 93.7333 li
469.638 109.532 li
cp
f
428.633 134.102 mo
409.614 134.102 li
400.105 117.631 li
409.614 101.16 li
428.633 101.16 li
438.143 117.631 li
428.633 134.102 li
cp
f
387.565 158.563 mo
367.897 158.563 li
358.063 141.529 li
367.897 124.496 li
387.565 124.496 li
397.399 141.529 li
387.565 158.563 li
cp
f
346.542 183.1 mo
326.135 183.1 li
315.932 165.427 li
326.135 147.755 li
346.542 147.755 li
356.745 165.427 li
346.542 183.1 li
cp
f
305.474 207.561 mo
284.418 207.561 li
273.89 189.325 li
284.418 171.09 li
305.474 171.09 li
316.002 189.325 li
305.474 207.561 li
cp
f
264.47 232.131 mo
242.637 232.131 li
231.721 213.224 li
242.637 194.316 li
264.47 194.316 li
275.386 213.224 li
264.47 232.131 li
cp
f
264.47 279.927 mo
242.637 279.927 li
231.721 261.02 li
242.637 242.112 li
264.47 242.112 li
275.386 261.02 li
264.47 279.927 li
cp
f
264.47 327.723 mo
242.637 327.723 li
231.721 308.816 li
242.637 289.908 li
264.47 289.908 li
275.386 308.816 li
264.47 327.723 li
cp
f
264.47 375.519 mo
242.637 375.519 li
231.721 356.612 li
242.637 337.704 li
264.47 337.704 li
275.386 356.612 li
264.47 375.519 li
cp
f
264.47 423.315 mo
242.637 423.315 li
231.721 404.408 li
242.637 385.5 li
264.47 385.5 li
275.386 404.408 li
264.47 423.315 li
cp
f
264.47 471.111 mo
242.637 471.111 li
231.721 452.204 li
242.637 433.296 li
264.47 433.296 li
275.386 452.204 li
264.47 471.111 li
cp
f
264.47 518.908 mo
242.637 518.908 li
231.721 500 li
242.637 481.092 li
264.47 481.092 li
275.386 500 li
264.47 518.908 li
cp
f
264.47 566.704 mo
242.637 566.704 li
231.721 547.796 li
242.637 528.888 li
264.47 528.888 li
275.386 547.796 li
264.47 566.704 li
cp
f
264.47 614.5 mo
242.637 614.5 li
231.721 595.592 li
242.637 576.685 li
264.47 576.685 li
275.386 595.592 li
264.47 614.5 li
cp
f
264.47 662.296 mo
242.637 662.296 li
231.721 643.388 li
242.637 624.481 li
264.47 624.481 li
275.386 643.388 li
264.47 662.296 li
cp
f
264.47 710.092 mo
242.637 710.092 li
231.721 691.184 li
242.637 672.277 li
264.47 672.277 li
275.386 691.184 li
264.47 710.092 li
cp
f
264.47 757.888 mo
242.637 757.888 li
231.721 738.98 li
242.637 720.073 li
264.47 720.073 li
275.386 738.98 li
264.47 757.888 li
cp
f
223.414 830.166 mo
200.907 830.166 li
189.654 810.675 li
200.907 791.183 li
223.414 791.183 li
234.667 810.675 li
223.414 830.166 li
cp
f
264.47 853.48 mo
242.637 853.48 li
231.721 834.573 li
242.637 815.665 li
264.47 815.665 li
275.386 834.573 li
264.47 853.48 li
cp
f
305.474 876.706 mo
284.418 876.706 li
273.89 858.471 li
284.418 840.235 li
305.474 840.235 li
316.002 858.471 li
305.474 876.706 li
cp
f
346.542 900.042 mo
326.135 900.042 li
315.932 882.369 li
326.135 864.696 li
346.542 864.696 li
356.745 882.369 li
346.542 900.042 li
cp
f
387.565 923.3 mo
367.897 923.3 li
358.063 906.267 li
367.897 889.234 li
387.565 889.234 li
397.399 906.267 li
387.565 923.3 li
cp
f
428.633 946.636 mo
409.614 946.636 li
400.105 930.165 li
409.614 913.694 li
428.633 913.694 li
438.143 930.165 li
428.633 946.636 li
cp
f
469.638 969.861 mo
451.395 969.861 li
442.274 954.063 li
451.395 938.264 li
469.638 938.264 li
478.759 954.063 li
469.638 969.861 li
cp
f
510.802 993.363 mo
493.016 993.363 li
484.124 977.961 li
493.016 962.558 li
510.802 962.558 li
519.694 977.961 li
510.802 993.363 li
cp
f
551.806 1016.59 mo
534.797 1016.59 li
526.293 1001.86 li
534.797 987.129 li
551.806 987.129 li
560.31 1001.86 li
551.806 1016.59 li
cp
f
962.289 1010.63 mo
952.166 1010.63 li
947.105 1001.86 li
952.166 993.092 li
962.289 993.092 li
967.351 1001.86 li
962.289 1010.63 li
cp
f
1003.36 986.165 mo
993.884 986.165 li
989.147 977.961 li
993.884 969.756 li
1003.36 969.756 li
1008.09 977.961 li
1003.36 986.165 li
cp
f
1044.43 961.705 mo
1035.6 961.705 li
1031.19 954.063 li
1035.6 946.421 li
1044.43 946.421 li
1048.84 954.063 li
1044.43 961.705 li
cp
f
1085.48 937.223 mo
1077.33 937.223 li
1073.26 930.165 li
1077.33 923.106 li
1085.48 923.106 li
1089.56 930.165 li
1085.48 937.223 li
cp
f
1126.55 912.763 mo
1119.05 912.763 li
1115.3 906.267 li
1119.05 899.771 li
1126.55 899.771 li
1130.3 906.267 li
1126.55 912.763 li
cp
f
1167.55 888.192 mo
1160.83 888.192 li
1157.47 882.369 li
1160.83 876.545 li
1167.55 876.545 li
1170.92 882.369 li
1167.55 888.192 li
cp
f
1208.61 863.711 mo
1202.56 863.711 li
1199.53 858.471 li
1202.56 853.23 li
1208.61 853.23 li
1211.63 858.471 li
1208.61 863.711 li
cp
f
1249.68 839.25 mo
1244.28 839.25 li
1241.57 834.573 li
1244.28 829.895 li
1249.68 829.895 li
1252.38 834.573 li
1249.68 839.25 li
cp
f
1290.74 814.79 mo
1285.99 814.79 li
1283.62 810.675 li
1285.99 806.559 li
1290.74 806.559 li
1293.12 810.675 li
1290.74 814.79 li
cp
f
1290.74 766.994 mo
1285.99 766.994 li
1283.62 762.878 li
1285.99 758.763 li
1290.74 758.763 li
1293.12 762.878 li
1290.74 766.994 li
cp
f
1290.74 719.198 mo
1285.99 719.198 li
1283.62 715.082 li
1285.99 710.967 li
1290.74 710.967 li
1293.12 715.082 li
1290.74 719.198 li
cp
f
1290.74 671.402 mo
1285.99 671.402 li
1283.62 667.286 li
1285.99 663.171 li
1290.74 663.171 li
1293.12 667.286 li
1290.74 671.402 li
cp
f
1290.74 623.606 mo
1285.99 623.606 li
1283.62 619.49 li
1285.99 615.375 li
1290.74 615.375 li
1293.12 619.49 li
1290.74 623.606 li
cp
f
1290.74 575.81 mo
1285.99 575.81 li
1283.62 571.694 li
1285.99 567.579 li
1290.74 567.579 li
1293.12 571.694 li
1290.74 575.81 li
cp
f
1290.74 528.014 mo
1285.99 528.014 li
1283.62 523.898 li
1285.99 519.782 li
1290.74 519.782 li
1293.12 523.898 li
1290.74 528.014 li
cp
f
1290.74 480.217 mo
1285.99 480.217 li
1283.62 476.102 li
1285.99 471.986 li
1290.74 471.986 li
1293.12 476.102 li
1290.74 480.217 li
cp
f
1290.74 432.421 mo
1285.99 432.421 li
1283.62 428.306 li
1285.99 424.19 li
1290.74 424.19 li
1293.12 428.306 li
1290.74 432.421 li
cp
f
1290.74 384.625 mo
1285.99 384.625 li
1283.62 380.51 li
1285.99 376.394 li
1290.74 376.394 li
1293.12 380.51 li
1290.74 384.625 li
cp
f
1290.74 336.829 mo
1285.99 336.829 li
1283.62 332.714 li
1285.99 328.598 li
1290.74 328.598 li
1293.12 332.714 li
1290.74 336.829 li
cp
f
1290.74 289.033 mo
1285.99 289.033 li
1283.62 284.918 li
1285.99 280.802 li
1290.74 280.802 li
1293.12 284.918 li
1290.74 289.033 li
cp
f
1290.74 241.237 mo
1285.99 241.237 li
1283.62 237.122 li
1285.99 233.006 li
1290.74 233.006 li
1293.12 237.122 li
1290.74 241.237 li
cp
f
1290.74 193.441 mo
1285.99 193.441 li
1283.62 189.325 li
1285.99 185.21 li
1290.74 185.21 li
1293.12 189.325 li
1290.74 193.441 li
cp
f
1249.68 170.105 mo
1244.28 170.105 li
1241.57 165.427 li
1244.28 160.75 li
1249.68 160.75 li
1252.38 165.427 li
1249.68 170.105 li
cp
f
1208.61 146.77 mo
1202.56 146.77 li
1199.53 141.529 li
1202.56 136.289 li
1208.61 136.289 li
1211.63 141.529 li
1208.61 146.77 li
cp
f
1167.55 123.455 mo
1160.83 123.455 li
1157.47 117.631 li
1160.83 111.808 li
1167.55 111.808 li
1170.92 117.631 li
1167.55 123.455 li
cp
f
1126.55 100.229 mo
1119.05 100.229 li
1115.3 93.7333 li
1119.05 87.2372 li
1126.55 87.2372 li
1130.3 93.7333 li
1126.55 100.229 li
cp
f
1085.48 76.8937 mo
1077.33 76.8937 li
1073.26 69.8353 li
1077.33 62.7768 li
1085.48 62.7768 li
1089.56 69.8353 li
1085.48 76.8937 li
cp
f
1044.43 53.5794 mo
1035.6 53.5794 li
1031.19 45.9372 li
1035.6 38.2951 li
1044.43 38.2951 li
1048.84 45.9372 li
1044.43 53.5794 li
cp
f
1003.36 30.2436 mo
993.884 30.2436 li
989.147 22.0392 li
993.884 13.8348 li
1003.36 13.8348 li
1008.09 22.0392 li
1003.36 30.2436 li
cp
f
962.289 6.90789 mo
952.166 6.90789 li
947.105 -1.85885 li
952.166 -10.6256 li
962.289 -10.6256 li
967.351 -1.85885 li
962.289 6.90789 li
cp
f
551.806 12.8712 mo
534.797 12.8712 li
526.293 -1.85885 li
534.797 -16.5888 li
551.806 -16.5888 li
560.31 -1.85885 li
551.806 12.8712 li
cp
f
510.802 37.4415 mo
493.016 37.4415 li
484.124 22.0392 li
493.016 6.63686 li
510.802 6.63686 li
519.694 22.0392 li
510.802 37.4415 li
cp
f
469.638 61.7358 mo
451.395 61.7358 li
442.274 45.9372 li
451.395 30.1387 li
469.638 30.1387 li
478.759 45.9372 li
469.638 61.7358 li
cp
f
428.633 86.3062 mo
409.614 86.3062 li
400.105 69.8353 li
409.614 53.3644 li
428.633 53.3644 li
438.143 69.8353 li
428.633 86.3062 li
cp
f
387.565 110.767 mo
367.897 110.767 li
358.063 93.7333 li
367.897 76.7001 li
387.565 76.7001 li
397.399 93.7333 li
387.565 110.767 li
cp
f
346.542 135.304 mo
326.135 135.304 li
315.932 117.631 li
326.135 99.9584 li
346.542 99.9584 li
356.745 117.631 li
346.542 135.304 li
cp
f
305.474 159.765 mo
284.418 159.765 li
273.89 141.529 li
284.418 123.294 li
305.474 123.294 li
316.002 141.529 li
305.474 159.765 li
cp
f
264.47 184.335 mo
242.637 184.335 li
231.721 165.427 li
242.637 146.52 li
264.47 146.52 li
275.386 165.427 li
264.47 184.335 li
cp
f
223.414 208.817 mo
200.907 208.817 li
189.654 189.325 li
200.907 169.834 li
223.414 169.834 li
234.667 189.325 li
223.414 208.817 li
cp
f
223.414 256.613 mo
200.907 256.613 li
189.654 237.122 li
200.907 217.63 li
223.414 217.63 li
234.667 237.122 li
223.414 256.613 li
cp
f
223.414 304.409 mo
200.907 304.409 li
189.654 284.918 li
200.907 265.426 li
223.414 265.426 li
234.667 284.918 li
223.414 304.409 li
cp
f
223.414 352.205 mo
200.907 352.205 li
189.654 332.714 li
200.907 313.222 li
223.414 313.222 li
234.667 332.714 li
223.414 352.205 li
cp
f
223.414 400.001 mo
200.907 400.001 li
189.654 380.51 li
200.907 361.019 li
223.414 361.019 li
234.667 380.51 li
223.414 400.001 li
cp
f
223.414 447.797 mo
200.907 447.797 li
189.654 428.306 li
200.907 408.815 li
223.414 408.815 li
234.667 428.306 li
223.414 447.797 li
cp
f
223.414 495.593 mo
200.907 495.593 li
189.654 476.102 li
200.907 456.611 li
223.414 456.611 li
234.667 476.102 li
223.414 495.593 li
cp
f
223.414 543.389 mo
200.907 543.389 li
189.654 523.898 li
200.907 504.407 li
223.414 504.407 li
234.667 523.898 li
223.414 543.389 li
cp
f
223.414 591.185 mo
200.907 591.185 li
189.654 571.694 li
200.907 552.203 li
223.414 552.203 li
234.667 571.694 li
223.414 591.185 li
cp
f
223.414 638.981 mo
200.907 638.981 li
189.654 619.49 li
200.907 599.999 li
223.414 599.999 li
234.667 619.49 li
223.414 638.981 li
cp
f
223.414 686.778 mo
200.907 686.778 li
189.654 667.286 li
200.907 647.795 li
223.414 647.795 li
234.667 667.286 li
223.414 686.778 li
cp
f
223.414 734.574 mo
200.907 734.574 li
189.654 715.082 li
200.907 695.591 li
223.414 695.591 li
234.667 715.082 li
223.414 734.574 li
cp
f
223.414 782.37 mo
200.907 782.37 li
189.654 762.878 li
200.907 743.387 li
223.414 743.387 li
234.667 762.878 li
223.414 782.37 li
cp
f
182.346 854.626 mo
159.19 854.626 li
147.612 834.573 li
159.19 814.519 li
182.346 814.519 li
193.924 834.573 li
182.346 854.626 li
cp
f
223.414 877.962 mo
200.907 877.962 li
189.654 858.471 li
200.907 838.979 li
223.414 838.979 li
234.667 858.471 li
223.414 877.962 li
cp
f
264.47 901.276 mo
242.637 901.276 li
231.721 882.369 li
242.637 863.461 li
264.47 863.461 li
275.386 882.369 li
264.47 901.276 li
cp
f
305.474 924.502 mo
284.418 924.502 li
273.89 906.267 li
284.418 888.031 li
305.474 888.031 li
316.002 906.267 li
305.474 924.502 li
cp
f
346.542 947.838 mo
326.135 947.838 li
315.932 930.165 li
326.135 912.492 li
346.542 912.492 li
356.745 930.165 li
346.542 947.838 li
cp
f
387.565 971.096 mo
367.897 971.096 li
358.063 954.063 li
367.897 937.03 li
387.565 937.03 li
397.399 954.063 li
387.565 971.096 li
cp
f
428.633 994.432 mo
409.614 994.432 li
400.105 977.961 li
409.614 961.49 li
428.633 961.49 li
438.143 977.961 li
428.633 994.432 li
cp
f
469.638 1017.66 mo
451.395 1017.66 li
442.274 1001.86 li
451.395 986.06 li
469.638 986.06 li
478.759 1001.86 li
469.638 1017.66 li
cp
f
1044.43 1009.5 mo
1035.6 1009.5 li
1031.19 1001.86 li
1035.6 994.217 li
1044.43 994.217 li
1048.84 1001.86 li
1044.43 1009.5 li
cp
f
1085.48 985.019 mo
1077.33 985.019 li
1073.26 977.961 li
1077.33 970.902 li
1085.48 970.902 li
1089.56 977.961 li
1085.48 985.019 li
cp
f
1126.55 960.559 mo
1119.05 960.559 li
1115.3 954.063 li
1119.05 947.567 li
1126.55 947.567 li
1130.3 954.063 li
1126.55 960.559 li
cp
f
1167.55 935.989 mo
1160.83 935.989 li
1157.47 930.165 li
1160.83 924.341 li
1167.55 924.341 li
1170.92 930.165 li
1167.55 935.989 li
cp
f
1208.61 911.507 mo
1202.56 911.507 li
1199.53 906.267 li
1202.56 901.027 li
1208.61 901.027 li
1211.63 906.267 li
1208.61 911.507 li
cp
f
1249.68 887.046 mo
1244.28 887.046 li
1241.57 882.369 li
1244.28 877.691 li
1249.68 877.691 li
1252.38 882.369 li
1249.68 887.046 li
cp
f
1290.74 862.586 mo
1285.99 862.586 li
1283.62 858.471 li
1285.99 854.355 li
1290.74 854.355 li
1293.12 858.471 li
1290.74 862.586 li
cp
f
1331.81 838.126 mo
1327.71 838.126 li
1325.66 834.573 li
1327.71 831.019 li
1331.81 831.019 li
1333.86 834.573 li
1331.81 838.126 li
cp
f
1331.81 790.33 mo
1327.71 790.33 li
1325.66 786.776 li
1327.71 783.223 li
1331.81 783.223 li
1333.86 786.776 li
1331.81 790.33 li
cp
f
1331.81 742.534 mo
1327.71 742.534 li
1325.66 738.98 li
1327.71 735.427 li
1331.81 735.427 li
1333.86 738.98 li
1331.81 742.534 li
cp
f
1331.81 694.738 mo
1327.71 694.738 li
1325.66 691.184 li
1327.71 687.631 li
1331.81 687.631 li
1333.86 691.184 li
1331.81 694.738 li
cp
f
1331.81 646.941 mo
1327.71 646.941 li
1325.66 643.388 li
1327.71 639.835 li
1331.81 639.835 li
1333.86 643.388 li
1331.81 646.941 li
cp
f
1331.81 599.145 mo
1327.71 599.145 li
1325.66 595.592 li
1327.71 592.039 li
1331.81 592.039 li
1333.86 595.592 li
1331.81 599.145 li
cp
f
1331.81 551.349 mo
1327.71 551.349 li
1325.66 547.796 li
1327.71 544.243 li
1331.81 544.243 li
1333.86 547.796 li
1331.81 551.349 li
cp
f
1331.81 503.553 mo
1327.71 503.553 li
1325.66 500 li
1327.71 496.447 li
1331.81 496.447 li
1333.86 500 li
1331.81 503.553 li
cp
f
1331.81 455.757 mo
1327.71 455.757 li
1325.66 452.204 li
1327.71 448.651 li
1331.81 448.651 li
1333.86 452.204 li
1331.81 455.757 li
cp
f
1331.81 407.961 mo
1327.71 407.961 li
1325.66 404.408 li
1327.71 400.855 li
1331.81 400.855 li
1333.86 404.408 li
1331.81 407.961 li
cp
f
1331.81 360.165 mo
1327.71 360.165 li
1325.66 356.612 li
1327.71 353.059 li
1331.81 353.059 li
1333.86 356.612 li
1331.81 360.165 li
cp
f
1331.81 312.369 mo
1327.71 312.369 li
1325.66 308.816 li
1327.71 305.262 li
1331.81 305.262 li
1333.86 308.816 li
1331.81 312.369 li
cp
f
1331.81 264.573 mo
1327.71 264.573 li
1325.66 261.02 li
1327.71 257.466 li
1331.81 257.466 li
1333.86 261.02 li
1331.81 264.573 li
cp
f
1331.81 216.777 mo
1327.71 216.777 li
1325.66 213.224 li
1327.71 209.67 li
1331.81 209.67 li
1333.86 213.224 li
1331.81 216.777 li
cp
f
1331.81 168.981 mo
1327.71 168.981 li
1325.66 165.427 li
1327.71 161.874 li
1331.81 161.874 li
1333.86 165.427 li
1331.81 168.981 li
cp
f
1290.74 145.645 mo
1285.99 145.645 li
1283.62 141.529 li
1285.99 137.414 li
1290.74 137.414 li
1293.12 141.529 li
1290.74 145.645 li
cp
f
1249.68 122.309 mo
1244.28 122.309 li
1241.57 117.631 li
1244.28 112.954 li
1249.68 112.954 li
1252.38 117.631 li
1249.68 122.309 li
cp
f
1208.61 98.9734 mo
1202.56 98.9734 li
1199.53 93.7333 li
1202.56 88.4932 li
1208.61 88.4932 li
1211.63 93.7333 li
1208.61 98.9734 li
cp
f
1167.55 75.6591 mo
1160.83 75.6591 li
1157.47 69.8353 li
1160.83 64.0115 li
1167.55 64.0115 li
1170.92 69.8353 li
1167.55 75.6591 li
cp
f
1126.55 52.4334 mo
1119.05 52.4334 li
1115.3 45.9372 li
1119.05 39.4411 li
1126.55 39.4411 li
1130.3 45.9372 li
1126.55 52.4334 li
cp
f
1085.48 29.0976 mo
1077.33 29.0976 li
1073.26 22.0392 li
1077.33 14.9807 li
1085.48 14.9807 li
1089.56 22.0392 li
1085.48 29.0976 li
cp
f
1044.43 5.78328 mo
1035.6 5.78328 li
1031.19 -1.85885 li
1035.6 -9.50097 li
1044.43 -9.50097 li
1048.84 -1.85885 li
1044.43 5.78328 li
cp
f
469.638 13.9397 mo
451.395 13.9397 li
442.274 -1.85885 li
451.395 -17.6574 li
469.638 -17.6574 li
478.759 -1.85885 li
469.638 13.9397 li
cp
f
428.633 38.5101 mo
409.614 38.5101 li
400.105 22.0392 li
409.614 5.56829 li
428.633 5.56829 li
438.143 22.0392 li
428.633 38.5101 li
cp
f
387.565 62.9704 mo
367.897 62.9704 li
358.063 45.9372 li
367.897 28.904 li
387.565 28.904 li
397.399 45.9372 li
387.565 62.9704 li
cp
f
346.542 87.5082 mo
326.135 87.5082 li
315.932 69.8353 li
326.135 52.1623 li
346.542 52.1623 li
356.745 69.8353 li
346.542 87.5082 li
cp
f
305.474 111.969 mo
284.418 111.969 li
273.89 93.7333 li
284.418 75.4981 li
305.474 75.4981 li
316.002 93.7333 li
305.474 111.969 li
cp
f
264.47 136.539 mo
242.637 136.539 li
231.721 117.631 li
242.637 98.7238 li
264.47 98.7238 li
275.386 117.631 li
264.47 136.539 li
cp
f
223.414 161.021 mo
200.907 161.021 li
189.654 141.529 li
200.907 122.038 li
223.414 122.038 li
234.667 141.529 li
223.414 161.021 li
cp
f
182.346 185.481 mo
159.19 185.481 li
147.612 165.427 li
159.19 145.374 li
182.346 145.374 li
193.924 165.427 li
182.346 185.481 li
cp
f
182.346 233.277 mo
159.19 233.277 li
147.612 213.224 li
159.19 193.17 li
182.346 193.17 li
193.924 213.224 li
182.346 233.277 li
cp
f
182.346 281.073 mo
159.19 281.073 li
147.612 261.02 li
159.19 240.966 li
182.346 240.966 li
193.924 261.02 li
182.346 281.073 li
cp
f
182.346 328.869 mo
159.19 328.869 li
147.612 308.816 li
159.19 288.762 li
182.346 288.762 li
193.924 308.816 li
182.346 328.869 li
cp
f
182.346 376.665 mo
159.19 376.665 li
147.612 356.612 li
159.19 336.558 li
182.346 336.558 li
193.924 356.612 li
182.346 376.665 li
cp
f
182.346 424.461 mo
159.19 424.461 li
147.612 404.408 li
159.19 384.354 li
182.346 384.354 li
193.924 404.408 li
182.346 424.461 li
cp
f
182.346 472.257 mo
159.19 472.257 li
147.612 452.204 li
159.19 432.15 li
182.346 432.15 li
193.924 452.204 li
182.346 472.257 li
cp
f
182.346 520.054 mo
159.19 520.054 li
147.612 500 li
159.19 479.946 li
182.346 479.946 li
193.924 500 li
182.346 520.054 li
cp
f
182.346 567.85 mo
159.19 567.85 li
147.612 547.796 li
159.19 527.743 li
182.346 527.743 li
193.924 547.796 li
182.346 567.85 li
cp
f
182.346 615.646 mo
159.19 615.646 li
147.612 595.592 li
159.19 575.539 li
182.346 575.539 li
193.924 595.592 li
182.346 615.646 li
cp
f
182.346 663.442 mo
159.19 663.442 li
147.612 643.388 li
159.19 623.335 li
182.346 623.335 li
193.924 643.388 li
182.346 663.442 li
cp
f
182.346 711.238 mo
159.19 711.238 li
147.612 691.184 li
159.19 671.131 li
182.346 671.131 li
193.924 691.184 li
182.346 711.238 li
cp
f
182.346 759.034 mo
159.19 759.034 li
147.612 738.98 li
159.19 718.927 li
182.346 718.927 li
193.924 738.98 li
182.346 759.034 li
cp
f
182.346 806.83 mo
159.19 806.83 li
147.612 786.776 li
159.19 766.723 li
182.346 766.723 li
193.924 786.776 li
182.346 806.83 li
cp
f
141.246 879.03 mo
117.505 879.03 li
105.635 858.471 li
117.505 837.911 li
141.246 837.911 li
153.116 858.471 li
141.246 879.03 li
cp
f
182.346 902.422 mo
159.19 902.422 li
147.612 882.369 li
159.19 862.315 li
182.346 862.315 li
193.924 882.369 li
182.346 902.422 li
cp
f
223.414 925.758 mo
200.907 925.758 li
189.654 906.267 li
200.907 886.776 li
223.414 886.776 li
234.667 906.267 li
223.414 925.758 li
cp
f
264.47 949.072 mo
242.637 949.072 li
231.721 930.165 li
242.637 911.257 li
264.47 911.257 li
275.386 930.165 li
264.47 949.072 li
cp
f
305.474 972.298 mo
284.418 972.298 li
273.89 954.063 li
284.418 935.828 li
305.474 935.828 li
316.002 954.063 li
305.474 972.298 li
cp
f
346.542 995.634 mo
326.135 995.634 li
315.932 977.961 li
326.135 960.288 li
346.542 960.288 li
356.745 977.961 li
346.542 995.634 li
cp
f
387.565 1018.89 mo
367.897 1018.89 li
358.063 1001.86 li
367.897 984.826 li
387.565 984.826 li
397.399 1001.86 li
387.565 1018.89 li
cp
f
1126.55 1008.35 mo
1119.05 1008.35 li
1115.3 1001.86 li
1119.05 995.363 li
1126.55 995.363 li
1130.3 1001.86 li
1126.55 1008.35 li
cp
f
1167.55 983.785 mo
1160.83 983.785 li
1157.47 977.961 li
1160.83 972.137 li
1167.55 972.137 li
1170.92 977.961 li
1167.55 983.785 li
cp
f
1208.61 959.303 mo
1202.56 959.303 li
1199.53 954.063 li
1202.56 948.823 li
1208.61 948.823 li
1211.63 954.063 li
1208.61 959.303 li
cp
f
1249.68 934.843 mo
1244.28 934.843 li
1241.57 930.165 li
1244.28 925.487 li
1249.68 925.487 li
1252.38 930.165 li
1249.68 934.843 li
cp
f
1290.74 910.382 mo
1285.99 910.382 li
1283.62 906.267 li
1285.99 902.151 li
1290.74 902.151 li
1293.12 906.267 li
1290.74 910.382 li
cp
f
1331.81 885.922 mo
1327.71 885.922 li
1325.66 882.369 li
1327.71 878.815 li
1331.81 878.815 li
1333.86 882.369 li
1331.81 885.922 li
cp
f
1372.88 861.461 mo
1369.43 861.461 li
1367.7 858.471 li
1369.43 855.48 li
1372.88 855.48 li
1374.61 858.471 li
1372.88 861.461 li
cp
f
1372.88 813.665 mo
1369.43 813.665 li
1367.7 810.675 li
1369.43 807.684 li
1372.88 807.684 li
1374.61 810.675 li
1372.88 813.665 li
cp
f
1372.88 765.869 mo
1369.43 765.869 li
1367.7 762.878 li
1369.43 759.888 li
1372.88 759.888 li
1374.61 762.878 li
1372.88 765.869 li
cp
f
1372.88 718.073 mo
1369.43 718.073 li
1367.7 715.082 li
1369.43 712.091 li
1372.88 712.091 li
1374.61 715.082 li
1372.88 718.073 li
cp
f
1372.88 670.277 mo
1369.43 670.277 li
1367.7 667.286 li
1369.43 664.295 li
1372.88 664.295 li
1374.61 667.286 li
1372.88 670.277 li
cp
f
1372.88 622.481 mo
1369.43 622.481 li
1367.7 619.49 li
1369.43 616.499 li
1372.88 616.499 li
1374.61 619.49 li
1372.88 622.481 li
cp
f
1372.88 574.685 mo
1369.43 574.685 li
1367.7 571.694 li
1369.43 568.703 li
1372.88 568.703 li
1374.61 571.694 li
1372.88 574.685 li
cp
f
1372.88 526.889 mo
1369.43 526.889 li
1367.7 523.898 li
1369.43 520.907 li
1372.88 520.907 li
1374.61 523.898 li
1372.88 526.889 li
cp
f
1372.88 479.093 mo
1369.43 479.093 li
1367.7 476.102 li
1369.43 473.111 li
1372.88 473.111 li
1374.61 476.102 li
1372.88 479.093 li
cp
f
1372.88 431.297 mo
1369.43 431.297 li
1367.7 428.306 li
1369.43 425.315 li
1372.88 425.315 li
1374.61 428.306 li
1372.88 431.297 li
cp
f
1372.88 383.501 mo
1369.43 383.501 li
1367.7 380.51 li
1369.43 377.519 li
1372.88 377.519 li
1374.61 380.51 li
1372.88 383.501 li
cp
f
1372.88 335.705 mo
1369.43 335.705 li
1367.7 332.714 li
1369.43 329.723 li
1372.88 329.723 li
1374.61 332.714 li
1372.88 335.705 li
cp
f
1372.88 287.909 mo
1369.43 287.909 li
1367.7 284.918 li
1369.43 281.927 li
1372.88 281.927 li
1374.61 284.918 li
1372.88 287.909 li
cp
f
1372.88 240.112 mo
1369.43 240.112 li
1367.7 237.122 li
1369.43 234.131 li
1372.88 234.131 li
1374.61 237.122 li
1372.88 240.112 li
cp
f
1372.88 192.316 mo
1369.43 192.316 li
1367.7 189.325 li
1369.43 186.335 li
1372.88 186.335 li
1374.61 189.325 li
1372.88 192.316 li
cp
f
1372.88 144.52 mo
1369.43 144.52 li
1367.7 141.529 li
1369.43 138.538 li
1372.88 138.538 li
1374.61 141.529 li
1372.88 144.52 li
cp
f
1331.81 121.185 mo
1327.71 121.185 li
1325.66 117.631 li
1327.71 114.078 li
1331.81 114.078 li
1333.86 117.631 li
1331.81 121.185 li
cp
f
1290.74 97.8488 mo
1285.99 97.8488 li
1283.62 93.7333 li
1285.99 89.6178 li
1290.74 89.6178 li
1293.12 93.7333 li
1290.74 97.8488 li
cp
f
1249.68 74.5131 mo
1244.28 74.5131 li
1241.57 69.8353 li
1244.28 65.1574 li
1249.68 65.1574 li
1252.38 69.8353 li
1249.68 74.5131 li
cp
f
1208.61 51.1774 mo
1202.56 51.1774 li
1199.53 45.9372 li
1202.56 40.6971 li
1208.61 40.6971 li
1211.63 45.9372 li
1208.61 51.1774 li
cp
f
1167.55 27.863 mo
1160.83 27.863 li
1157.47 22.0392 li
1160.83 16.2154 li
1167.55 16.2154 li
1170.92 22.0392 li
1167.55 27.863 li
cp
f
1126.55 4.6373 mo
1119.05 4.6373 li
1115.3 -1.85885 li
1119.05 -8.35499 li
1126.55 -8.35499 li
1130.3 -1.85885 li
1126.55 4.6373 li
cp
f
387.565 15.1744 mo
367.897 15.1744 li
358.063 -1.85885 li
367.897 -18.8921 li
387.565 -18.8921 li
397.399 -1.85885 li
387.565 15.1744 li
cp
f
346.542 39.7121 mo
326.135 39.7121 li
315.932 22.0392 li
326.135 4.36626 li
346.542 4.36626 li
356.745 22.0392 li
346.542 39.7121 li
cp
f
305.474 64.1725 mo
284.418 64.1725 li
273.89 45.9372 li
284.418 27.702 li
305.474 27.702 li
316.002 45.9372 li
305.474 64.1725 li
cp
f
264.47 88.7428 mo
242.637 88.7428 li
231.721 69.8353 li
242.637 50.9277 li
264.47 50.9277 li
275.386 69.8353 li
264.47 88.7428 li
cp
f
223.414 113.225 mo
200.907 113.225 li
189.654 93.7333 li
200.907 74.2421 li
223.414 74.2421 li
234.667 93.7333 li
223.414 113.225 li
cp
f
182.346 137.685 mo
159.19 137.685 li
147.612 117.631 li
159.19 97.5778 li
182.346 97.5778 li
193.924 117.631 li
182.346 137.685 li
cp
f
141.246 162.089 mo
117.505 162.089 li
105.635 141.529 li
117.505 120.97 li
141.246 120.97 li
153.116 141.529 li
141.246 162.089 li
cp
f
141.246 209.885 mo
117.505 209.885 li
105.635 189.325 li
117.505 168.766 li
141.246 168.766 li
153.116 189.325 li
141.246 209.885 li
cp
f
141.246 257.681 mo
117.505 257.681 li
105.635 237.122 li
117.505 216.562 li
141.246 216.562 li
153.116 237.122 li
141.246 257.681 li
cp
f
141.246 305.477 mo
117.505 305.477 li
105.635 284.918 li
117.505 264.358 li
141.246 264.358 li
153.116 284.918 li
141.246 305.477 li
cp
f
141.246 353.274 mo
117.505 353.274 li
105.635 332.714 li
117.505 312.154 li
141.246 312.154 li
153.116 332.714 li
141.246 353.274 li
cp
f
141.246 401.07 mo
117.505 401.07 li
105.635 380.51 li
117.505 359.95 li
141.246 359.95 li
153.116 380.51 li
141.246 401.07 li
cp
f
141.246 448.866 mo
117.505 448.866 li
105.635 428.306 li
117.505 407.746 li
141.246 407.746 li
153.116 428.306 li
141.246 448.866 li
cp
f
141.246 496.662 mo
117.505 496.662 li
105.635 476.102 li
117.505 455.542 li
141.246 455.542 li
153.116 476.102 li
141.246 496.662 li
cp
f
141.246 544.458 mo
117.505 544.458 li
105.635 523.898 li
117.505 503.338 li
141.246 503.338 li
153.116 523.898 li
141.246 544.458 li
cp
f
141.246 592.254 mo
117.505 592.254 li
105.635 571.694 li
117.505 551.134 li
141.246 551.134 li
153.116 571.694 li
141.246 592.254 li
cp
f
141.246 640.05 mo
117.505 640.05 li
105.635 619.49 li
117.505 598.93 li
141.246 598.93 li
153.116 619.49 li
141.246 640.05 li
cp
f
141.246 687.846 mo
117.505 687.846 li
105.635 667.286 li
117.505 646.727 li
141.246 646.727 li
153.116 667.286 li
141.246 687.846 li
cp
f
141.246 735.642 mo
117.505 735.642 li
105.635 715.082 li
117.505 694.523 li
141.246 694.523 li
153.116 715.082 li
141.246 735.642 li
cp
f
141.246 783.438 mo
117.505 783.438 li
105.635 762.878 li
117.505 742.319 li
141.246 742.319 li
153.116 762.878 li
141.246 783.438 li
cp
f
141.246 831.234 mo
117.505 831.234 li
105.635 810.675 li
117.505 790.115 li
141.246 790.115 li
153.116 810.675 li
141.246 831.234 li
cp
f
100.21 903.547 mo
75.7556 903.547 li
63.5284 882.369 li
75.7556 861.19 li
100.21 861.19 li
112.437 882.369 li
100.21 903.547 li
cp
f
141.246 926.826 mo
117.505 926.826 li
105.635 906.267 li
117.505 885.707 li
141.246 885.707 li
153.116 906.267 li
141.246 926.826 li
cp
f
182.346 950.218 mo
159.19 950.218 li
147.612 930.165 li
159.19 910.111 li
182.346 910.111 li
193.924 930.165 li
182.346 950.218 li
cp
f
223.414 973.554 mo
200.907 973.554 li
189.654 954.063 li
200.907 934.572 li
223.414 934.572 li
234.667 954.063 li
223.414 973.554 li
cp
f
264.47 996.868 mo
242.637 996.868 li
231.721 977.961 li
242.637 959.053 li
264.47 959.053 li
275.386 977.961 li
264.47 996.868 li
cp
f
305.474 1020.09 mo
284.418 1020.09 li
273.89 1001.86 li
284.418 983.624 li
305.474 983.624 li
316.002 1001.86 li
305.474 1020.09 li
cp
f
1208.61 1007.1 mo
1202.56 1007.1 li
1199.53 1001.86 li
1202.56 996.619 li
1208.61 996.619 li
1211.63 1001.86 li
1208.61 1007.1 li
cp
f
1249.68 982.639 mo
1244.28 982.639 li
1241.57 977.961 li
1244.28 973.283 li
1249.68 973.283 li
1252.38 977.961 li
1249.68 982.639 li
cp
f
1290.74 958.178 mo
1285.99 958.178 li
1283.62 954.063 li
1285.99 949.947 li
1290.74 949.947 li
1293.12 954.063 li
1290.74 958.178 li
cp
f
1331.81 933.718 mo
1327.71 933.718 li
1325.66 930.165 li
1327.71 926.611 li
1331.81 926.611 li
1333.86 930.165 li
1331.81 933.718 li
cp
f
1372.88 909.258 mo
1369.43 909.258 li
1367.7 906.267 li
1369.43 903.276 li
1372.88 903.276 li
1374.61 906.267 li
1372.88 909.258 li
cp
f
1413.87 884.666 mo
1411.22 884.666 li
1409.89 882.369 li
1411.22 880.071 li
1413.87 880.071 li
1415.2 882.369 li
1413.87 884.666 li
cp
f
1413.87 836.87 mo
1411.22 836.87 li
1409.89 834.573 li
1411.22 832.275 li
1413.87 832.275 li
1415.2 834.573 li
1413.87 836.87 li
cp
f
1413.87 789.074 mo
1411.22 789.074 li
1409.89 786.776 li
1411.22 784.479 li
1413.87 784.479 li
1415.2 786.776 li
1413.87 789.074 li
cp
f
1413.87 741.278 mo
1411.22 741.278 li
1409.89 738.98 li
1411.22 736.683 li
1413.87 736.683 li
1415.2 738.98 li
1413.87 741.278 li
cp
f
1413.87 693.482 mo
1411.22 693.482 li
1409.89 691.184 li
1411.22 688.887 li
1413.87 688.887 li
1415.2 691.184 li
1413.87 693.482 li
cp
f
1413.87 645.685 mo
1411.22 645.685 li
1409.89 643.388 li
1411.22 641.091 li
1413.87 641.091 li
1415.2 643.388 li
1413.87 645.685 li
cp
f
1413.87 597.889 mo
1411.22 597.889 li
1409.89 595.592 li
1411.22 593.295 li
1413.87 593.295 li
1415.2 595.592 li
1413.87 597.889 li
cp
f
1413.87 550.093 mo
1411.22 550.093 li
1409.89 547.796 li
1411.22 545.499 li
1413.87 545.499 li
1415.2 547.796 li
1413.87 550.093 li
cp
f
1413.87 502.297 mo
1411.22 502.297 li
1409.89 500 li
1411.22 497.703 li
1413.87 497.703 li
1415.2 500 li
1413.87 502.297 li
cp
f
1413.87 454.501 mo
1411.22 454.501 li
1409.89 452.204 li
1411.22 449.907 li
1413.87 449.907 li
1415.2 452.204 li
1413.87 454.501 li
cp
f
1413.87 406.705 mo
1411.22 406.705 li
1409.89 404.408 li
1411.22 402.111 li
1413.87 402.111 li
1415.2 404.408 li
1413.87 406.705 li
cp
f
1413.87 358.909 mo
1411.22 358.909 li
1409.89 356.612 li
1411.22 354.315 li
1413.87 354.315 li
1415.2 356.612 li
1413.87 358.909 li
cp
f
1413.87 311.113 mo
1411.22 311.113 li
1409.89 308.816 li
1411.22 306.518 li
1413.87 306.518 li
1415.2 308.816 li
1413.87 311.113 li
cp
f
1413.87 263.317 mo
1411.22 263.317 li
1409.89 261.02 li
1411.22 258.722 li
1413.87 258.722 li
1415.2 261.02 li
1413.87 263.317 li
cp
f
1413.87 215.521 mo
1411.22 215.521 li
1409.89 213.224 li
1411.22 210.926 li
1413.87 210.926 li
1415.2 213.224 li
1413.87 215.521 li
cp
f
1413.87 167.725 mo
1411.22 167.725 li
1409.89 165.427 li
1411.22 163.13 li
1413.87 163.13 li
1415.2 165.427 li
1413.87 167.725 li
cp
f
1413.87 119.929 mo
1411.22 119.929 li
1409.89 117.631 li
1411.22 115.334 li
1413.87 115.334 li
1415.2 117.631 li
1413.87 119.929 li
cp
f
1372.88 96.7242 mo
1369.43 96.7242 li
1367.7 93.7333 li
1369.43 90.7424 li
1372.88 90.7424 li
1374.61 93.7333 li
1372.88 96.7242 li
cp
f
1331.81 73.3885 mo
1327.71 73.3885 li
1325.66 69.8353 li
1327.71 66.2821 li
1331.81 66.2821 li
1333.86 69.8353 li
1331.81 73.3885 li
cp
f
1290.74 50.0528 mo
1285.99 50.0528 li
1283.62 45.9372 li
1285.99 41.8217 li
1290.74 41.8217 li
1293.12 45.9372 li
1290.74 50.0528 li
cp
f
1249.68 26.717 mo
1244.28 26.717 li
1241.57 22.0392 li
1244.28 17.3614 li
1249.68 17.3614 li
1252.38 22.0392 li
1249.68 26.717 li
cp
f
1208.61 3.38129 mo
1202.56 3.38129 li
1199.53 -1.85885 li
1202.56 -7.09898 li
1208.61 -7.09898 li
1211.63 -1.85885 li
1208.61 3.38129 li
cp
f
305.474 16.3764 mo
284.418 16.3764 li
273.89 -1.85885 li
284.418 -20.0941 li
305.474 -20.0941 li
316.002 -1.85885 li
305.474 16.3764 li
cp
f
264.47 40.9468 mo
242.637 40.9468 li
231.721 22.0392 li
242.637 3.13163 li
264.47 3.13163 li
275.386 22.0392 li
264.47 40.9468 li
cp
f
223.414 65.4285 mo
200.907 65.4285 li
189.654 45.9372 li
200.907 26.446 li
223.414 26.446 li
234.667 45.9372 li
223.414 65.4285 li
cp
f
182.346 89.8888 mo
159.19 89.8888 li
147.612 69.8353 li
159.19 49.7817 li
182.346 49.7817 li
193.924 69.8353 li
182.346 89.8888 li
cp
f
141.246 114.293 mo
117.505 114.293 li
105.635 93.7333 li
117.505 73.1735 li
141.246 73.1735 li
153.116 93.7333 li
141.246 114.293 li
cp
f
100.21 138.81 mo
75.7556 138.81 li
63.5284 117.631 li
75.7556 96.4532 li
100.21 96.4532 li
112.437 117.631 li
100.21 138.81 li
cp
f
100.21 186.606 mo
75.7556 186.606 li
63.5284 165.427 li
75.7556 144.249 li
100.21 144.249 li
112.437 165.427 li
100.21 186.606 li
cp
f
100.21 234.402 mo
75.7556 234.402 li
63.5284 213.224 li
75.7556 192.045 li
100.21 192.045 li
112.437 213.224 li
100.21 234.402 li
cp
f
100.21 282.198 mo
75.7556 282.198 li
63.5284 261.02 li
75.7556 239.841 li
100.21 239.841 li
112.437 261.02 li
100.21 282.198 li
cp
f
100.21 329.994 mo
75.7556 329.994 li
63.5284 308.816 li
75.7556 287.638 li
100.21 287.638 li
112.437 308.816 li
100.21 329.994 li
cp
f
100.21 377.79 mo
75.7556 377.79 li
63.5284 356.612 li
75.7556 335.434 li
100.21 335.434 li
112.437 356.612 li
100.21 377.79 li
cp
f
100.21 425.586 mo
75.7556 425.586 li
63.5284 404.408 li
75.7556 383.23 li
100.21 383.23 li
112.437 404.408 li
100.21 425.586 li
cp
f
100.21 473.382 mo
75.7556 473.382 li
63.5284 452.204 li
75.7556 431.026 li
100.21 431.026 li
112.437 452.204 li
100.21 473.382 li
cp
f
100.21 521.178 mo
75.7556 521.178 li
63.5284 500 li
75.7556 478.822 li
100.21 478.822 li
112.437 500 li
100.21 521.178 li
cp
f
100.21 568.974 mo
75.7556 568.974 li
63.5284 547.796 li
75.7556 526.618 li
100.21 526.618 li
112.437 547.796 li
100.21 568.974 li
cp
f
100.21 616.77 mo
75.7556 616.77 li
63.5284 595.592 li
75.7556 574.414 li
100.21 574.414 li
112.437 595.592 li
100.21 616.77 li
cp
f
100.21 664.566 mo
75.7556 664.566 li
63.5284 643.388 li
75.7556 622.21 li
100.21 622.21 li
112.437 643.388 li
100.21 664.566 li
cp
f
100.21 712.362 mo
75.7556 712.362 li
63.5284 691.184 li
75.7556 670.006 li
100.21 670.006 li
112.437 691.184 li
100.21 712.362 li
cp
f
100.21 760.159 mo
75.7556 760.159 li
63.5284 738.98 li
75.7556 717.802 li
100.21 717.802 li
112.437 738.98 li
100.21 760.159 li
cp
f
100.21 807.955 mo
75.7556 807.955 li
63.5284 786.776 li
75.7556 765.598 li
100.21 765.598 li
112.437 786.776 li
100.21 807.955 li
cp
f
100.21 855.751 mo
75.7556 855.751 li
63.5284 834.573 li
75.7556 813.394 li
100.21 813.394 li
112.437 834.573 li
100.21 855.751 li
cp
f
59.142 928.007 mo
34.0383 928.007 li
21.4864 906.267 li
34.0383 884.526 li
59.142 884.526 li
71.6939 906.267 li
59.142 928.007 li
cp
f
100.21 951.343 mo
75.7556 951.343 li
63.5284 930.165 li
75.7556 908.987 li
100.21 908.987 li
112.437 930.165 li
100.21 951.343 li
cp
f
141.246 974.623 mo
117.505 974.623 li
105.635 954.063 li
117.505 933.503 li
141.246 933.503 li
153.116 954.063 li
141.246 974.623 li
cp
f
182.346 998.014 mo
159.19 998.014 li
147.612 977.961 li
159.19 957.907 li
182.346 957.907 li
193.924 977.961 li
182.346 998.014 li
cp
f
223.414 1021.35 mo
200.907 1021.35 li
189.654 1001.86 li
200.907 982.368 li
223.414 982.368 li
234.667 1001.86 li
223.414 1021.35 li
cp
f
1290.74 1005.97 mo
1285.99 1005.97 li
1283.62 1001.86 li
1285.99 997.743 li
1290.74 997.743 li
1293.12 1001.86 li
1290.74 1005.97 li
cp
f
1331.81 981.514 mo
1327.71 981.514 li
1325.66 977.961 li
1327.71 974.408 li
1331.81 974.408 li
1333.86 977.961 li
1331.81 981.514 li
cp
f
1372.88 957.054 mo
1369.43 957.054 li
1367.7 954.063 li
1369.43 951.072 li
1372.88 951.072 li
1374.61 954.063 li
1372.88 957.054 li
cp
f
1413.87 932.462 mo
1411.22 932.462 li
1409.89 930.165 li
1411.22 927.868 li
1413.87 927.868 li
1415.2 930.165 li
1413.87 932.462 li
cp
f
1454.94 908.002 mo
1452.94 908.002 li
1451.94 906.267 li
1452.94 904.532 li
1454.94 904.532 li
1455.94 906.267 li
1454.94 908.002 li
cp
f
1454.94 860.205 mo
1452.94 860.205 li
1451.94 858.471 li
1452.94 856.736 li
1454.94 856.736 li
1455.94 858.471 li
1454.94 860.205 li
cp
f
1454.94 812.409 mo
1452.94 812.409 li
1451.94 810.675 li
1452.94 808.94 li
1454.94 808.94 li
1455.94 810.675 li
1454.94 812.409 li
cp
f
1454.94 764.613 mo
1452.94 764.613 li
1451.94 762.878 li
1452.94 761.144 li
1454.94 761.144 li
1455.94 762.878 li
1454.94 764.613 li
cp
f
1454.94 716.817 mo
1452.94 716.817 li
1451.94 715.082 li
1452.94 713.347 li
1454.94 713.347 li
1455.94 715.082 li
1454.94 716.817 li
cp
f
1454.94 669.021 mo
1452.94 669.021 li
1451.94 667.286 li
1452.94 665.551 li
1454.94 665.551 li
1455.94 667.286 li
1454.94 669.021 li
cp
f
1454.94 621.225 mo
1452.94 621.225 li
1451.94 619.49 li
1452.94 617.755 li
1454.94 617.755 li
1455.94 619.49 li
1454.94 621.225 li
cp
f
1454.94 573.429 mo
1452.94 573.429 li
1451.94 571.694 li
1452.94 569.959 li
1454.94 569.959 li
1455.94 571.694 li
1454.94 573.429 li
cp
f
1454.94 525.633 mo
1452.94 525.633 li
1451.94 523.898 li
1452.94 522.163 li
1454.94 522.163 li
1455.94 523.898 li
1454.94 525.633 li
cp
f
1454.94 477.837 mo
1452.94 477.837 li
1451.94 476.102 li
1452.94 474.367 li
1454.94 474.367 li
1455.94 476.102 li
1454.94 477.837 li
cp
f
1454.94 430.041 mo
1452.94 430.041 li
1451.94 428.306 li
1452.94 426.571 li
1454.94 426.571 li
1455.94 428.306 li
1454.94 430.041 li
cp
f
1454.94 382.245 mo
1452.94 382.245 li
1451.94 380.51 li
1452.94 378.775 li
1454.94 378.775 li
1455.94 380.51 li
1454.94 382.245 li
cp
f
1454.94 334.449 mo
1452.94 334.449 li
1451.94 332.714 li
1452.94 330.979 li
1454.94 330.979 li
1455.94 332.714 li
1454.94 334.449 li
cp
f
1454.94 286.653 mo
1452.94 286.653 li
1451.94 284.918 li
1452.94 283.183 li
1454.94 283.183 li
1455.94 284.918 li
1454.94 286.653 li
cp
f
1454.94 238.856 mo
1452.94 238.856 li
1451.94 237.122 li
1452.94 235.387 li
1454.94 235.387 li
1455.94 237.122 li
1454.94 238.856 li
cp
f
1454.94 191.06 mo
1452.94 191.06 li
1451.94 189.325 li
1452.94 187.591 li
1454.94 187.591 li
1455.94 189.325 li
1454.94 191.06 li
cp
f
1454.94 143.264 mo
1452.94 143.264 li
1451.94 141.529 li
1452.94 139.794 li
1454.94 139.794 li
1455.94 141.529 li
1454.94 143.264 li
cp
f
1454.94 95.4682 mo
1452.94 95.4682 li
1451.94 93.7333 li
1452.94 91.9984 li
1454.94 91.9984 li
1455.94 93.7333 li
1454.94 95.4682 li
cp
f
1413.87 72.1325 mo
1411.22 72.1325 li
1409.89 69.8353 li
1411.22 67.5381 li
1413.87 67.5381 li
1415.2 69.8353 li
1413.87 72.1325 li
cp
f
1372.88 48.9281 mo
1369.43 48.9281 li
1367.7 45.9372 li
1369.43 42.9463 li
1372.88 42.9463 li
1374.61 45.9372 li
1372.88 48.9281 li
cp
f
1331.81 25.5924 mo
1327.71 25.5924 li
1325.66 22.0392 li
1327.71 18.486 li
1331.81 18.486 li
1333.86 22.0392 li
1331.81 25.5924 li
cp
f
1290.74 2.25668 mo
1285.99 2.25668 li
1283.62 -1.85885 li
1285.99 -5.97437 li
1290.74 -5.97437 li
1293.12 -1.85885 li
1290.74 2.25668 li
cp
f
223.414 17.6324 mo
200.907 17.6324 li
189.654 -1.85885 li
200.907 -21.3501 li
223.414 -21.3501 li
234.667 -1.85885 li
223.414 17.6324 li
cp
f
182.346 42.0927 mo
159.19 42.0927 li
147.612 22.0392 li
159.19 1.98565 li
182.346 1.98565 li
193.924 22.0392 li
182.346 42.0927 li
cp
f
141.246 66.497 mo
117.505 66.497 li
105.635 45.9372 li
117.505 25.3774 li
141.246 25.3774 li
153.116 45.9372 li
141.246 66.497 li
cp
f
100.21 91.0134 mo
75.7556 91.0134 li
63.5284 69.8353 li
75.7556 48.6571 li
100.21 48.6571 li
112.437 69.8353 li
100.21 91.0134 li
cp
f
59.142 115.474 mo
34.0383 115.474 li
21.4864 93.7333 li
34.0383 71.9928 li
59.142 71.9928 li
71.6939 93.7333 li
59.142 115.474 li
cp
f
59.142 163.27 mo
34.0383 163.27 li
21.4864 141.529 li
34.0383 119.789 li
59.142 119.789 li
71.6939 141.529 li
59.142 163.27 li
cp
f
59.142 211.066 mo
34.0383 211.066 li
21.4864 189.325 li
34.0383 167.585 li
59.142 167.585 li
71.6939 189.325 li
59.142 211.066 li
cp
f
59.142 258.862 mo
34.0383 258.862 li
21.4864 237.122 li
34.0383 215.381 li
59.142 215.381 li
71.6939 237.122 li
59.142 258.862 li
cp
f
59.142 306.658 mo
34.0383 306.658 li
21.4864 284.918 li
34.0383 263.177 li
59.142 263.177 li
71.6939 284.918 li
59.142 306.658 li
cp
f
59.142 354.454 mo
34.0383 354.454 li
21.4864 332.714 li
34.0383 310.973 li
59.142 310.973 li
71.6939 332.714 li
59.142 354.454 li
cp
f
59.142 402.25 mo
34.0383 402.25 li
21.4864 380.51 li
34.0383 358.769 li
59.142 358.769 li
71.6939 380.51 li
59.142 402.25 li
cp
f
59.142 450.046 mo
34.0383 450.046 li
21.4864 428.306 li
34.0383 406.565 li
59.142 406.565 li
71.6939 428.306 li
59.142 450.046 li
cp
f
59.142 497.842 mo
34.0383 497.842 li
21.4864 476.102 li
34.0383 454.361 li
59.142 454.361 li
71.6939 476.102 li
59.142 497.842 li
cp
f
59.142 545.639 mo
34.0383 545.639 li
21.4864 523.898 li
34.0383 502.158 li
59.142 502.158 li
71.6939 523.898 li
59.142 545.639 li
cp
f
59.142 593.435 mo
34.0383 593.435 li
21.4864 571.694 li
34.0383 549.954 li
59.142 549.954 li
71.6939 571.694 li
59.142 593.435 li
cp
f
59.142 641.231 mo
34.0383 641.231 li
21.4864 619.49 li
34.0383 597.75 li
59.142 597.75 li
71.6939 619.49 li
59.142 641.231 li
cp
f
59.142 689.027 mo
34.0383 689.027 li
21.4864 667.286 li
34.0383 645.546 li
59.142 645.546 li
71.6939 667.286 li
59.142 689.027 li
cp
f
59.142 736.823 mo
34.0383 736.823 li
21.4864 715.082 li
34.0383 693.342 li
59.142 693.342 li
71.6939 715.082 li
59.142 736.823 li
cp
f
59.142 784.619 mo
34.0383 784.619 li
21.4864 762.878 li
34.0383 741.138 li
59.142 741.138 li
71.6939 762.878 li
59.142 784.619 li
cp
f
59.142 832.415 mo
34.0383 832.415 li
21.4864 810.675 li
34.0383 788.934 li
59.142 788.934 li
71.6939 810.675 li
59.142 832.415 li
cp
f
59.142 880.211 mo
34.0383 880.211 li
21.4864 858.471 li
34.0383 836.73 li
59.142 836.73 li
71.6939 858.471 li
59.142 880.211 li
cp
f
18.1499 952.599 mo
-7.75482 952.599 li
-20.7072 930.165 li
-7.75482 907.731 li
18.1499 907.731 li
31.1023 930.165 li
18.1499 952.599 li
cp
f
59.142 975.803 mo
34.0383 975.803 li
21.4864 954.063 li
34.0383 932.322 li
59.142 932.322 li
71.6939 954.063 li
59.142 975.803 li
cp
f
100.21 999.139 mo
75.7556 999.139 li
63.5284 977.961 li
75.7556 956.783 li
100.21 956.783 li
112.437 977.961 li
100.21 999.139 li
cp
f
141.246 1022.42 mo
117.505 1022.42 li
105.635 1001.86 li
117.505 981.299 li
141.246 981.299 li
153.116 1001.86 li
141.246 1022.42 li
cp
f
1372.88 1004.85 mo
1369.43 1004.85 li
1367.7 1001.86 li
1369.43 998.868 li
1372.88 998.868 li
1374.61 1001.86 li
1372.88 1004.85 li
cp
f
1413.87 980.258 mo
1411.22 980.258 li
1409.89 977.961 li
1411.22 975.664 li
1413.87 975.664 li
1415.2 977.961 li
1413.87 980.258 li
cp
f
1454.94 955.798 mo
1452.94 955.798 li
1451.94 954.063 li
1452.94 952.328 li
1454.94 952.328 li
1455.94 954.063 li
1454.94 955.798 li
cp
f
1496.01 931.337 mo
1494.65 931.337 li
1493.98 930.165 li
1494.65 928.992 li
1496.01 928.992 li
1496.69 930.165 li
1496.01 931.337 li
cp
f
1496.01 883.541 mo
1494.65 883.541 li
1493.98 882.369 li
1494.65 881.196 li
1496.01 881.196 li
1496.69 882.369 li
1496.01 883.541 li
cp
f
1496.01 835.745 mo
1494.65 835.745 li
1493.98 834.573 li
1494.65 833.4 li
1496.01 833.4 li
1496.69 834.573 li
1496.01 835.745 li
cp
f
1496.01 787.949 mo
1494.65 787.949 li
1493.98 786.776 li
1494.65 785.604 li
1496.01 785.604 li
1496.69 786.776 li
1496.01 787.949 li
cp
f
1496.01 740.153 mo
1494.65 740.153 li
1493.98 738.98 li
1494.65 737.808 li
1496.01 737.808 li
1496.69 738.98 li
1496.01 740.153 li
cp
f
1496.01 692.357 mo
1494.65 692.357 li
1493.98 691.184 li
1494.65 690.012 li
1496.01 690.012 li
1496.69 691.184 li
1496.01 692.357 li
cp
f
1496.01 644.561 mo
1494.65 644.561 li
1493.98 643.388 li
1494.65 642.216 li
1496.01 642.216 li
1496.69 643.388 li
1496.01 644.561 li
cp
f
1496.01 596.765 mo
1494.65 596.765 li
1493.98 595.592 li
1494.65 594.42 li
1496.01 594.42 li
1496.69 595.592 li
1496.01 596.765 li
cp
f
1496.01 548.969 mo
1494.65 548.969 li
1493.98 547.796 li
1494.65 546.623 li
1496.01 546.623 li
1496.69 547.796 li
1496.01 548.969 li
cp
f
1496.01 501.173 mo
1494.65 501.173 li
1493.98 500 li
1494.65 498.827 li
1496.01 498.827 li
1496.69 500 li
1496.01 501.173 li
cp
f
1496.01 453.376 mo
1494.65 453.376 li
1493.98 452.204 li
1494.65 451.031 li
1496.01 451.031 li
1496.69 452.204 li
1496.01 453.376 li
cp
f
1496.01 405.58 mo
1494.65 405.58 li
1493.98 404.408 li
1494.65 403.235 li
1496.01 403.235 li
1496.69 404.408 li
1496.01 405.58 li
cp
f
1496.01 357.784 mo
1494.65 357.784 li
1493.98 356.612 li
1494.65 355.439 li
1496.01 355.439 li
1496.69 356.612 li
1496.01 357.784 li
cp
f
1496.01 309.988 mo
1494.65 309.988 li
1493.98 308.816 li
1494.65 307.643 li
1496.01 307.643 li
1496.69 308.816 li
1496.01 309.988 li
cp
f
1496.01 262.192 mo
1494.65 262.192 li
1493.98 261.02 li
1494.65 259.847 li
1496.01 259.847 li
1496.69 261.02 li
1496.01 262.192 li
cp
f
1496.01 214.396 mo
1494.65 214.396 li
1493.98 213.224 li
1494.65 212.051 li
1496.01 212.051 li
1496.69 213.224 li
1496.01 214.396 li
cp
f
1496.01 166.6 mo
1494.65 166.6 li
1493.98 165.427 li
1494.65 164.255 li
1496.01 164.255 li
1496.69 165.427 li
1496.01 166.6 li
cp
f
1496.01 118.804 mo
1494.65 118.804 li
1493.98 117.631 li
1494.65 116.459 li
1496.01 116.459 li
1496.69 117.631 li
1496.01 118.804 li
cp
f
1496.01 71.0079 mo
1494.65 71.0079 li
1493.98 69.8353 li
1494.65 68.6627 li
1496.01 68.6627 li
1496.69 69.8353 li
1496.01 71.0079 li
cp
f
1454.94 47.6721 mo
1452.94 47.6721 li
1451.94 45.9372 li
1452.94 44.2023 li
1454.94 44.2023 li
1455.94 45.9372 li
1454.94 47.6721 li
cp
f
1413.87 24.3364 mo
1411.22 24.3364 li
1409.89 22.0392 li
1411.22 19.742 li
1413.87 19.742 li
1415.2 22.0392 li
1413.87 24.3364 li
cp
f
1372.88 1.13206 mo
1369.43 1.13206 li
1367.7 -1.85885 li
1369.43 -4.84976 li
1372.88 -4.84976 li
1374.61 -1.85885 li
1372.88 1.13206 li
cp
f
141.246 18.701 mo
117.505 18.701 li
105.635 -1.85885 li
117.505 -22.4187 li
141.246 -22.4187 li
153.116 -1.85885 li
141.246 18.701 li
cp
f
100.21 43.2174 mo
75.7556 43.2174 li
63.5284 22.0392 li
75.7556 .861032 li
100.21 .861032 li
112.437 22.0392 li
100.21 43.2174 li
cp
f
59.142 67.6777 mo
34.0383 67.6777 li
21.4864 45.9372 li
34.0383 24.1968 li
59.142 24.1968 li
71.6939 45.9372 li
59.142 67.6777 li
cp
f
18.1499 92.2694 mo
-7.75482 92.2694 li
-20.7072 69.8353 li
-7.75482 47.4011 li
18.1499 47.4011 li
31.1023 69.8353 li
18.1499 92.2694 li
cp
f
18.1499 140.066 mo
-7.75482 140.066 li
-20.7072 117.631 li
-7.75482 95.1972 li
18.1499 95.1972 li
31.1023 117.631 li
18.1499 140.066 li
cp
f
18.1499 187.862 mo
-7.75482 187.862 li
-20.7072 165.427 li
-7.75482 142.993 li
18.1499 142.993 li
31.1023 165.427 li
18.1499 187.862 li
cp
f
18.1499 235.658 mo
-7.75482 235.658 li
-20.7072 213.224 li
-7.75482 190.789 li
18.1499 190.789 li
31.1023 213.224 li
18.1499 235.658 li
cp
f
18.1499 283.454 mo
-7.75482 283.454 li
-20.7072 261.02 li
-7.75482 238.585 li
18.1499 238.585 li
31.1023 261.02 li
18.1499 283.454 li
cp
f
18.1499 331.25 mo
-7.75482 331.25 li
-20.7072 308.816 li
-7.75482 286.382 li
18.1499 286.382 li
31.1023 308.816 li
18.1499 331.25 li
cp
f
18.1499 379.046 mo
-7.75482 379.046 li
-20.7072 356.612 li
-7.75482 334.178 li
18.1499 334.178 li
31.1023 356.612 li
18.1499 379.046 li
cp
f
18.1499 426.842 mo
-7.75482 426.842 li
-20.7072 404.408 li
-7.75482 381.974 li
18.1499 381.974 li
31.1023 404.408 li
18.1499 426.842 li
cp
f
18.1499 474.638 mo
-7.75482 474.638 li
-20.7072 452.204 li
-7.75482 429.77 li
18.1499 429.77 li
31.1023 452.204 li
18.1499 474.638 li
cp
f
18.1499 522.434 mo
-7.75482 522.434 li
-20.7072 500 li
-7.75482 477.566 li
18.1499 477.566 li
31.1023 500 li
18.1499 522.434 li
cp
f
18.1499 570.23 mo
-7.75482 570.23 li
-20.7072 547.796 li
-7.75482 525.362 li
18.1499 525.362 li
31.1023 547.796 li
18.1499 570.23 li
cp
f
18.1499 618.026 mo
-7.75482 618.026 li
-20.7072 595.592 li
-7.75482 573.158 li
18.1499 573.158 li
31.1023 595.592 li
18.1499 618.026 li
cp
f
18.1499 665.822 mo
-7.75482 665.822 li
-20.7072 643.388 li
-7.75482 620.954 li
18.1499 620.954 li
31.1023 643.388 li
18.1499 665.822 li
cp
f
18.1499 713.618 mo
-7.75482 713.618 li
-20.7072 691.184 li
-7.75482 668.75 li
18.1499 668.75 li
31.1023 691.184 li
18.1499 713.618 li
cp
f
18.1499 761.415 mo
-7.75482 761.415 li
-20.7072 738.98 li
-7.75482 716.546 li
18.1499 716.546 li
31.1023 738.98 li
18.1499 761.415 li
cp
f
18.1499 809.211 mo
-7.75482 809.211 li
-20.7072 786.776 li
-7.75482 764.342 li
18.1499 764.342 li
31.1023 786.776 li
18.1499 809.211 li
cp
f
18.1499 857.007 mo
-7.75482 857.007 li
-20.7072 834.573 li
-7.75482 812.138 li
18.1499 812.138 li
31.1023 834.573 li
18.1499 857.007 li
cp
f
18.1499 904.803 mo
-7.75482 904.803 li
-20.7072 882.369 li
-7.75482 859.935 li
18.1499 859.935 li
31.1023 882.369 li
18.1499 904.803 li
cp
f
18.1499 1000.39 mo
-7.75482 1000.39 li
-20.7072 977.961 li
-7.75482 955.527 li
18.1499 955.527 li
31.1023 977.961 li
18.1499 1000.39 li
cp
f
59.142 1023.6 mo
34.0383 1023.6 li
21.4864 1001.86 li
34.0383 980.118 li
59.142 980.118 li
71.6939 1001.86 li
59.142 1023.6 li
cp
f
1496.01 979.133 mo
1494.65 979.133 li
1493.98 977.961 li
1494.65 976.788 li
1496.01 976.788 li
1496.69 977.961 li
1496.01 979.133 li
cp
f
1496.01 23.2118 mo
1494.65 23.2118 li
1493.98 22.0392 li
1494.65 20.8666 li
1496.01 20.8666 li
1496.69 22.0392 li
1496.01 23.2118 li
cp
f
59.142 19.8816 mo
34.0383 19.8816 li
21.4864 -1.85885 li
34.0383 -23.5993 li
59.142 -23.5993 li
71.6939 -1.85885 li
59.142 19.8816 li
cp
f
18.1499 44.4734 mo
-7.75482 44.4734 li
-20.7072 22.0392 li
-7.75482 -.394974 li
18.1499 -.394974 li
31.1023 22.0392 li
18.1499 44.4734 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (Gontar Alex) ()
%%Title: (HEX-WD-006.eps)
%%CreationDate: 11/14/2018 9:46 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&B3QlZXp02:ch$N'?t6LYF:L]OOo^20NfILd_I9>QpU=L0G?:'0gOT$=caiqC1M>:+f2ASI5p`M[m=g79DqqJ(]!(ATT::sc
%7@,2r6mhpY99Sr%Ihie0=r31WO&Xe=D;8iI8&[cteeelQ]ln<Jgl,eCWcTI5PumaX'"MkdgV#fql#ros!Bd>KrAibM2tFXJV_X,H
%$-<4uB8?;'#[G^Vq<[&%o3hls;I_P8N^2?Zgs!n-0pW,b_UKl#LAs,)gTXZ?K;9n&I'=pMcm$[-(QI%tE&=MP>.s@a$>Cl1BXi(U
%NIJkF![MVPAGFJ+Hl:$aR[%l>jE;rgWSlfM,sn&V8'^r6)*2",)'S0-P4p'm0A0e7rQi&Krh#AX5EX8a7#bl_S743GA10']+[n4.
%^/d?#3?Whpb>'G,n<P#aI_.@M3-2&l;F6FX[LN82c]f-@a!!8+KVV$N8P,ja`)^7k%D^2@@<e#arYrV])LlQm%N:UYA)L(&C+q-F
%reB[%5mCUNjGSq9].ph^[RMraDH!u*%4Ai8UCHk.JUG)hbW=2"q:DAi<sGjf&M2I=HVA$[1L`'fVrLOGnlLGp8D+Yseo,ZR]dp"]
%l`(;M:Qf,dA^b`c_4iXm'*,q1fW%Q@NCYkaJ&o*HE]k#14jk76A!360_Kn?aZsHtmc#lI]ai9IV[Ce_;ebN*$Q&+Q$j/A3Hd!op/
%?a&WH%\lmr93%+>kKF7d'N3qd6tGJloh;PVVIW6s9Z)bV_FA86?G1:Q+3o)W`457birIE'4^_rG8]/=AkLBIUH7lYHnE'YB2sqc2
%S%[_YZ^e&iWf>)"UGhBH@$9i<Zg'XMYnC2_2Jf0OW77ILpm]YV.]r]m%h4,^K1<fX(3lB7l2OMr%iZ8m$ZEgLF5>^mm9Uklm*\VW
%@^05'<X'0!$eA^ZofIP"JT9[D'#MZPAu[at[Idm0S5pUJ?i/^lTWb4)<G6LW9fQ6d0`%P'p`L7$DN>gMfGc(SIl;ajZ1QE\e_^4@
%HK_Q>3ZO,LNDdK8\PLrD=)+rJ>4"6G!Cid=!eXCN%9h:(eBK'Nb.3F2=X-SCeW*%HD[\J,CbX1tCZoHs0N0aJ;IXan,eCoYd-Bqb
%bgb'FD-6O2Mg)-fPb/ugqPCYn*R<Fhqqt>,fS>ASZV?`6*/i9h!jdR4PLB^Uel-b.TaalmI\YZegk@2(J2kF48#9Meo<5.ji)5=Y
%5<l)g)UjRfM*mN!qm52J%KF6iE/$&ndAcho;f;l$3^ie3nYeAf9e5+r%T@gl:hrk?#X%A`jemG-3(Kj2mnnig?d1cIrW6$u%m$Cr
%al1_i3XuU/hLJ_(g\CGJPkqLJAa7`Ak_%(Tl_;S9_0G5s+@pZ9+-s7HmWeB.15kjENPX,fd&0$8rH6N>Q/<Ms^Ef4dK(9_CHE5Jc
%7=3J0h(2jARoT=$eL]\j2QgZV5l$Jli7D#D_`>W7WsotGHXl'0,FlM$3&RZ5P$$Y3BpaZST/?OU*fahLk"`\I\ENm[lr&a\7tBFc
%^OF`/%tkuOQ.j`]a!B@V6]^]S#==JSjaRkgI+*jYkV6ip^'[$;l,4C3a/hE1KHB#m_&n!I.f5.Nj-q)`%R"Fl7kjT1Xq-*1@oiEA
%d,Q)8J^@n-l'"JqDgF)loU*0*_9h5S/d+M%=liEb4hd%#$pA3g*t1<HP91&nAsGS(o_:n)0_C`4r`>f62kB^c$U(BS6hm@q[$(HY
%TuZfZLE1\7/,?psHMkZ5KH5C:6h-k**`K8WYX=JN(L=PEa0];C%R'g-0S^]q9KgfILE:aE2rTZP`%QTl\<n[p72*Ee_&#:/P2^Q5
%Ip&"#8sgl^qW,CBKEV@>=tfgXN`J5>XGl"J&ouD;<RPhS]mVJh`E9l+`"u0BOs7mV^Fk?J$koJA#iV*rn;q%@!#>\7Er2T[5=pUf
%jo;n3mab/J_Yj19Q@KtL8J8P2rp(3,CHbSso>Q2^!cl"&8`8J!02#-Jc5usW!a,;+guIh9piXut(Vak<Tp=')dco5qVR[H9apCTL
%dd9N55$Xd-#4A+rI"Cq@`MR?(;e`^FYCfIIX]::hp8?^3[9;f/^1WVuGKs9CF%S;ZNC!<?lfo.Jl4NdpV?S93k?fd"ED;T!?iFu,
%63ei=DiMOCRU"hB/PYJjb,G#7BN:s6N:'j&)Ko6K(b&JiUDDLEdU0mhA#b]a;U+I]UbNLs@cQOcs(IYrgJZ,"2;Q?e1iA9kHuJ^>
%I8\`i4G/+#)'MUTi_A^a\S`FSK<;=Q;(1R-S2l";$c8:BXtD)eDWMUZF@PWbb"lA6^,7efnF*m\2W<t]Pt8dX&?0pg](99*m42ZP
%"CLh`Hq149'TEer3r^N+EJk7%n@NVNhiX)Gd9l:\n@/F6*-ZaZFIg/jS'[XOYL`Ad-*hM_S=ha4EC1C/,Xp#"5Ie#lVF$@Ppuf[)
%>aOh)72T^KlHN\sY9Wi7%bMjW&<W0trM((+rrugsZ]9u*FN(Ajg\U;%OU^M'q;A1T6\1KuH$"q/FosXbX%'?TID>aR_p/PCr(TZ+
%?W^R73R,^DUme)>c&ulF5%qASaeYq8eP2T6Gq,\e>OD_j-XBO`=Z:/0:mWhYi7%[c.7MZHQ9q&E,3YP5ObP/L;^KC7M+p7m%>CI`
%d"\:\d"nEad#+R_?8KPW+"K5ns(huV5\4BW"=M,6q8F(!9CA.L.47jg588mmr9.2p]M?pBj_SK2_m8dE5ln9kae(.4(p"/Fnpm3n
%_J-41pu:VAaRYsoFr(G8_'4LJ#*'UH<bi1bC+uUaO#@Z7'LZ#LCUNJ\7b=D5+rc:k<:"Dkcfd$&F?!V\06W,s^K1WW/MJ1kOO/Cj
%Bn*=na,HC51&QX-$[0Rco6N2,s864g<*^l(rpqPGHaSo(IB$_MUhfu;"fj6<OV)jW-"5&_)P^5$Rjf&jjC'Zuf`stFIScm\MH6S-
%DG7GoVO?]Kh\X-o2[Z%h:N%!SmD!/I'0U-kiMbB((RVu;l4Vnm<er\*c;</Ke$%:$M1+DHO7hu,ci:,L4Db#e03I-3$S;+Xh5^G2
%1#oR8R0hQTN6'"-UXK-2n$bdPokg^'a@Q=G#$f^oLt*bLq,,$o8CDW1"[1"XKmr>!A59&[T@7Z3IuRcL6FUh)8%&>b9!,l--#.u3
%9)!Yhku6u/^tC+mRNqPUe#Ch)1Au"d$HHP?HK.;niB2'#RdL$f&i1;!pD(r$?@J=V\B1>FT5%qFnpeUgO=#?,-oc5gqPI%Q+(hEK
%1W]3<.BalmBJi8Tgn\;.(2MA:7$6HcZ8-mU&f1);0pj_9_MS:-g+CA9cMpVFa#i?+aE_@6<17:eItb$icXa'aF47;AVOU:QrkCk=
%DXZYYc(`;KY;s@I5+_ad6ZCH$s!t\1l]55?f&-*'1]O&,5udlfkXVO*WmiPo8dLumBC8HpmTg;s[4;j^g-ekL;G0mU[h9aEk!?C]
%Rr2f&L"Q>r^$`?RS]^H>+!D'i]oeqidVbbK9'S*n)NT3,MolUTA*`T6ECq7oEeGnRq<7Ne+/Ge"eLe].e(Tq5V;E+XL98b2mFA4c
%f3W7F,Hi)E<(U5To.h/<>$!Q"ncjV$=rE:!]uluhWB"m";F#V^:$7SUquHbZ[)sb!rfYQ>h?a4+KqNLh3fF%X91.<2rG/AfQMMgX
%f)/$IY.8AIQHDb_h.EP4rOjs;nZL$O1_g7T@:MPpG8l$lS3!04[FK/SrX/!+LRd1f3q!K7GV:=oe_mejMP,;6M6:C;m?>QZN@dE)
%5a9$eBbJ>:GgqL+p]HGU0n"\F.oa*`A+CD0@^")no!4LASH"Mo%qpHZY4eL0S".p?5AtGSg;s?qRT)/f:_eo$((Ia.-@ORH,Hu8q
%1FuJF7!Q.k8s*[heg//b'VB!idH]u\C!',IY#X4WDlt`gbmV4P69Dp9oub@2=!_Fpp66aq2KQ+QgZ2@"_pP.O_>T+=g7ffhC:"L$
%,8fr<ic?,PLX+M8SIS+nkg_/"Z:"h19Mm-NF!@%_LhnH'"MRD(80-j5m5CO$X2]Z(dDE@+e238UQ0tRc!Q/"W:,s@?fFZQ0=DViK
%(GCpFGWh7$9((";\,>.1?BBi<5V.E4LHaOZ^#'c]4t1)/]qu/Y1CTe%ZMqK-QE<]cd]R\-PO(EoWO5rY0I,X:k>*cVY@P1;^$'%F
%1egF$VQ#fpNZ=9Z$B]G,p-F_!DEWTB<;C0!;V4#;*mp03g_Yp3U:$Y_N;dkMn-Dr[`/N$^8SrP;D";75&k.)%bY4umrBQ6W3CR#F
%2Qnln>]s>$"rE/hlFPNJp\pPaWr7SuQ'u'"oQ<e\qn?YP]=%>L_Pirf+q)Z:Y[[X_UNAu;1p/``D,PJ3%KrC6Hu9eoAAV$Ds&X11
%!X!-B$`lbeM<#+T%Ba6F94!Gk6"cmc9udqsKC9Y&O<jL#)0MsKr=9cW.ae*JN(Ulp9YpJ(l=p6_p%A*021LK3ZLU([<F<nEg=]DF
%$.J=7KHFa08XKDgS,C65rkN.F)OiJ/cMka.rL,FORZ2g872LgOc_fD'XKA[=H/]rWa*h'L,R33Yl,F[LJl='MX[D%Rn/VU'n-!5j
%h_AXhPs4_WOFO9Y_rA>hE%hD"Ad"Z?:UY[8.BXPc0DCuCa8pSZB!4:*@\fWAEh33nY=t_Iro.T'RJ)!gd1L\h[/F_:M/o,,?/aAn
%4*!C#A`9*E9Cd,SGs(3hh_K+E,kZYD_[&ro5F.-&<:5kR-Cfm.ngNW!m.U]/6H>XKAb$VlajEUjd-F'k+nYVDnnW?r]LBKZ)L8'V
%5/GT82GSTDnU!<Q"`PWa0'm1<`c6L;a8OCVX6]P@]jZi0Cs2Q#NI#Bq6#kVRi#p*5,^&l\d"o>YP.;]QH]#?#4EZ1fAuA(1.PdSC
%HQdX>!ST?U]e9]NNq=&hR7@9)GBR712`TW4?Yp/l$?j!l+75KROoK^2j@HFUq?NcaW.,^<\'6ABb9d.5^dPae7a*0IElbm/rF>QM
%;AL<\THh"`F5e.H?JBhd=7f-+\X7=qC+&:a>>>]rD`YF76LN6p]\k`UrHbACDm[.*pS)$pYuS75O]+jcRdBbR*o/bq$'?U%7^][r
%:g*=ET,(M>=IPba^SDR$I\a0GSCf%5L<t6-b#,?,<BjdS!U@Pr]liSqWX67R@>2NIY=GUB7C!"TnciGP28\7Q"LDOREqBn!f2OsF
%SD./Lfc2o!VL.p`"kJ2kk2\Y>+aWTW@A+*6Y?gMf-soe34/D.AGC8/B6eN\Q$.BGdL=OkR;sAeD5mXkX+$l1HK*9kn5EOB@?'t<t
%8\BPN#9d[!AX32__0<hMH3/INnllE07W]hc'C>HtDt#\koO!\?L\$2sC/FD8iqjJS&^bW7nt=\QA4(<I)m$Fh$%Mt@dp]B9AsEUb
%9U/7MlOL[8b<Rn)?;9sbQG8UkjSfk2i=UO:5l\7`O_Ai.9(Q8N9ZVt,)?+d[4(PMY7N:A,>$1<ieqe7<KVD7!FG(F24ZU0'[V0\_
%6(OY@W==1PT4n(/?!H,smjG[IHEus/\Km;>XUKsA9d!L>bi$h1N'KPCHMp6jNuI%OnkNcc1%b-L$>SF].>Vt>-LIR?GEf&8J$=AS
%;1HsZ"V]=5]&C0Ap7s``[YCICmu@$"I0,RHM`?(@:&6QkD7in?Nr=;S'!-Tc4oA^t&OJI'\j*RQQ>96o9,3t5kC@OH7Xb`An_Ijj
%WlBkUjh&l(4rtBlo9#H)D#^.+KQmUWFDhfF?kBhFe%[#R%?Q$)kT,`JqIJ%0E^KNWkm(*Gn@k5]Y'2@)h"(\\Y@%1Pi]%Xin##!9
%W/n]5G(=$]mQ8VZO#MlUfgbo`kju4PK=`n;%u+"&0+M-+goZ"6Z<SS,e7>UqEmG`Z$FsXDRI%sjUXm76fCJE?592c.AIR6MN-4[Q
%cc=TY?jC]"1]S*oa]dNh(8B9@HeVTer:R1Q`[Q80\&R>F;W;N(53\kKo@'Z^"<:@mG(G+:+VgFf%ia2./PZ3YEaMR!!(lRR-t`\=
%`;UHtJ*hC-Op-Xf?@VP/8V#+T!5G6H^qh`B2OrCmr93bd0*@-(1dF0fB_sT]I^7p&Wt4'7pLDA.W:lF1qP[IA0C$=TNAE(G:IZ+(
%Il?$"`h;!mP`DlC,nk0bBn&sYP:.VQl.3PB$i^8rB,0NKIL:nDpk<ZIKcn3($UL)JTD?OE>de@Bd4m%Tm1Tj$oeR8q,_\t5NIehK
%%DKs%0j^GJM$[PF<!$W*J/2L]'2\O`Bg,;s^2_TQj^?%gI$H9rI:`f$>dr9OohY@P::3rC1LlXAnD,ReDi96;XbD.kT/1$A(RZIU
%A]r0E(:3gL>"jT[OGY5q3)f(RF[`FP\$!n=-u54:eBk@goX_`igS!.!>PCY>I:dWM17QdD65jeNO@XMPo?2mLW$.p4m'U'T#,IKu
%1kOg@>RL\Z3:3eWM[S>9s.WeYcr/?kNL?MH-k@g+r_JbR#Ft@C1ln*>Rq.hMSV#EmXO[:;=J`BMR-X'-Q.0/<DkR"4lR>/L$P(J:
%LmO6_%-\MQ+)d-VAE_n#<OrdJl;h.C_HYo.dNXr"q9jWI<&W&0',++E_T3<DFSUTEs6>RgYk>Vj?8p;O=0^3`\'`f"WuGbq?+pSJ
%n7rUIbSo\srfL'=1fS6Y>0aNI-.8s+I".869:-seG*3QL%EWsK.cd<WlX\OjA$0?<*ipSG`$;rBmndd:)0\<dbBsq0lt3gYT]On#
%ec3`;&Z5'WLZjl(,<*[FlTW:H?Sl(bL^u:a2q$@+q3ennD$kk4/as8\^X#5Cddj']_*+A(fA`Ln=4M[WFE!WH`D+m&M\WhEhqGUR
%K\;=s3@$5u&u(/>DYtW7r4HZ6W!31KN5.>kS<^B5KD+t5G3sK6q!?A:"5pmTZr)8kGH0IkMqpJpUe6A3p1W*mkho5_J_uu7cLh[8
%rWtO1PK(j%WYm2*-%-G%Neq(*Z`m2B4qEEMb5EJPF>SB[\%Qu^rH7tc,nr*=@+ZsXSah.=6)3o1\>Lba7U=)+J!#odn$d([q4UO,
%:uHDeD^2/l+B@h-5)o<rbh(o-W./5lVCQK^#>r6S$c2T*XY6-5n$[kXj<j8LabcS1en8/VC!(2=J$_$BlYnbkRP!Y0s0Jg_rCJ;q
%eG6V+%(2gWiLEX[XM>b'VK,>ER&)7ElVq`JX&_^XcOKp&+Rt*SHUW?E,,"0W'-$G6Vm%ls[8ZK-0V).D`Q9Fn?`a8LC;7MJ8t?Rb
%SYc@&0%)s1Dn\3r`!-$,!r=!$8b!=$WMqJ-D[cjQDaftCbdDI/(3%]@2Vk+$CoW^[4LF`3KX5ga[?M'QhV$n:I/A5&Brc9\G,-a^
%Xf%A8rQa0[CH$R(O01&fAQkA;E8J)ea;M8-jQ6C/M70lrGZ[!u%`U@^T2SLd"^0;`Ou1CsB4'8dq;g+*@Pt^0efQ5oa3"UB8T#9;
%"%m\m9"uF;(R!NVUQfK[m+/J!`6rEd<hXsM!mPP1@FMmD+(a=Oe(WXS>,p%%$r_qXd9D"MLlM"/D>lTphHmbt1"iFG<1V[q]P0=L
%X7Q4D<&p/PqH>AGgO)\4J)h]8S&7WASm>P;kEkr/9b??D=8i@]B=@V\D5Q(0p<@2*rAMg2R<Pqj+tnl-RU#V]DXT/_]+%'(LRG'l
%V]L4hr6-55&#8B3l[:rs>*!g^:>Ah6@h<.b0?7k=RXVu@H./@o[SmS!@Q](Mp(C/5Q7hcs`cuY#l6uA7<NB+`aJW'$f.=SFU1J&6
%@LcT50:T)AUO'MbYd^u'Ld-hsL!ns.;.(]\FnDP_(h;ms0q%=XQ9+Q,PH>;#o<?\!c&H.19atimEr9EGAkgj^8&Hho3HM0.?E6tP
%Z^'4B^a.)N43Qr*NHEo+G$H&*$Ob)#iHFQK[q=seIA5E4HR#t7ApR8CmAp*^VG`C:3pl?Y(I4g&@l6`QjkdL*cF[VcG1.N``k&WE
%YNc9_IZ0h.2_*R?q.T\D5f=N#M^PD;LBPOde[\&lq'3VChtB6N?g!GTqTN.2`GJ>[<=WF@ham:nh;"H^h0[uJ)S4eYhQ">_4uosk
%H4923V0+6lW7"2;$]hq.o(('0Tk\6NVFT+gB4n`jkM+IE46+#?.VIZ!g#g<EB<G-8RSOmQbOb+Rm.5+pr)Oc5MY"6><*<)?&kJFO
%[kV9jhrS`^p;Up5gr1eFeu'&8Rak.A%d9_Ep9Mq@Y3l]IZs-[in&Df=h,tpRK:(H#*5>*]2b3])@.8?=D4Y#$3O<8\XapL/\@NGO
%pZs:-BSrhMTr19>:+g5f`,*D:`ln0o>>@g]qBl-H0=BSiG)^5i\Q']qV92<'EH!a_Z\aF.cMl'29!C(UBqL5_b!/kc$bMO.?L4k+
%hMdB)>ZKKabr,cY25sI.fj[*a7t_=A@6aF4,WfdZHi56d[d7uXHh_JZ4=f@8W`Ao^*2h)RdO4iao>m*Uj(^`LWHW5#90-K&p=!kg
%kF+>IN!_Xjl%="ma4CV/"8uo'AbSD))Be?nRi!)EC2RAPK)PAke_np1BYQc5[I*aTG3U$1Xi"SNR;!+7L1<9rmu,=\m-oPk[FNo7
%m(f4,=<WUh,ee>AG=8:A5(H@+iS0('lMg"XhFWu=Nj9V+S`RN=5]c2*8<ltsYK<j9@3qPPc>PtlG$N0QYS$-_ep=5dIaQf\JVbK'
%\_>*e,*h)&P]k#'du3rn"gF7R9<!hmIhgG'<t<"[/nsIegM.pTHs>lf(hD#C_/lnu/tQV]T4M.b6<4o/c.(1*E$S]Lo?Sr72b+H6
%^tf32/\UHHQ7`2)n0+;aLj^"uebrflX^'V3JNU]%/UfJthq^"dkM&sM/_SCU>3C%&>a1>7ZcC)klhTq<^>aP+B_/ghFm7'sab=j6
%84o!>]&t$_[.[\(>4S])@29AK0')<HAP-6ecKCFWq591aT.)&-Vd3EhnrD4uDXPV^bF(MJm=H1;aX)'`nn4CnaGe%$r+VB&auT9@
%a'iTn1'C7^9r5;Mo;96n]hk<hqDgmJ9e8,p-V0QF8e\4'hN07B#Sc#aZL70:N\-$>FJn?palrrU"r^+ESKXH53g4HD!@eb!b@uro
%ESBoC'']$6WQq,Xcq'?HEBkPA/b6$=a;uEtQ^IEj*Q[[7ei=\&Ou&n-bVn%,cf"6#o/lVUpgsTGpa3mi,3-W]G8,%O8fWs67kak>
%dhEJ/cT;/:`!P7j[.(f#(:Vc<-`34\Q2g*N[#)t9MR>a+$VW4f?Ml>*e)njDg2V7XFq>[V*Nh7C5+=C3^+B_%fJ)ag1hFS1.CQK/
%Fsk1QSSrpSl.kb;Lt7P>[C^hV3lGP_;A6L_(@,FlR1XYBHJ7GNZ#n]jG.:Bs^0NS@W08Mm`f`3n438C%b-=,+cPE93-f1M51C6f0
%0+:K[3HIBp;o!K4NN5G\bk\m9*JAU9S%<:I*eV@Uh"R?]WUeSZ2kQ>r%hQ(^Yl>-LU+[J,@i:mlD!.E\jjiFX</eh<=#UBVCg3N%
%4pLQlr*^;:,7BsY%B`V3VfEa\DmBfQc#MH>!hXGnrl]9(gq##s;sMF$OV9$s.`ItJ!Q8*R,K\03Y;N`Sn_U0u`MB+FWJbZY10#55
%G&m,i`j5AV4.ikrqD@?E=Q/5,/)g!3r0]UhUl17Gj*=oN@;I&[-/P&g/+PsLXkMl*b'Z1[a;tdk?R@XldLRB0;odMQ`/"'_G.I+I
%5<N]i4J/icUu<_O8?gGbnU5*@I9ba@*&P#FXdS>5A)fQ'4<KkI>/bi-WH4[Lf,7YT\bkijV(Y1^&;-`(^/0Z,DBOCl3m20nYFdVQ
%G@P-`fi`P'f6:5L@G-&`c&6n/oPU539qI,EC-V9daFa+hqnEkj(oo3-Ya^&H?eKKHS?'7Ti4tm8A_uFUR>oeccDEO-i_TrTap5$I
%7%Qol`2;L=-lt?H!)h>aaYFRc[I:4pe<@(FNl>:J\at5G4D9qoK80\@Ck0*3Il*0ATMdqEIsKnYZhq4D';G2j+t<ECM8.m<kfSN2
%L@J;JNXC4qcSdH:qd?i'=_4G$F17kWcB9EgG)b/'p>X+oqod2J4g)fq\aK5]=g0t'>lrbro,IFi=XtJgc\kBAk-f?r,m))q$`WaH
%dT&KC;Q!mk2;_W&b`?bO-l%cCI3(uWP7u*p#FV(*gI$'=^:XFC9\7m+!i@\lSGkL)KB$<To$+d<Z8,5?%qR-2^L.?MBsZZ19B8c,
%,m/V:o-,G.S00t2d@LG_MDoN>E?=#LWdI\NAM^l>HohQVk$(f$r%(k%YJ8!1ljT->A^knc_3otIjg!5V$a8fB6#>93gMlN'[!`E2
%(;r=8TT/LrpY;+9afWa_"A5[CH@'P13A/%Db*SAtOKdE(nde;,\oY+$CpcLX61SaWI'<@r\rdkER;QNig6C>o'p=[9mpo!E;N'5.
%egUL,NDWKm2LZq[3knR/Drn>%SJ'hnI9[4>3CPh+[9GoN3*gcXF,#q'c)u%Cc6b1/lcIE#pCDFZQ&W>%2reH_@0s+25C9O!`m%PI
%%d?l$j/qkD6ABUGokm"+j-eB^*M&_u9"K)P99(mG*BDZuB4LTELAPGIMm"$nFG0277i%=D+8`F.S(F:7Xl_qB27\!ra%a,<gC<]?
%.`k&A;g`rZei7Ue8*@EQ.P4"I5H;O>hJHgCrNh+9@i2J&(*f304YEANEV\`s]246GDf7i6/9N&@c#T*qLi[@FPAs2jVXAN5@XH)W
%7=!S1f7aa>Y4eAGgc2u>Pm^0h+78`/pU?KQK6;O2.UHpRDRQ.<-Hu>Z.[_7:osj26c3CA>_CE&I&"!+TXg\bS<+Yg1"#Klo9n)N\
%)Z0su?fRANmCt"/K<$j?K4uZ]>'^*g4hodY=+&oIe\\#sgL*N(l1F4d]%rL;Y\65gN8;abgZ2DmQ@m>*FO&YAWG.pt<kkGN82ff,
%l=Z4>DETN'G>%a*_tZcfZP>LV[UPPuXF7O?RqLo$B@=#h$*5H9G%7FnEt=`fH]krg-U34k,W<lRG#!e6c29oIfJ@F=1T-YA4m"X@
%oXlof>IF@p@I9eVeuk98@.p4%;)h7FoDJ1,?GSgMaH&Fgfpg%c/@T,!lZbVDbeD(<206*raFKK(>3/JhmN?5Gg$"R+GJCgH^[Oo4
%q0&pPERu#_EjosfH#^Q_IuZ+H5f<@amcf.!F4-Aj+l+7%Wp/&F&@6Wp=79)LnmYR#14+eXh1D!Co%$:H29GL:LG)]M5qJX"4bE-i
%4=&UrI!2WnZS\H3?i)(5/#Q)<imlUddN).?/U^2Wc@lU^V,l0ZCLuY:6(CuigA=EYn+Oj\;7bSK(+6K:8:N1MNmcYKguZAtK=3V%
%Y+GY@['H3HE5[,DSjI[bler:d,^\U"4<b)0:fpe/&4,+)]T#Y=MOrs3DMt:>nZ?%d;Kn-sle-U)?5%3=TPr"]oZo^-\M\P)Epr*a
%7pD;8ICSDuIbK.p2XR8_[^t0rYR<+:m<kqiSTAhM^-tDT!4`Zr4O%\)A<2e\2d@G"3A7MtF)l=^^R;[#UU,9[$jT(D_q<)/G14Gt
%?dBcog'[p[e1Ro>kWE/__j\Xf+3p!:QZ"6gYDnILq4oinL5GA"o?l)G)<0FE_IP1$K@C^iO*_XW=']*<E<B%DCd-84YN1<($I9ZH
%Xo.`u-Y:%USAt-Qi^kT6d+?(Y>W5uQCAL]cS'pngi"PjsS;Y1I=c-cgnDAlZp3L1ZZ5>p9\5/:3%mZCYK:=IdOj]QEQau3doo[l@
%ffrfkE:(r="PCQV[pP%B("15sZTPK%H0M8&!pelGn*Op+LK<;L=_IE6T^^\F_".3nc4'iC0-sgOm6Bqjlp"[XBKjFlGZ;aK_@fDb
%48t(Xe`lkU7e.go3.'CLMg*cTlfD2LedV&.Ziu7BP&9C-EiWX#Y.T*Dj6.-AMK9MZ8q(PmNlUt3Q%k@jI_D.V52Nd=9KPo@r#nPD
%BW"JQIa\`S'k?Yhh3kV+OTUk2k^To*aj1nrbdG#f0t5HSMQ,&!;@+BuqB1.;Bas#@96[%eD'T($Z=&1L'qB,YP=/L7UgAjOSoa11
%=E\VXQE0]hepj>C04$m*.PHQuktZU<S_7hU+eN<6oEM2)L$AYcXe?1@d$5S)c"EEbK@Nb:`t(u!+mg,qpVG9PIW=.]UpY1\66QWU
%;<[G0FI"L4VhnY?rVg+sAe44jU[6D!Eh;'a*kF:+WHP,uGYGZqiaJ(/4sJUZ'E$S$,j3bME!NX/=ab(bo@7J51M\!K)s=!d834E@
%htCmpWXZHi[IWJE;g"U[Gu?\6V5`g!rXLT[SOONg#%Ycd,I&A>gr!97Z^bkbp1),+GdNZaDC7>10s.@]=.#-/Wk%p>09I3M\:8DG
%Q*(HhJlYHW91qEP^-:CE=o6)KWC$YUn$$hr*3S)@AWMln5I6@:V`?qTDFEug_6Mh_K-bfq0K,tEMpnsF?5oWBK7j*nk]&bX>\]MB
%)a2*l0:oGBEC1=5lf@o3"Tm<Lp[>3S6`sTf?"[O;`Kni50dB0T(H]-4PN>M3cC#/?rBRM@1N3$BTD;G@g#"n0NdG4nd4daqq]]7f
%<'IUgXc8d[Xl^P4]B3O^V)03U'(#QpSt&fGPdR*M,?^4Ya+CjS<kL630*`Hllo=*3Dk;S#ZF$4JG>fl.U6\m/+'[LcT%i7?neI*h
%Bj@h4@M%-HHB"NBV=g*9WO'^s2m]^/FF")OQoEIMn6MnDHA*/FpN,Eu#M*FQdnAGLgtH7!$G8udVf\L"K%'Lg70[W'F7gqc]kL`e
%[bEst^O>Ob3!PR`UG#*/9ot]Eg];K1SrXbAo7K2FM"\Vl++L/Y5-^?PEkXX[X(pD!/Clafb?h@5(Z].`Y0ScPZ:E<>KQV6jqm(57
%fh=CR7"1h;DYb8a`+5_+([k\Bfk0\-mNe5J-GDXdT=.9k\\(.%oUf%%G:OG9!i2W".9@J74]uD&C=uY>NjeN)CKI!SD-00e>gIVY
%M[d@1?Jk<Hj:9uY3mAT,)uHVkkAZ'<N1=H$>IQ?GlC48pc(iG3#p03lfKKPtpa!V]^Q:\DYdau`W9a7Ip*_!2Z0:mp5$+efeXa"!
%CLthE4*-<jp7I0d[k6[^+3ilte+u%(cBuohRFWMmhcR(XHDsB*pWdVE>u#5_[iR3OB(rM\B-1J&'p9@][?DQ:2)$&i3c)ac2Wu]:
%WO_rdI\G(\SJ'==qoUUQ>-CD@rUs".7G$!-Dr#_NhL<-Z5\CUne*TV.cEs>?94Zqu=)4F2Bn!b]*;On;ZRS>`d$]Moi3Kpid]En_
%qZ$!_`Z@<CaCC!f1Zo@3@3k0OEF!stcN!%\;O9O%B::`)#HcVm.Y:pf&)=\&IH5Mb4dXIo:,(JAjL8?Y._do;`pHX(heo6;%ofP_
%"h6qtM+P16'_gnIHGX>PRN(##U\&X"G'@$4DO_a">PZFY?mf5pT#;!$enHs%\<`kIg;*s2jiNY@b+CfoD4TLChjd:9qsV:pd?U&7
%1qL7T(QC$hc&i]n?HA]9c2S<m7$Zikr(r+Yo)nP2"FuQ:D>:>S%faaUqrqX$hsJhN)^3Rl=-&t(n6p%Qq(qbC4$4^:DE33D<GQB2
%r-@E;Qg\[YjNj:dB?E8:qs\$>N\nJ@ZAS*Fpp@=orZp[Jr_arJ#(N]eWjrL>18cUL>!"%s3Uh^E)rsemX#_*&oc\]bQ^r'2f,K+#
%5;1-Nla`A<cXl[@!rpo!>'[.YS3L:rD!7@^G;oW5&s#,(_i`AsK4@cIbAY91P>DX6X(lrj]pL:!%N"]HoVquQ^&47uc>VQ$_.WId
%X?JY>k)?5'QpR0kGUaJW;mM2DM3=FEhiqHMjGUeQ?L5uKP(>48fo=H@!I"#uc:!jF]PMmm\GC4.K':tb!K9ciNf8,Yf`;C@i('I*
%dd\"/+"^)I[n3I\ll!Mt]\jegSOJ`+0C;p-_eDHo:Z(#7Ub:qZMs9"d9QPNeS9Y![MJ%,tG&iMSS(7K0KCP-(fW;8&5Asb?[%_fO
%B4S]<QI-8n(I(I5l#iNRc6&Vq`c7!fO</5XF!h-ZUsdJ3Y)kk*eG4+On%UeFNfN)r*">SVG`F\q8tX]rq&OC[o<=],!Kmb<6pC!_
%TGtqr\7TpPj\&s1:::Xf#A8!*XGt'[`L8KQn+$%]I==tL8!f`6"2s3`[_>QQl8J$"Z;Kc0O$Il^#7^m,<9]q$geZ%EF](S1V1-R>
%RSBEEm.r*\S'f!A`Vap:[N_nF@iMgNFKU)^*fXd82-@MD9Jj>)1a5)Ro-S9bol2UqEdI<p?/;khS]1$B/s(=iGPRC!"UA2VP5[AB
%f@t<7).+udeN-jodDb>)io=W-[['(9c7AF"FMWW9]XW#PZGk4f9kci'][slYY2i3gkj%\=+rU\F.(XTpF;8)2aLt(Web,3k`bT?;
%.WpX3;0ch5U2"L$+'$@J7T<aM5)L7oZ)=NL57aJhnjJJkH0l`cGo;$fDUiK4R\Dm%f4K,KpZO0>GI@#\9m5WC1qgGgNFqTgcdCP-
%?p:#4IO:fp$iPkEiE8A\4bgj,>,Wu77o/m=/(*@NE>UjBVHVBqiJA>`P\r+K=6'%ckY5tI(VP1P+Yd!hiTARI5+T/)U+^)+/R#j!
%-q3G\rV:-5^0?E-odZa#a.dYem;1X.7XJd)rTIn]qD109;\%raLR%C7XIh\E>>3'QkEb"C0'D5^4_\e^\F;7$SQ*&[<;E<l@cm=W
%c(d;bFD6#<CU<ml\%>VmSkBQ25Nae?(T"\?e$1fTpitG_.m+fAc(3B\[(2+gH$A[sFB+pEQ(Xh+<-rNN\J0I`X*-aMF6cYjCL'7/
%SQPo3Y$\P,P$i17FD8\U8qZrlU:0e3>A7*@A*YH$+==.u<_Qk"j"[T5)90*l[[OJ^`VWplH[9cL4"*\r=Q0*d-WYUSf4*k9Sb:WP
%Ch5'hB_U\!Q"";9CV5roZ$5=)*Q5n-(R_bbE&%#H5BjQfS6oIC]["Qip>>#/XlK/$4aPeL[i_2+kBE!adJ6I:?CF)T;sX$&nS<RP
%@VrV2J">6IT7>M'.aD*RA,#T>PN0.JNu*W&qkO,.6?I!:MJa1FDb^ZJnaR5O[&92WJh]m:(Ud*UG8J\*Za?t:G5ephEkJ`a:bi^+
%L"j/cc,*EVj)^pnhD,l'T3mH`rFW1<(p-lH`MJXlq-mg<dpLVK\ZNiqU3s_CCo'\F@r^D93aOqZq<0Gs(Y<gGn':[.M\W4f/\X.8
%qo*IH3jCYN?b'KH*+#g%XZ&.UQF*^5`7!64f#(D^\>Lo!SsAS6`J<9_V<c]QJ*C\FG-]USDW=B\_Vt+7kTdW.XPqUq:38MDZu;6>
%gXocfH+-8d\bt%'nd3sij`7i;\GYhmW@c__qM"$S=u)C6l/T=>V0&K@ZB9t[=3O!>G@g5WQrr&AbRR^3M3%MUbu*VLjeWbV?>8em
%M3sRS[\^/[A3]+TM8fAEWpuJT>hqKg5#r3Dq8V^q@^!(`gM8pR<nimpeW8;ArT^?UHll]uH$tW%<pr&_FYHmVB4%HHr,aOFNaJF6
%%-!P_iBmJ@`(Is<Eu-0Z=^-?8V:Ut0iT](iHLH;72pAb^c>(8Lg?iBI?)tZ;\[>3*j*H-V>Q.`3?eC@AS"&`Cp!i6hp%i[?fiu5>
%+4TtML[1/sO2T#lqY9_Y9#T3Q-OF:fg.ipNqF"$:phKUcEE1Y_:K3?-%he9)DL5m]8DW-)^UU4[=S8&qOVo6'D4GI'e;_)`USeQ'
%Nr$b.nYmui0;l6)oeQ4amHKnKF>PJeUoW,6[8]:jFf>b#jb:T`&m!3Hl,nan;d+I1%kH(bI+^:j\LM6<Eqc5OV(@#&;Mqcd'N]I)
%\[HOKH+I!n<YP@&]hpPMcU)G>?-/DDWhHQ-W#>Qq;D"@%,PBHU:TEl;=%f$p4sO.?g;YNSf64UI7IB:s5,[5<cB#?PmJKd"Wq/S@
%rinN4m;$c<hp5gKoZN6#'tq'T.d<R@X/</5RbfhOq;oE5V`.4;q4dLt<85T5j3t_J1fkbU_mEM1:5.U)e+&EC[B"\Bog*NH*7i5?
%F)lG@D''biXlE)YZgN"G:9E)eo%f=s,o'Wu*#J#7i`4l"cb42M09(80q:>8nk%a5UHuh).(BsE<\%d4CGQUaV]TXX!$M2=*hNjJ\
%cYmC$9>dlPp9Ci%^HPiT)HEU!D.u#-D^R@0XmP+Pm;T[H4fiIL2Xasqf(X&<41hQdQ(?CH>A`R!CArIUJ#'-WC\u/)h48BTEVK*M
%ol0[$mY!-Bh0uE>\@92Dq:OFb*B`b\oaAaP8q&A(2s=?0jMomP7P\PT9?GWQ68Vj6I.U@bVoOj_>.JRJEqS2=eFi-M1\JI]H%Yng
%j#q7OO#uUd^,/AFV>"Karh(#STj-Mu<R%>(_JZ5-)BECXebuQ8r6;aC2:#$QfqYlA,5ZW`QHJo.:.i'V`SFQID69u%/g$ge>\g`g
%RpWaU+6L$jhX(/Sj5Vn%4W=k)URNbqqtdns["#T+9#U'\0%<Yi5N=8H"3EaP*+Xt[O+Wq2h!RI@[JbE]<^,A'9WbD/+(!gU15G>l
%rnqI$XIL@!2Ic3O;Yf_Mkj>CTHb=`L5<Rf5Hb)8PBN/e%Sukjufc&W]G+KFH(0N%;V,dtB=82/2.rt:IA@IiLS<P[2b/o!V.s`*m
%?f+UW7dg9J>*#5GG.&KuB8MiMelh]<;U4^n`bT4Z\W<S]nlCS^&,.-b`TPXtkWJ^o*1pI2hV@pp]t=>ScC8f`j^NM1-sc2=n)hTS
%[BXr'3P@O)D)<"]9D]YEe^Dq"9"u@:H\e#jo%nQ#\@HufIN:;HQ`INpfOapYGk:L/PWZ]#Pd`iZoVW`*lJugVjJobXHbWlYQS]7p
%SU,-Z?JelnF4Z',DXPM(G^R7dM_B#)]RHC#DW<DAk&'h^Z?lCmY?6"r8um6Hq,Z.[/$Eg`mQ.nD_S+_EY218$Y>=ocVs<]fb"aPb
%OBH8Q4Zl^@]8t@["=_$2gcF8m5$jhI$BMl@gO.F!7dT@jHImOZRB)\#M9F)toAQuk51a]/i\)h9iV4_JPs8THmRO\-r*f8lZBr58
%Y1t=]V98S;G[B4;-l/jborDPEYZe`==f3KBgJ]U3jni6MpomXTem@8"k;?sMmp+\P1peK!D\RE`dZ&E^l_:@"I+Fa!f/MaP7l.-Y
%Weu,tH<+3sIf1,WU2T=BGO)B@dCFR=IgcN5m9sS,FaglHhs-dKLh$:!'PiKmV2'<Y^&NDgo3j;\lQ93]Pkd%]moS5t\T=g"4-ghV
%\XUl^-b3OJFIn`p;0Qa-?L$[=jG.Vi6e^e,R>Ff0kWliL]iB9cqhfJ2lPE4?0E#3>H3@\@Xd<>loD5[H2i+Jj`ZU[o]G`o9Ret!f
%Kr-Fkm=E=oL$n`,2,<B&r6,XrPPaEBb.-mL)"@k-[jJa>ArC1S%diFa[n^KJOi4^/aSD)ILI-Jc2dT]okD@^GrZaqgs%)W$nulat
%AAsES\dj5R">*T&qp2Q89n"@]cuhZrM!HGeT^(WI(;b3\qAH6f_2t7>r,U5$b0`l6>mXT7+aG6Ep^6``(^*/\"OFj]7uF+`5<"(R
%J'Z2#;F47qfeUYS6W5;MeM^hTQD"l><b1$j,<$?(9u_`\h#'V?3eC/rJGg(BV8u6hr_\R&ItKC-@.4jI+nEME8B:T0L?l>KXG`\j
%Jc_g(5FPLZ@lfl8raH;`qhq%=Dj<M8\'acXSBt!PZji838Z,KE=;2Q7iLRC5J:1=t,u<k"J7=*Che<CJ`q=9Mq/VaJf5[uQ@leH5
%;`5qe9TPlMP&7u>buQ.DL(C;%l5'<$@S45nIaE0lV<V,<WCnS>!aUe!QBb9_8L:r6HO4!+A.F1uRUma<:"<\N4";s/?'Z/$A=E^4
%bmC&E-;7(A.;)K>G>iGX4>rY%_kI<CR\;&ZaYFh^FQ`b(cU#un9hQ<M&=Q'T-=^)lK[:aiem3,qP8H,VfI<[AZ3Q'/W!sgiND-J:
%Rh?(f.FE5`Th)18bR<Zr/ZXUcj;=]aK%Ye)B2qI.&sB@0d9=E<2.prO<DS/4d5XZb.i.B1/dsD2[*41)auLS['8*l^d(thZf`T[?
%;Fd(=KF+D"W5Cm%Nip17YUs!SLO>1?>n]7JJ5dP?4Wlnh`MT\*!Z%sd/2d\>qd2,m?q+_T#j=0od!\@`K?OTDp7V&^/-3"?L8:5h
%-"%k$"F,#K+`rM;L7tid"cumhJNY-'<c&OQZ\Ar?>.#$$C+50$P+Ago2ujdd6q[lGZm?Ul7L8sU%GNajX@Wi#8qNQH!d?nQBLZ0[
%\V:br1t!)V7N+1H.d9,A%;&2@D+-:p(h?)SZNl/=[;T#K8Jnlp20:c2:b^=\QI*DJ&WJX>8!ZkT1qa`:7N/N:V2&ZYAMYLqQ7a(i
%$496@%54W4`M2UscU_Q-)/7;9O?T^+Q48`kiXJV7SL@^NUCJ7O[VD3M,be!^@=aajSq2jK!%[@IZ6g/qKA*1HT"dSETd^'c1g(W;
%nM%$OFgEKU0#R,HArjBS0rbE=o?.NBs12s.hhDmB:GJRCpk3%.3ij.@ULYrcOK!farN\dPr='T.c1%;''GO;l':+3Oq+cE48Q^)k
%=IU.<Va"c(8.Y+[\)8+04IaR?F:&AQ57Fk.JY?Jj$tol4&506%!m",d`#b-ag?B-.LF0i_.%L8N`2>g<>tt[]Yq=T*ng6*4:4LJ/
%&0BEeYH(jD;C,$sr>CDdJ&*pNKWnKN_jq"g,R1s2?f2F8%aC7>O'PYsTS@_?'ZA.=@4'G*4C2^;'YB,dWe\V3O>s!B.TrT+E@bW0
%(5h>r.]NLmXD-l</.`@Z-NcgN+**kac36j`%h%5@#&Ou7Rtf!*O<2u3&94/9Ls@:KZ#baB(cHMUA?2T-MaNLjl<IfdJF'L`^,*p;
%(WOf2bs8Z-<=;L!A6Zpr-gm3FWT&@B5e?Ojp42YZS4i(I/Le!h>Z)-&AQ:\)g$gmVUP/WFMArhi2DIbI11h%h&*qSA%6L7%MC'=3
%%)doJ*aVSJMZrgc+rl:<8.SFG4Wlm=In#-3[M6[n*#]"gc6`2?RHk%r).FARdtg<P?=NVYoGQ16</E/0#V]duD)B9<J>48r(m`%T
%!Wc^SfU?3632&r0G92!m!XQEVQ:7Pc'HW]$#"\kfL8YObYr4"7`!J!s\fhH";?3[SQouQS/8`Ht[;=INA=[6RdK\kZ32&r0>8-i]
%Jt=k%HU)ghg).bFE]4Ks,R(G2aM6_f('/P`m%XPYD(p<%G\CNFV'dP1oYi[%'ET6?r)--SK!f'6#)ou>J1Rq@liH?Z)/2HiSZ$g7
%NLF/X@O#a2i98#Y+W+oKcA$'PK'="8C8;%,JFp(+:d]s$2SCUA(9^OG+/+Fd687XMD&B)Z_e].T/cnS):s9uF*gV:CJgqX%$2tA9
%Oai!RQP2]09M6*F)Zcc6NPHSH*a3(V&[.lF\es*s&-i:slD0)DXm!>F7Q(<=,6H(0O<%A(5`u^7nbR6-^d&kT@(X?+/[C#a:@^:t
%8AbL[4WlmEF^tf+Gfcin"U0%qTtr0X1SH7PfLLTLAMA0jG%`%g!UIhV`/)[UKRaN&k+!!!XeFC]0FWRb@)M>[fsBt<_3nuX"uq'N
%Or8-Y:fRoXVM<&U,+84(YiZ,(O\l`e$Z*&RZWWb!#hD=?`.W2.GZZbsJu]%'D[B@[5Wh!XWTTMS#/S!bh0GJ,UiRcb#Gd,dd8W(/
%%*^X24IDugZ=lS?`X!_Ud7nhen0TmR=Yt[k+?Q[B7TEj[(!.7c;\0s-.Wiju<Ds='2=?n%-8ESnC!7V0*gS1HfPl..U*DoXlj'J.
%Jlo=F;duFWoL;o(?RUn"(.ohFJF'M11^N"Q\mb@XBaS;s%?E*=KTuVn=\L:Q+H*$MHU)mZ0!qVr0MYq4SOLs@`%JEYW*kjEj-NkW
%I#LAV64<,\l!_OiE-.4*XpOV-"&XGuD%\3!'<B<^(eKXY(Z,Mb!TCA""'u0_(6W*W/SeO-Zpp"ZB$2/>U5:sJW5=,%#W8n@<7bbn
%9o:&eM<%<m"GMW-NCHYu;mQXE(l5RcGC#bjJk,8VPIH?&WXEDKL^m,q=;6K/Gk)o%(t->qLbfZG1'pqmq^,^B&sU]q0!+L,Wg3(V
%d!4G1%!NfL95lp4G.43hU(RMu[D;-Xd@mN@LPGq^Pc+rnYqd^A@>"idI)$GiM]t]W_<_3]@G*:9(5$4%@Xa&_aF<(rOV92IPRYGY
%M4eLr"SRB8YRVI:Fn59aE4@S5+"fkccR<on@@LTr!c&I%oPbDp"4G(Jq@,F$ACW2E?s+9QihPC]'2YqB<B0ga'3;iIqXQEZAGI+e
%*fqG/=([gRh548P`Nh*1`."*TT"JlbQ\:UOPh_O[SLof*ljR>5apuU'2KUU!04\^;T$h9)))Sdlcm4Xc=-COk`$!7K@.o-?Y[SKU
%,rJ+GKNNt[.$bH#B8dC&MQ6Q2aTTtKAH_FOm',JC6R'G/hK#pcOb#L;`)_^nW\F(NgI^6K#&0SVYQpuMWXb$+8\SEXFA#.+0X-(j
%!;OWCPf1Y3Wa#M@g(Ze*#p=0lKSQFa8g7?k'XaX-TFEs,3@/oX[cZH5nMW*m[DCW!iF-Gq=aIs5<Da\>$JN!2(0<oT'!gZfCYh8a
%;FN^fJB6)Z!!c)I1JlSPJli9El>fLLluU:8AATH`11BU$n6*/]A2noF#R,@TYdUl@'MF')i1tfa&;7h7:FO/'ieWIjOoo%`1.S]C
%N0.qQ/;`=j5^$6c6U$%FpSIm<Lh?ns]:9M(*E0Gc/KfT#bQuu)iF/-c's+6Jl+Zd3"gM4MR0ZOoTt@&@VI43DOJVt2HU)mZ8#BaZ
%I4-)&*e]PH+i2)pIgW`?OaX2n%+<WIk4Zn+bDu[J2IS"?OVW(8(l8),Z:A`ah5QpkB!mr;7>+Mk7UQ^^%a2[f1l,rogD9C0'Z:KY
%![i^JH`e-ZK`7?r/NSmn86np5*g@_3qldg!RATkO(3AaYLu!PC]U[D.@.;.H;iFT:?XOAb%P'A7CtQe.S!.Ca(B\Yj-=g+ZhG8;E
%/PRDH&jVcW_s@Eg1TJ>kD[Na(MCRce-s/`[5@f^4Tgh:QXB#luReO_d!TCA"_btCk#r32L5Jt8<cY;=$JeO:VXgqH9]L`.rEZ,"+
%5kp;l^kb6;YZ"P8)0WQSTcjH2C`!F'U7E"3-Md_4&f(qH36k^dD$lq-S/\`;0IT(8FYm4^&4_TB0G(:;bH3b#$MMS@7!1oE;b(4+
%8.SE8#\[4<=%%0Z.&_d$=?.[0/'G.jZ',5[e\USQl!^QdbBcKUAQ;Q^JQNq?rQQd"IiF+h/g1i!e.L=8dR-sR:_L4r?D$ga;G^0p
%PpUHBMn!_h39DDUe\USQl!^Q$JA5tOWi-C0YrXk1kEN1q'O=sZ!p1pV0F)-DAYfi9K365r"=q_^A>O:7KbNb4cnNEH%2&66[(m^o
%*nCX4keuh7[kfS/9L3cPiX?YO1^RiQkFr71bVNiA#S5+l0eDLm6rhGn;\6Q"6@+emRLhfSL6ouWD$hE/4Ce)8oWVRrnGJqhihM&=
%_i?,>.ga>g._6K@"JCW]M\jJ:86o#Bh(LjkW5)A+ns0D5mE@g8'pu"dYV!'8JPk\F(b/+)N(F"`<.NYSd_cFELiG1%1%.dj'X$Dg
%j`CiT=@3n*0*I@@C]_4UoW5'sbcaSZU9K#JB*oDNef!?M:dS+/'!h9d$A)s2)06#CcDV#pq<BG$Wi0CHR=YU4ECSN8;o86^csIM#
%(';Q4cBpa;I9(JmG$)"@<lGjF:(/\H]G!IY3$fDC?$5&>^tZf#QZj(P"2\^$`llMeb>m#Q'Hn^B^]MXai_u@G_RZQm?7(joM(tG2
%'J9LcZ:!&/L\StL1g/1ZJQN`T??&RkFKc'^gdM7=\d2lFIbA/o,*Bc99[ls6cij0XS.JArTa9=Q$o'na`MlXN88=6L&ChIr(WETs
%3#^b/2XGE`=>C_fC'_5E5.P+$!Jd%[lF*Vr"U.=kPfP:^-VLHlp(1_-(&XSs?hTGi-t$R;8LCEGE*=RBnbO!K$e[cfkr3Ed=]*/^
%2lAJIpu(N[etrH$me.4E"4BQ*)AStTgN)bMpdG>in^QK-&Z=,P#QVMR3,K:<lq.AXc2Frc3a*4:g_7TuPM(N'5^]rs4<D8c:rl#>
%idlY8HD,n8"/<[oobF]oWo[Mtd^,Hppsd>5<_d@5jD%\rRhn>9l3lqZl!\jI$?<l'KtVH%5saRk$-@6XBTe/5Fj\SL5gLYg\-'%S
%nra`$fi#J,[BSBm$6h];;+Vq!m(:iqaQkN:nU3.oa=]A)HU)gX+cHKW&]+t6`<HKc#Qpb]\0e6E@Y5)qWf#+Q#p?k45jUf$@7?N?
%!X!"KMKlBl5oa7kiT6<N%N#<<I51lFXu7t\5l.SIYfd1U"uTEP?#<EBJ7=#ehM>$tr"W,B9aoJ&?XOC8T2?Vp)hF$$[5#V#%0dSm
%@Kr;J:1t;;Hq%/P]X3X5*"Y96/i7@?fVHC20SGZ.!t4=%".^;,@KVjX20T].FbKhDM[dlO&3cjIr+Z8f=kg'Nj0oaE<l!<*kTo>E
%i0J%_G(R1OJFm"IZhn=[WXHbFWbrHk(+B9.oB,+R"A:U380k5oWJ(p+TAc"=Qrr$)om*#.8@H.V7ghp"9c_t2`@[OW%L'*u\FuIj
%C,!kdGGE44'L>M8JNY,=/9Qd;DVMTPW5Ckd*E:S,.EN'_/>"s)8CbQC!U6;W6Tcf%pSgMGXH$A!`JD=eJc<25.q$VYTVi+X%*/iM
%$#kq<3g`T,#mL`/T\;>"$2ZuN,bHCb82\6M!U6;W@tD06aa-5n$4?'k_F-k-81Nl"+`pTbWB-D0+?_8uaMB3-W[4U]5cbI@H>uPr
%4e\(:W/^k(l3Q_Wl!YSi#)L`>cN(380FHgW#,`_,,ohl,lhBut0h*hA0QTL&=C-Md5r>Y.Wd&MQ60&4-Cb[.k-1X0aG?mb/'L@%b
%L=l[G_t),IM599F_*+P1o$21YT@54loTbVrT]_pRm!d>jH-W;H]l=p:c4%X_ZZ*Cj-m9e`%Gc5DL-b)b$g[oY@Dt)NM'#ad[>4*,
%N.O$l0b*]$R,tq="7I$-0(Dq2!m'fS0RH'2=Abu1P$R%DB_ccf"``%+Oq4Ga*X>/+;AkehmCr_D0$Y#T;#6.9nCoJLGn6c'hOIHI
%J?I2Ek]0#RNblkt>JLB'?(GEtJFH^L@96_AH+U3Q0FbW,UL8XcCP5>T7];N.H/Au0"jkHD#i#I61Fg:_=lcG!(:X(e"pPi>-4QFj
%:'o[tO<sEt9E8cR9jeK&T2cnTKk6G!&;h!7:oo1ccd6sR#`4O@]i%;MU&`Wr1X,5&4f^()!Xme)n.A[jnr//(I!LHAE_^>2Uq(\T
%8XmX8]0+"*RXWpGlG=2*L-h'VhAlhqp+rq'Xp)%j`@8VT0l;+EGaecu>mgr)!U4$l6cuE>bBq`iG*7DY*UEfJF^XQQgC7V:-O%jq
%7pliu%o"(K33'+We=iP.%Z4%AV4f5HgU4W*9`_'T@.o-CYgagBM7W)/2lr2O'\%+)8$30N-nsMXfKTD4RWt>'R@u(')WZMo.R?A%
%"HMM&-1#A61;nS`Jt=:jHU)mZlB!2r#^1@\?BBbj3[i1geWK6P,tgFE"H]X9f`TZ8<<jcf.X;be%">GI3]&*P&&,-h6'*;F0WK)D
%M\h#);BoV9\"m,q(aRt<m^lL.#S1]k'_!&!=]L0t@3D-]S8@<9#gS:d^PToH]s>W$!SJV:Ru0drU\dS&3t*!_O%l,KkEIlH<\oH!
%=952;VJn9RQQ;ANUM-k@:"=H!90qpji;3gU8UP&9(E`Mf5gQ&7\-'UcE]"R8_@p-2`(O;A@TO4M*cXeMpnt[5$/R!5fqg94%nI3]
%$rA4+<$V8mD(1:X!9%CK&],g0+YGs>/V*KA(39^kLD?N)Nq99,&K1aKKEg7*W8?9rpnb+Rr!7olTa;j$cij&mn/8WB!N\u;nmk\#
%4(Ve#L!Qt:&t2nqc7,GO@!'BW=TE12N7ij3B2s_a(M)!H=P"1L)[n9jj9?Z3IVB1J75GZ5\KQJ[\KS0^UsH%N]/G@k@AoLe',q?2
%i(I:%-dF+Tk81qP?eQ&VG%llf"4Cg]LYnUO`7h_$Nr1MqJd$71Mp)e]e-IIga9riu[)L5idBi,TmS.h%I44nDD(/TFkurIDE'fpN
%n7$cHYla-cCBaE^n/8WBfkb]YbIV3lR</WK:aR3Tk+!(NJRN9P[B0^\\TEBc+FR:5fMs/4=bFAX9Xs;^?if0>,#=+qb/?J8ian&S
%dX,3B*frRd3]8t]mX+oR9?5fn#E0HM%._n+"c6oNA6CJ@XZ3**a=f8oO3Fje"VA%;9sM8^-p9D09]A!VQYNUc'GT'5cRptF$`pE^
%qpZ3CWX`VO8.S?69nDOe]Lt-98HrXHKP))=-*^[CfLGu6PS'8bZ9qOpHq6u@IEGA_:^0.pa=+l[1c=`Q3S(&-;KX[?5^HPtkR[_D
%\slE(SR`jD7sK':;6"Y'f=XW9=ITBUW?\VPUkbh-6(W!n6u>%[:^0.na9YLZ=]E;:MuZae0Y:\8=Ls$:9N[bLWj+`C&8NLQ\B$)?
%JZa<A-`g#CoX#4_"4BP87jk"6-I*&&"a0<W18?*`AVur[jD>5H<<oi8Uka)EOp&:3\o4S+p\trG-Rd:0F%Y16a^q`K8H`b(!+la4
%&'M^B,pT,+\fpi-%)i,S^3nn(A9Vgtp`-LDHN&o>*fqG/o4][.h7BZoc6i^Vo8.D*32&f:'&-J<+Fp'T.Bj&1LD:Sl3k:/*IDl7%
%6t$,1[,co$4?%[ASJ=Fo/V)LV_S_8a9[ilA<hWd6jM06fb6@Bp18BMVW-U*RkA=[iPm_!nJFm!p@2JXABm%B/bFf_T5S:CMPLm(N
%f.r<5;S^R-^>D*i5T3K-liH@WW^AQPQ9r5K74_>L?if@N//:5.]mYK2P#jYHMHHZ,J2H/7fn7^c</9A`gWg=)MGFd;YeZH"G]Xgs
%jZJc:MGFch+AG<3liH(OC;[4@5o`G$`,Ykc(/VOA0'-JoYZ=HBpT#268BV/jG<kk\b4#dcntm^=d`$5-$5RTk!4#7f&iR$B)879p
%%'jmSbT;j0X#fTfT0+a#\kdJ>1&qXs:kB]0)OqG#G1h5?3H#R`?@lJ@%LA\,)t3WS'ZR,`qnm@=6A'gmFS142F&&]rlSPe1K/SQ@
%HM&F\Eqj4lW!g?M2g$f7MHDRj@0KmhJ35DQ86cha1;oY/&Z#($R,'EB<aFpC*@W>c]R!e*#KX[^\h+Ug3>a%nJ'!%I#&b0-hJJt%
%*=s9\2NeDWkM8h<5#P5(#!^Y_.*3Xtq9-EF$rUprG<gCTg?@Hn>$cV<lQZM:2SsOkN7'JTPDXTN.tF3L!d?nSB\H"q`NXdE:f,LC
%5MOF2<O+43,&Z6a#,sMJ4!6X:D9-2pWqU$/lQZM:2Sp]qN"Yimm8_g12DOE0,B*m@LSg&)Nd:B()r='l$JOG$]GW$j4L4_B")ej*
%<#a%%&0@,qjFJE%91JNa"q"gVKX\WM8fN@Pn+SV_Ri%q9&=>O%Hq%toeWrKB`.V&DTk^%VUWFeI5i2LV5ba5jOb"9Hl\puPP83P+
%1Y/E'P!lGW(-u==8.TKVaRLUh0+hV;:,+jg64!da)E>l6mnk]$iY_<b7c<uu%a,AZ1`aTgo[Tg8&:4KR:5Mm^hbk'PL'5`l!sIb:
%m#W2D73Rq6ZEH0?K%NB,[sacE-]^'.^HP,V`#,OL_=\=ffjVG:1;k;ul%[R/+_Dj?SaeQgY>$1D4u-sE`Q&$NCJup25^6CNND*S@
%gD&Zd#3*,shi[Na'_5`>\gg0"!_D>iJNY,=XI)r;aW%$eYsb.6.-;6/*uL\CT$C0OQr=!uQrDoQaIZBL<ZXS69B;BJn^8*^/"k$!
%9dVk:Yqh$_@R095^33-L=_.qPpPYV?'j_eFI\B#hI>'*a/E"AZf`ZpWMnd.q]&NsQ]Ldd]Z4t4sPWc'&X>!$GHXeM=Z4mW]E*3Md
%>>>Lj`%VY*/4BPA=UJaO8=rm&RUhXKS>@ZDMN`SpPi<CWIMaAV`_KRQ`2*I^'W8_fO?TF#/-RSg4"s):o?RgrnGG)N8=YdsC++h(
%Ihk='s"(AZK[6Y-Wst2IWUtWtS^j3+Y^d'ZcuHl.(%OJ>3t8ho!MkDuQouR>7W!Ba#]\77fA5NL-58#h_A%*VF%Ypp+BTC$h%W.Y
%R"EundUuR8?>M(O[R&K`_A!1id'Xd8ZT'6j@>]9>`1"W3GGuoC#@u/\%)$a^aI>jtmt#V-OibB?](-Q8IMenU<gBjL6Nk(Q:OtYO
%I7A?1fUeNXOc"!8$$FioZ\Wr3TcjXK"B<Kc^A&`Z:+>MifCW<?etrH$jA@(_4!6XBD9*Bf\m#`jqaa"=)t`P):2-YG\k##%"OPU%
%EsIARV@C'9e(g:dnNKh^CP/6o@$I*2':2Z53[oZ`2?J(fGZ`[5@";e4h)N'.'GRo?O.:/]#c8?Sh=A3Q!VEb8g]?B-B`hQTN/f&r
%6U@f5pF$RtEZ?^f&eu!E<tWRl&/gcD\ctI4C5P&+:s]5+R)LM29;9&=*cFsW4[h&K5^6tr=;L]9:fGkuJq>oEWB!F^OLefTXY+1%
%MP-jVjphY-9,g5UaA7@jJi4%Ug>GI>3@/tDPkWq$]M/EK[1TnN_F)el,"WW\,)u>ZJq>oE_M(pOh[%UDdG0VPV[_bu#S5)^J3Y-p
%;%fq$(l2GtTeM3uP2?OB]Q_l02?hHK!<i+HoW[+,'>/A7[0"S8U)8(!n0KA.,dlj%-It;9T]_mQm!dVrH-Rb(+'FoK(ND/@Hd;Bf
%R8]8Q(ekfr/O0GQaV/7s8.R5P0hjFTVQ]';Jgd_:\,2]B-MJ:e(tOKc/U>5"!T@I@S/*Oc2cVTnA0;4>ET%'K,ZVV9]4cJR!pG?.
%!dd3-N7tLlS<tk^1<%:5(g''!!21ls;%er.qft?]-3e0J5[Y*nT2cn4ScjC@<E/K9XVb0U,u:b?2,b.Fr+M3d\L](C0ZFHk0QTMQ
%XNIc1,8b_opXM?N=94aM=\;"</75q$=B`hR`9`ikZ>q>2*frO[0"a#4K+2Ubim5CpY^iaEd*Qf"ntUeklDo*F+KK\&liH(OC.#>B
%U^GD/%.U;f"r;IG=f=_uKGo,9^$f$;"jkFT$etd91Fg<.NQ>N0@jP/;;6YRg"gCR-PSSNM>#N9d<X"TA$4,u!l*ID-$BE32r]s41
%<]a0_J?,6fH,1ncKs_Xa]Wr,7>4%!R"2\^$L/o:.j@[tn<BF'^J?,6f;9gUbnh(&</7QI5X*2@6BR\VjlG@>#aMZ-V':ujoM1PnQ
%bDEn`:'oKQomXr@[jcja4f?(:O?T^+X@gNfYhaXN+#!Pc?if(K$^GCiOuSGe-&E?F!pJH*$etdA1MXh1kK*f6VX0VBYUb2-(/SuN
%%Smofn`R`JF,M5URfZ-=!sJ=Jo[))baQk)+o7j;55sZM*4*!sg!,&&XFqTF$*R#Rd*gSkJ=W^e/7<KH'e\Qf"<sMu.am]a"_Pf3k
%F$On^b,@)+9Mn2h-n$KrE\<m1J@!3+Mb>bDPekQEfjQ<sSra&H:_o:(TV.75$0-?Q#'!XZZ%!U$RWt>'R@u&1%^>[3%^(G>@23`^
%OqWEp!;k@\]8/bQLVW>E*L8;hQ6^9*J]:?L4A=**jbpZ%&;e4`-n[+QA@c/l^[0<hd@dh7,Z\_9&8Qo>q4*Um`STRpgVb58fYZtU
%l*ICbRcKHrjM&fje'3:M+1]'4^Fm>V,+6q])SW]3:dX0-f\VhSX@3.8nX&WiDgYB)=EC6&^nR#_re5)J$KAV4=*gC"j<\WO7$G*:
%5rpq+HU)mZh@.?;,^L3+kr]CO1.'A(,Ljj(C._s3X8p[`3m?t-*L<<H6V%5TP#tc25jW.CMf;us7pbQG]b-N2aU')lVo.j%kok`\
%Z:SB6k1+?Ja.@iA"MdG5]UhkBci33=4WVOU#U%W5q.5<rSB2=).@)LhB+2_p)6P(?Pi.G_VCDd_!pBf#!d?p)XP0n92HUY+R<,'n
%Ne.F>:PXgS3$h.ClDCaW%YLjS%^QD9c_q>WBp6UK)!Sb\3XQX!4WQ00@Y?6,NDNQp<FCbddp_*`jB5Jk)':lt*]#p4j<+VtBX1Xt
%G.@KYKliIYbK')edUA7"R4u)uF@I!I##;YKI?,O^s!Uo5ffq/[QE#ihF;B/HJbZfd"OY.0iXAAK<=Af=.!Ze(9ZO_@!@;7'B_';+
%=;."^bHVBsc,O41TA3T"@"iB,Ho+3<OZ3FN\82XV,r/*`S'J=u.u(qa/"=HC!U2D?_^j?[HS?.,XIAab!\0X+Ar"it*t;$m?dYAD
%d\8bGmMA$e.eJ0[-GM6C>N4`W!t5$I#p0JDOQ7F(hj'<0HC%8+HU.@bg9A1JR61bL>N3mL!t4>T%j0DndO*.E&SpMsd(B)efE9Q7
%<JT,,On\[pDK*fMi@%gD206j(ifr@<_O-6GhBIQYC(@QTUsH%NX'8M=#gV7(-=.'M_#gd._^1.u;Brs-l?bs`#h#_5bT;j0UH5KP
%!#gQDbB:g,Pl_$qW1F$F+Ij)B(s*K8)$J0cAe91hU1`![[O9^To#k>TN0<LaOW-B=]ZQIi6o=7;`Gp]2FN>oIe'_dYLZE;]&@R>Q
%%k`L__bu87]Sc%j2:5/S&?CH@qo(!mlkRWj#n(YbK2`kB4WlmEFi]V;aBhj[lQcW;FjQ=kSC017RuMj]@$%@?f`T[?;F_rb_2rJ1
%*<otqn7.?G'#IGf/&c$n,)dur0F)-DV@8;n-/B3!TqJ%eH@hA[&l6\t8=$`A6)G-(%nI4(*?@m79l_<`A=[6R<X1kGb:1O8(UbYc
%NW;t""SRB<d+!X'b-j8i'GH]s:L8*/nkrE@rJ:m<+pOGjR,'DW/7"'9C"r'n)Q\u.`7j.Ii]/=\>tse(J)2LVWAXg)5^I,/J.lYN
%P#!)*$L49c(2um0KOJ3;05D5R9HD=uO<0]KVIYgN8J0H\+BA_S89.>,9<bdFTp#OKeIgF9d_g*C9SbK@72Ce=)2Oh&Hs=fD21thP
%M<NcOT^1G?g]?ABH(H>c1#Uog@^.6`Z0*R#oJ&so:3Au<rCITs`L</W+?cg9^]YUPRu/%!0G)8.\B9D%P2CWZDTR0n!_CKl0mc03
%=AbPVDBXhjMk`07ii!<Q^i2nTXu':?g-j;Gg'%,"oGQ1f;6<9YkpNGV*)\Ss^dDjAT>V&XO)''VWkk/=5VJoKfE9!'eV9>_P+Q2@
%D"5d#$nS&t9iO0n$-?sWh.M(ZM\r5>R[?)XH:D1b]d/Q"BrU)F5r5`qX#4lo+/:+-?KeEa9@*a]W\lMX5l.SIYTt6FP@`KMX\$>1
%:(U#/OVhsGQ;QASfoj;ZAhh<rK:"YAHWF]kk1#^=$ZNeOJ"qj&"r:%Tf)G\QqjNgTHKD`KiVnUV@W2P78ZTVUSW"QJ&4;3u&/3C6
%"^dcbYf!k?n@qb!\#O2F;EU-3^uql08l]XkHZr,ZV363jb1UZ0F3D8\EAML<:S<tidCkT)810;JP1\SI!Du6Dn:<V]I(F3oko;7k
%"NZMbkh61]A`A;5RA0&k``gWA4Wr9C's66HH8"!t]+kI;<"lrdj?Y,dWg&QLQ6CXbLk?3f2;rNhQLapdmu))m+jcLCkh\`MV;nSu
%<O,n+DQ_sV".Ol:V?fij.G&V1`@hA&bs:jfJrd2l[H+H<^N\P3Fmss!>'u1=V7uZsf&Oi+,g<]28OT%X%rquYUjOV%2OK_t#!T!8
%KF*rK?95El([n"QBM)!@n"PlkEE2*Q:W_0"3V8XB5,ct!'s1]?kb<+l1W2tbM8!9Z5q\k1e-#ZmfDI2LQNfVr42I1R=N],fSl[HH
%,g^'LjPE<IV.6eN4o_tW9g70n5)qcK$,T];)-2%XQI_SZ7jQG,60-k@Sjqkh$]?ni@i1BF'tkR/UL7lH;TFS!)B&,6@S\5TkaS[e
%QNe$:W3s.kVN9pmIG+rf(%fe6B/.ejTI`lVUuE53_((fkb3u%,Ps9'dN=1#UZ)<_H3R`-=9ZAb1"8,5Eg_X*"PXG^A-\L8]lrdlk
%jSNt(oHePea^FMg%:u89[Y%L(d)_;m(OI'g;KVHIA.0\<:tKp/?0@Gr,(lPP616H"/2Gp469_gkaZ,#cE6#p,D]*-LD]*"RKm^MR
%e#:?os1H'`cCU_<6j<;$gi1jle7V[M,3WRa]8JgCk12;eW]mna:!^OhU$:&[H9dPBAb:c%>HVS8Dt*WcOCa%FU`-/2SL)W?#G(Mm
%=_6m3>SkS6%DtC9DM,QpSka0OI:>SI>m?8E?0k_c1&7n]p@k]2I$Wk:cGrbV&2N2:SI+m=Ma3U0UO*f*el91Z4^)gq<7sR-.[/T9
%KttkTT6Y/O9OO>@PBRgjeiH8bqdhp8*TJ9F@o2"qQBtY$DI1@;f[_e<hF4'D`%84bXnU(q!?K*)-7Z49o$AnHDAN!kk"9#\S*&@u
%>[36"aCG4]*\l`h%=:nV%"buCgpG@+\KsCiV?9<V*.!j,(Ihrt]c7tmAK(8-;$M-"T`JJ1/q:;4?.k./eR[#g7il4#"fk#RGP=\*
%1;f\3Q(d7q:-\'2re9@-Z9t`dL5n:V-jQdpDVNLJD`?2u%==gc\a-l5ZMaHY5K];;N[&.Y9D$J;#AHFJ95S"QnmB9U-mm,hI+d4b
%\n8G9V/9QKbf<)p.`pW'`?"&KF`r&Gf'<u'Gi@M`#:fZ@RC_3O[JN0=J.]*h5PjNPUHEAa6[Nnq?ah$4:GM3eN>E:/qn@uS)AcHS
%,%eG>kaUTBnq]FXI>iR.ij$VUYU;?Hi+WkIhaPA"j!"'-"Ld,?oZi"XM7E8&d<3f[@O^r^#!O1-Km,d!l3Z9&?&ust$%L@9$U2WY
%Upmp]37fGR2=Noj0>*jn;QE%LXD<bdTF$+q]o,'Ha0sWYr(P`2Dr\J'L-;cSO7T5&PiqDd^+(i]JSfb+giMgZ/uF(G=-5Aq`i<AN
%+4+>UW7ihArDKI%Qjbn?"hAj)#O-p6<gJ(&\L#e0JIec0@DrhEZ@H+WV_u>[l5+l\d%aiNG:O2j;a3!7r>PI(l5(4g@4C*DZe]%2
%@j:-:?Zbb2&(8iglaPuQI-NrXrhPp*d20rJ"t3>dm@&3i.kfB-ns$-'rd@dU9EaJGFI/fFm\A+&,7d=n*Sa''6)9-]<Pu,`9PsZA
%h_?I07Yff@oP&F.EE]Q7kSQj4i&#RYSh^Q-%fXZYF?8KSUJIY+X5\#02@W#/GgP7UGPT:j'dc;@O^[tuHPVrr5C^--P@@"A"qhkg
%5nK@Y5$9CcIgC-SjIW,BUE^<L;SS4]8CBc!dlKk+dBO\^O,^n8"<%sJbV<am3+Sa,:Yq(%3(P<f;+F_0qA?sBP:"YEOF*!ONK1ZA
%l^<2T%MBdqU>hL%U1['mpO\cr+m0hl(7FbGL[IjU5pV*MD8L=[77g'B&nlC>4\),68*4"0q,R278HXeZ1`m(J>>LDeM%5,4LYQtC
%=`e3=oHVaYU>mBE_*.Y!h"<);cC[+J7Yff@oN@BbHKaDZHOtj8gd%C*Tn4I>jW?6>k,B/J/hBNe0)D[FF02o$N*'0<0Ut;$Zm?,l
%ALs$jDX5PTPEhne%R"T=F33-afiDG43/B((&g"Z]enE7K.iS]Ib(e]`kd)%qQRq%'o3t_1K=L8979E[[lVB#Qa,l+b741*>Yt)pG
%Wa#37Q`lDe8oXqTe<GSf0.^*JdV<5G-@r$C8,"Y4+J"U:C[H6@lBre12t-iB3=%(On5a8BpNME:#rG@:\p(t\fm#+7<oN=FnrG8h
%JIe!m5iM!_G>[l,Y5"(e=re(.]AS<X]Yl4V,l'cV`u2R&l/2Z_9p-R0V=q^^><1<U7*t4gjPE<IV;i2-q9@(JD5WQ'K+G!)O'O]5
%^EhW5haZ^sc,Z1W\um%/]BH#3>hOPj(0sMCEW[E5Q.N%tbO<#Z\!557X:$rh+jbAni8-sGU_>M&R@)1PS"$`DpjfLe52@oWFC][p
%nb++<FDX%LGJQf&f]JIERUeQZBZJ?5-aq5ioC%FGMNtpO<t'pngG^AG0(pEUfM0$?A[d)&XOtTNnA1YhGV6P'rfH7'rdcsSJ\ID+
%mToH^3j.u'`**a67,nJ8-ng@B7Tc\gV/Ucg`(XEr^0Tr"/uAd/Fn]e44#J%+:g=KKo<=H$`O[ld^C?$eMp"ulT48CP#pHg+,t_IQ
%4e%'7Lb`qH'p^U4\SJejgrC\EM)*/cM`sbR(#C^<]ddA'DV,&;)3XrfThZR$f$E5D,d?NEa?,.uU_;t\Wjb89XCZGA6#AV5:Y\hq
%oP;'R_8dhJ[H6W/73AAd8oVHpDJsr89epV=KA(?J34bfb[I/2G7Z<.rCWk,;M`jV.C%1a;osT8"1c.Xn6Ve!fk]W,$VT%V>T9fuk
%O:2)e(6F-niLji<AL=Ya#D[g3el[l`f([o.CR,o)c@O+o.Hi#elQIeJDrP[T$pkG#p+eG[E]FMJ5U\U"`@M1`_r8sf?MP)L[cAD0
%%TnQE%_AXkp?sOkJ=H]V0iQFj*-=NSDT'@6j8c#b1Xdr9:L\!I"VM6JVOTuu@A#2M[M>(?L1(!fOkru;,soRh2^"6//*q>E8P/4e
%ofM&?8N-d8`]Xs@;IrM5nCE<qaE+9H'b36Z^nrcVm5mJYEcVL8^o!Ao:pJNX&-[T9!q(9/TT_A!P?PRp!!e.,"7@A%=l"R<;HPY4
%J=H^Y5c12q3,!*0ZEM?c+liVB]>d,a8(WFrFbG>KmKoeaK,jNjgj=s^7(CP:I3r=L>p_=X^!g*ZkKU]ugePkN:V#:2oF2%e/81A=
%StG58UX&[&'R`q&ho_[A_@FC(K)4f@^R&8,EM%?I!2);K!3S?GXI3CoX"Jm8VWSfAoMB#W-OLV@+'^qW,LC%KjP@eH2%)(Lr7$aj
%:O"pVZZ)-nL#l>,j;-(Y$+*hp\TcG6XcJ@b?FGQk8T>;C8>KF5b<p3u\nKoPR%5Tih_+OL(K^5^P3RAbEIrp.Ga\UhK429('mep;
%CDaG-"R)Fe%s!L_j78$%g,m)ioacDBTE%m83(^>f?^$H[#U!aP"OsNN\>(m^e8jaRX6ZW,O'rRKGX,IP,p'aJY,'JT@'.A"XuYhs
%%BFqlTl9bhjBbY=m"*:u8=eR3Ieim:/N%r=`2r<[^,bU(O!mX"/9O&L"G'uWPXA<UDJ%WHhi)K>jMN.lC8'j[UQ2Xa3q9DJkK1I;
%<*jopn;/@^0DSKff6<M`\qpC-XS"+%7MG=-X@,e.?0K[-MJYo^P5"FNHt";WjDaU>m1@Jh[R4SOG^Y'mf])tU2FGQrM`j\P4(/s$
%%d^:62sc*T.QlBlG4PSlf4J[U+_J>ckaUTBo'ee)h;I#t<oG"k`:bAP@bpB14us2_7p+M-7,Ju-P_O%VSpGk[qeGq5X^P#ll,!N:
%Y'&88%G'DMei%Wt2hrEL!P@1Yg\^V$Ygr_]&+$[@lR\:pqF#ZB(XiW;[b/t\`uO4!Wcr`Im]E)=6McF"W47Vn72X088Np_"s-Q)N
%gnT4V4j(`$n!iH>q.aXL+&q%UBa2'%[DZESD8Mqpma8_+5"N_*4%2?GmGq$,L-;1H_YJEnb49#V%TWumpaLs=4,4lR@VVp;BDU2K
%[9O2*T]O%u;HVeU6qoF_!_pj,mToHN3[&cUhN_AX_7bC1$LVmKl^$Yo`H"3F?#WU-3Vk-Eq'0[5O`ck3nF[OKmpjmKrZsgh/AHa'
%X+=AS#g6Lt1;D'C*tkibaA7<CPBVmIMb@'(_RJJ9)&c%NTHSYahMY]+I8PlX3>_6]YpXOR/9O2G,VBQN([N:WQL]%Q7k9JNOGFbj
%p.hl*EN/O+52.a11Gk3'5]`!jP\5*oDruY=F!9udHP2ZneVX(;>T?-afQ/>ijZRVMoZ]\CR':Ld4H#'AHd>KP)Yk7A9V<+q=N]r/
%<jm][7*N3'GD\P?bFoU*UE-\G$lq_gfV9iG=*`-$HaJ2l`/G(NVqA>cS>WM/QqG8P$+,^"_ft(fFu*u#`1.-ZF6#n\:0Ejb7lt*g
%#s*lAYbP9%b!NdZ$W/(kW3CK'4c@Lol>9.MMh/eM)Qe^ibe9&0/&;%DLcH:B:9c0dWA=(Zp93uQ)*3RYYQJ36Y'Sg:FTo&o&Ml'+
%SRTq)Ep1s2g6deL`!$hk@<l0DV-NXT-Hs#^GD\P!Am+6o-)pFYdQsC+U)#(,mo@sp4L6<[cZ"tmN]q78Ik>t-m,EZ+%cY,CKh>dQ
%;T66:6!FD-hG<QFoN<\"?!SI^k;1HpigL95A7<%7=/jP=Mm.+g7_W0l5q[/9icr3o#9VqZnA.I3W:Y:,Gu9g3ntf:og*$rJn"Plk
%nUhNuf-8SaLH#]in.5gQ0>g[7q+&oZ`L$e^0b/<oU6!am1=*']qVLHRLOfsOQTu8NQFB&%[uJ!W0PE<jFRPq7ddbJL5'H"f>cH`G
%i"ID$<%Ng`VJl4t+DM<V@&s-dHP_'oNM!c6<?qJpR,`:CJI`a\!&8a9SdOoM(^GV8N!%nJi.Gk*+GJ#uA;PEu0b+:-4N;qEJ%*'C
%]cm$KlMHqSqCrJ%n"PlknP'5`dFRmEkSCcB#!T80;3p=uI!F&K58<iOiW;tFD=`?LkV=!N'ZUaF_`H*3.d&e>@,M^Q8sBkQ.t)b3
%hqhH$/0SbT90>P-^aLGbGa#?.I37_OK7OQ'J&&B>DC?Ur]mb$h(_T+rs+&s3lp3CH<ah?H`3s$[$1$N%k9&Ue*L?7(3:8)`ImDB,
%5G3?>I?]b/;<s(EV0m>Bhsts[J\?&Ng4n^lXf'pUgcd':D0qec]ATH#lkI==(X.?!:ZG]4JI`)'i'ljqmr\AC-ViBWKXkOmO/D!j
%K3[CE_Pu@@^>#1;>_@S<Sq)>_8m'5?^"2XsJ.IL(SUWof0(p\25HQ&Xo(1V:M.6u(Hgpq8SkO,kPomFREahE>mJI'4kKni\iiIb0
%+QRNG8U9FU"3N-ag4uO(+PP@70d_LL]H[)&qC!@KK5bU%_QqSb#K%TZ`SmQ7%!A*b%kC]"&SS1(o'TrtOtjM^I&G/nThNk-#L5Ql
%F^Lc/XrV*EM<>cgMXq@gN_Vl1V_k#d;d1rGqkmRU*N3IDkXDa?iHDeeCScFu%Ns5YU2,cMLW"IR4/lDFKO[OS$:[d"P>tZ<CU*4+
%EY@<!UJ<#<h`o<#*#\qoY^YbIZ>;_Y7DC_t5Xkc[;p7fAj8lh5T8q`K1CQ9/4k8r\2d4teWXT2pEraf3FUe`Fk-H-GO`1_"@"$es
%A0uZ4SU2:c+<uH?3U.k&b9>'F:W`%H)29DE]><mqrDf:?`.eB88UtT:3etY&a@$"*Alk:g@mC+iJ)'IX.H+=tH\.?A5h?uu&d`go
%/bP=5HZFia$.t>\]3QNS"[?ILS-6@aW,kLC6b$,8gAhQ#J->;$]%qf!]*q7RA0fMZ8"E%7<ht(Zc+P\h_iP";=M(+tZ#4>VgkGpP
%8UtT:3erAH:->_FO*;EF,Z$eb,Sod@Zk<[qr-/IVk,>&=^g59nS\Gp<.@*bDpe)rMkI.Gm8s!CKQ`i>lqfL"]02pRs]7K#^'!_-)
%g"oKPGWA&"4m292jAEYH$Vd65K>.X@L]$VLkd5H*j#-njhZI/*e2d,&SM\r.a)em'_*"%[g,?91^-<!rcUGq<Z07X/c<=>7<Bf%3
%jPr.QiPGZhF`)Hf4ch1$b<_dC[mBI8p8g]T]Tdk;CE=:IBFMgJ+)2n8;O?[N'6K1iTHCX/pFc:b*OqJ3"Tj)*`io]6j*7`Ece9q]
%_-58q)[+o1*1_0/;'K&>399P@V6`(74]!='JT+RZoY0V5-Z'-)'b^/`E<gbknS"+8o?tc+<fJm$J[-$3[G=SU3a7$ML-s$s<d:bl
%73*[_jZNM+Y3D11@1Q<M5s+OYRlnKhK,^d4f#ig4R_t06YSui2U@5.H/%c?U:uTCR$uoF*/1/ZGiD/1Y!LVD]agm<m8B*TMIS&bh
%>khcD#G9Y^_K;MVR6Hjqe=n%i[Wb0c?0G-<d<T)2Esj'80^OX%7JMnQR=*Poo@%mYE.kVN7J+i5#ANs^lh2eH%bg8,m")iVpr0h8
%4Ep)-)ncNbD-lkY;+FdA-MT*Uq$q6;^:I_`Cr!s;e*Z50-D*%P;'`71^8#V,43AdI$kfW1.0@C.cpcm_$pR+Pn&1ZAnIsPc&a5c1
%%l+G/Io-6aRZ7prpu!"kQt1lHbaHb")+oiZ?op`+hHfVJ2D4%I?N!2O6t"r*LBq8l(m_`t],p2J!J5cV!8Y9NUGI30>J3tO<h"75
%Q\,f>]kD<OQMN:MQg_q]#b'8$h/i3c3_]o^AFd!1#HR>6HpEC@X/3%bT7G/78VK[%WUSP%`?+,]X+:6"$R]9V_Pb87/6;`>3iJ0`
%CTm/R]3\U^LO:cBYM`ml.''OOSd71onE@_bj.jkXpSRQU/.EjgGf,/<aqmV*5s$G#+RgQS*.AZq9ne""ANgSJ+)9utQL^a<pU@UI
%@fdKpfKY.``^f0sp\$K3N@YMa51j>`/`f?d2`cHP#Qc+=cf(elOakl?fmF?OTp@WLV]lZI/b94-?uTP(%R#`l^/nU"']S*pZ,%JL
%DQ1+p?0UB=&D3(o%R5s!IAfbbANg;B+6s/C7`Y(7N0js(6,d,Ncrhn0m<)SbB&Ol;^kQ*3.3J4hdmoB?:a,iYIMs<Y/nn=Ap_ZPL
%YXP!`b09Hij^1\H^kI/WkZM09mF&u$:0\c,0%@2P/TjC'V@OZ_i5>OSr%pSm.6j-%X\ND@+S!9+Jo7Qc<6t31,7&\<5DPlMVf'+Q
%6$Eq`#E]P)G'$Bjk3>JZ3eG2'rH%aJHnJQphcJfI+RqasL0NMQM['1-&Hk;YT>OHn7pjI0Fo9%#["C?!7f?"_Q:$/IFI&+ERn'f/
%MEPa3F(sHS^\BXDK=JicAQ)_!bKk@(]Po%@Q8n6&UX*+oW[@&7h_%Tm;)&UuTI;l0bOb,WE7(tS5X3MFmToH^3e!m#*a/hUq)""\
%&"[A67:95(Dtf!.S;"b%Scug>i.Gj?G&gsDPNCl2NI_VkD=GW!=l(q4^R%ajlsheaKc>.&U6!a-U6`Hi<P$CU@640K3=U,<@Ca&\
%*57#iO%E`[W0)ECI?]ba4k]Lp_6$TDHgij"8=[TeI/>jA]+bJ:1^gnXfRmGg4NXRlE8PCkcDVTT^gS"?T82C%)R"=?a+kqe%^VgT
%(OVI,T-q1W;ZCl5LbgLb5-Z+n7g%[i?edYtgO0BFHNH;rQbX`=:rH_-5+ulFiu@d/D@IlpGH9cL:0ar^W,:5W#[IY0P["uRb/e/W
%C[W9k:m2DsR]sHdQaG8<a[a]7q<6W<+(\p`H?jOJgF%CWV7hEjC@^?H*1$/>WcpN.@7)7$RX@4MO^eoBnSMX$=QpRA47+sgpqVV?
%5%qi3Sk[7n7/78"4_Jg(U6!`BC&G(tNUJL$:tlraTF_+L9:4hC]4LAi+Wln5;Z`V9(OV<=8E48FG3N"&,g84:6")t$;8VmPjkiXI
%O.ZmPdCkH%9#kN8].?Ts$3L&A`uYrW_u.mkA\rR@hg*<\&O@5qUN[N$FD]C3o];==DA;4poRrlomS%D.=sr&8'\jqoJgOY6UnE>[
%9S@l\-+mS`/(^d?p4T^[QWe"!CQk7,PR*\_$sdr(d;N$KgXT6QZkk7k*.1$9L[/<Ve2?93mA0AAb`mQuF[lp)Mor&gg@)un<"($%
%:mqY_eJ2F-AJgLB!S8sn,U1qYA?@3mE=dt7bp\CH[^]UOm3r*K<7&/`4c>3_m]NBA'a':"Pk2ai'uoW]E?>fIVZP.LkXebGaKp8r
%:SQhk;Sbt@:sj8dgGVh>0Va6F?0GEj<p^+k.BS5[JOBYKi*e(\Vn0*K(GVfhc<]X*<4(W6Edn`V:XDD%nnh#&MkUa;at*O6(8"qM
%E#+"Ae)b9f?m$)t/Y]JNHCh1aK,$+NJ^.Qb8Q<&CgTc,p$W#,8U&o[c6"SSF>mEMr&T]G[gkD=g7?9>Y?U'[G@N\Rb/_.)TM,h+N
%d>F;g60Blm,V#i9E*Bt9I44^s,V$%Q*E;\#B"Pju;Zt=DJ9)NQ()9!p<;;M`(_T+P65\u>>\bW0M#!_IE6a">H2Q)*q5'@3=3/t,
%?@'QY?I&U/CK]Y6g-GfE05e>7T66V2fU)eVYsR'QjPE=toOfV!k,I/#["s;.LI!Li=C-=AMk4;Vfq3u$S]HBFbijs#]^ME;MAQOR
%H5)1GSZEaq\`9A'K`%nW\E9`2Q<(JBUQ5eDMAQC&/*b11:5WlY5qd<f)FAFA"C+mHdBAb+!nXEif/:ncTJu(cAM-M%rKN+3F6e,B
%TlL3OQ&EpJmO/UH!,+Ckr3l:3W*n6[eH\pY6CC/(qDNJRMF(]OH9g@-GE@RrB!h3;?$o_M@1Uk@n1]IIahtKoDW!]"@]^c+XuYhs
%%BGf:X*/8/>q`u2p->Ga,i<Je?]fbT1Fa?)YZ@Vgh]-j%LXe).'n)$J>X*B#JbggQnDb9"4mV!/Z.L?R!*SuZ%O:&UK1pZ.k*OXX
%eq<^N*.2.(#h*e:;s3E^pF[\lD$uJI(OMC*\$OuaV98XY_]II7K<L*cl"8#NEDnm7g27r-k.%0KCbKkAFEq/*,Ls"'p/1?RJ_<Ui
%7no!5$#?$/kaUTBo'e6nF4H/s7GHRO4g;O-:JeO$=t0B0$2\t#I9YIiR_t06n9t>:#LHKe*Am*`blPK(6M%?8YYN<#TLfX?4%C?_
%Qal0_2[,P:'^l5iW-H?CL0Lh7JY??ol=2%%MKa*ed7<Ggl?k\.#72j9%=D"B%Wf@gPc8F]DcXLqk)+BR:9d="R#J#c];k9XX/I"c
%5Xe,>$/DiO9]f^t'nW-R@fIEsFQU!t3mb%Q-M^dqhiacdmgc_-YRGqYg,>@6SL<=@(UimufNVcGL*^f&q8/;4#OF76`bF8c*e]5-
%3D,h2Z3@ItmumU86n4mi'p$`'0TXb\e"ek-16bp-k6&*)ok;X>11es;d0O"fdoa`GqrbIRM/m.l.'^Xd'OWH+nS>fOX+WB34@5CP
%4BD#ff^?2BM+e@i<mWK&Cut7Q=*l@j\;V=V)PP>_)CoY6=mf(k*18i[XK[rtfP8=G[A50865qErU!$jcX'0u?G0_^MC+-E?/j!IA
%PClboPUWBIMFQfMR)\EQ`F6I2K3:3,XKV^<fZNBlPV#$!'&$IX#[Ir3=D>CnqQ6tF;aZrfoVM]EHH6cdcE%j?<]!.0__bDl(*RhG
%5cbqO<nK;=Cut7QQQnZF'&$IX#[Ir3=IkqQS%]Lc6^\ZGF9>bCr:d%`k?:33'ogT%0TD@c&&1/9@c]#C_G5Gk/*ks%VC+Vq)_2u'
%b@)GBR4m059s[)TR2%PE"C(8?HKR[&1f!,hAMB+m[E.q*8<aN.7atj&9N<m7r^qi$54"i8cWYS7>Xm8?I+6_5>^2@'a":jG^)lNt
%$%fGO@/h3qd\?4l2OR/jI/fRd\0sb1<ERE4>(-X&Hil)f^-UU)p*^_A5k,Tk^5>r2atW>$iu=Y@$VN'Kh^`%g6D,FX+SQk(OA;#r
%oOqoRZOrH:"!9(jJ3)(0DsdDKjJ4sdJR1u8pFc:j*NM!PX1%Qp\j:]!b/";i>UUU%93L,RD$r;B,k.jSO`qUhOA-_&fMD=`_T+ST
%I.6n8CAcmc[hRPUcS6btG'jDJ]BH#3quDFuC[1Fa^>i%EJI`gZ!6K@c?8A!fpMe0?"PWATFRPrbdd\OrpSJnUL!OZSpctCA"S$Hc
%/JQsu``kc6Z(=JL1)QhJ6L[XK)efu)_$;kq-m,tB*qhq[14'.@-\]kPjS4@T64/1UmuW0UkQX4!7#.s>=PgW%\0W:ZJL3cTpFc:j
%*>a_$DEth[-fj@n5-X9BLBQC1/+[CF6?E?)LlU=tnBjgsD92!.Z;WEW_4=s=+4pq?VeoQ(\qPC5]UV7A%4:g%qC!@#K3pCM;L&HR
%d1(GALE><*ApD(2LK9&8&IJ(]HM$W7O3Vd7-N)Z\Zh[e<R)7XO#DD;clVg_^/;m11$4=uh$6_H*DGnhI%]154an`Lge8j-F#DD:p
%Blpsgo5Kd&*?Z/mK56K.qQ2O'GgYBt/4h_c!=9@`j24^*F'f<uciGp7&`'+A!Y=j@F]Ej$eR+pu=)9nlJ@5iP=DiDt5N.7&>m-V)
%Mqkr.e*+HmlH3!^#E]M!JA^sVqL9.@(_]316ge7P=`hqj?<mocEKKBLOWs#%?_H!<fTS_Ml(EA>I2\YX@XTr"L*7G9,DG*'.&6>L
%Ld31PmQ'tl/r/`5mWK;`EcdDq5cl]l]I,L-qS3\b2X'!dT18!D>d'!EJOg"RZ9VZEaN'U0"OQ@oHP_)KSQBsi%]+E5"qhrTRYU#%
%6bX3S"J$%6GL:'NfjEi`4.'JK3f%lsCEkCf+7dEY+TdW5\TcH!d<W^GH_P!md=M7oY^CrCPs9<kSIW5Td:^k[?4HV;+lZ'SLidU"
%&;\LtCak2NJjtON]BI`-]P[XKIS;goFC6IT/Do>?5Gf$61?dN4Sjd7>'ccVVMC[*a6o):**b=,7o#4rY!f[]#GL<>9H,W*CU15=n
%!C]CY^;&_d8b!C73p>Eh+/L28kYma+]C'lkXTX.0\iRUp!8hn*+F^;!*OYZ[H>/):9n_5^!"#j*^*a3%2i"!tQRT,ln`$O:KD:d!
%N>*A1d&%!TJ)1>)+UN8ZU/+tMk`mX``b.=A_t=IrfA_V)-<Y1%*I0uq%nY\j!@dN.`FbD8G@,FuQ9hb)"?E.tO=8g]k/+IK#h_f`
%4B'27r7fs&d$!J$_0Y"#-^OY^B"A]\Wnp7WiZ^Pt?gE>O$9.f-ZLZ%_8:7>1&I(BpGQE5pRE=aZDYjr.)Ic`i6.[*!P_C2UOC>>p
%nA0p84\uRi\[1&4K`3A-+,iJ/8n$qQistYL6K'Tr\K,$I#-U0Npct+-V"fCY`[2f#btTl'CGe`Tm6V>(nNDt@[iV3TGM7Ufn:;Ss
%P1.&6qkmcTRZu]c[J^n^mU?]iM<<j1*n"]g[p]e`NPUt"m8eXb<8R'fm+W=Df,SsuL2@jo*U!<$X71O._]II7K\rlcBg:'igUiN%
%R-dqKDiQpUaL/]d^"p?WamIj#L-;c%N6b;+PK3]KgoU?AbVkU*2oQg!@6<hB[YS78F2),om-V\PbjFKgJ(KZZg^)TQ5.P^`;%bLi
%0(RLV2XY8Di.G3OeBtn)I.=]-jpn$iK%?FhF84.L8LU_6+BI1$f%\OV2)025<7o?Si8"(&MFjbG]kN-PLLF6SPeD2'TJP-!mS,uP
%ALUpeHXjh*JrB*c$HonQ8^kc"R"WUm9ofUdIi!SQ,Pgum/$Nj2a>%-lpVN>0Grs(m7L<pjfY<>/O4!J]\9;=l(c0#rj^rePRh8`E
%P#5^Wra#G9N8t0;Z_"%trUP&h(t!VYZRkQOf?IGFZnZ%i0)dt&a7cjHNH*:n0P6!_(sMPu2dTCF"<&BQm\3M;ULgOmfMCSg)"F:`
%)/cFcpSDhp$#PXR^Pb=;d4R)`A#[Df0P5u49[$D#M=mg8&Ym@%r4Daq(s2&]hb?i"nhc:B=`^!CF=`p,>ZOTRToG#CG#>1-3-KT3
%n"u^o.2p2gYgne;*jX)Emk'Z1eB!`$(OmL$qlT-;,K#l\p0hu7<G`c@9pngf7/gKiBoL@)SbOBPK8:&Ga>1[3r42Qbpa!6:@K.<q
%*hDVf1D\t[(_ad[AS*Bte@O3&]M>C;,6':p1e)V7VcP^;F,Ur5D`P/ZAHB'tWD#Vt,PLTccXV(1djpm.3Q@#^m@RP<bKmWRl,B8k
%@mp<%r+V+mm@@Pq,KGTP.7i7bP-r,g?Mt1IN7bn'5Aa7CYNVVG37>'(7qkgg*C%GB21:fSP'pS)mB?SMd,crsl$CJ7IGP?=r8\tQ
%>tK2#QL`d:p2kohJoFnDr,_X15#qYcF>Mo=WM&2-K,"QO_M)PMH8io62$Lq2W'K2gp*^`X[G7h\Z1m@W,*.?e<-_<9(mb$+CN[H1
%'1"/@Y^;Bo810Z#HM,_^rGCO&J:S6&('"YT=NV7Br^bouM`rJ>ITca-]BH#3>d.Ssdp'OEM/`a8^^!XCJA*rnYJZu.0d_J=ZiGDr
%_$AYH?=/30jfEi5^q^1ieZ:*YCHD-3l>OQ?Y3A?YQ)iTQMa'`\'ZYOmB=mRT7*Gj!Y`Z_AoXKJl[KGFtDFE5s!Y<X(0_tikdBPf]
%p8^&YE$;Q=b/bmTn<F;QrM[2gKZj_5j;HdckbE6)TIg+Fg'nh#A2`e$PrHf@r1)TIC<KFkW/[/PT$b$*4Sk^g)We:(m.Y^NKdiE!
%H=@,DXp&NOP31;t6FXc2nkDr,5,Y'+*)([+l.*S'"j_odYR:p/4gWTR`R3aKD)d2r)]Dt&eC!`Ll&O(ar_^0YVh5LPSmaAeg&_!e
%YP"]7QAE*4)10iqd">:_T<*AW2iD>hHr0DC1W?SGJ&<RHSe6(h1V.eX8*MiVM]RX:$>X;`HVd$r>'.59[$em))B-Id6pof[oHYc0
%;Rrq\;fRo/:j[EL,!U]qUBCZR*or^kcQ]*CRFe<"FWq#F&T$n'VT7F#k,'+1F#)sMK23\d8,Z)m.bun&ON:7NpYc!.lsVZ*)&`"j
%_.SnX%aA3VSiR_kR1-NKGLQ/#WH;!tLcH@FcG:ljd=rN/CN\kZ3_3e[ah*baZR"r'B$V&D,=C<Jpae2SV0R!Z;^Z&tPJK0GDQ<Fe
%['!Xt-=T^S]lW[7A9R@i]Uqm;5pk&!]a*Z\B5'HQOWIoUUH.IuZRBYU:H=lle0u5*'WBQ/YSFCuPSH1[Aj"-r#G4CR>;g?=f*]YV
%FHFUPZZddl[kjP.T!O)1)>)4jB9?%?jmdKZ$8Meu)/Ap6VKtHo]AgoP7*N`6G7Hfnb^-rS7gbAuONCnJG:0.E1ph$"4\*G\%!q*p
%ZcMKO:RFPi5U&Qihh/CgF^$jr^l/\IkMVQFB_T<Z0?OJR&Pt+`&\Y6=<dMauk![Rc"-:mW7;b8q-`,DRc>PT<X(\!/HbTW1g$J8C
%e_B^m>90U(qQjG9rO-NE6uTab?(6r)!*oemr\V)B^T'C@1Q;;m,gZ2!U9)bgCSteZ@BQ(imhC*!>-,GbVQ?4F$s-m\2%.\,qrLC>
%8dVkY(jbAdK1u1uQ::7Si2_J=HW0H-OBhStlY+!/GGTXD!/__WU3V%l3ln#F%!3,hd!Ys)H(mn3!_bC2GPSeP.$Y%U8eg4(d0<Nf
%2&lMiStAKa'n?^<U.g7=W'@'Eri)aMGQ&$SLt@Hu081ADmTA.9^E$Bk=^lM5`uZY]Tci$l&NJk#r[u'J>6Fr4JfXZ1OU%l\B#$(5
%gN3BeWP64,hud0qR#bJ>>2`b4-NZ$WL`kk5p?7jcgG#6aC\`8k6tb\;4g7M2h[m+uotECdp]>"'6faZ0Nj<>fB/2,"ojB'5gDT_#
%[N596h<pBdGHE+n7`b;iaH`N\P-F=Iq::dRGepj[%=;J9'p[<]=1(`prEOb5^g\ORS5\@nhg0)ql`NNJbmOu.E2sq]rG]qaf<eWE
%a2hZCk9fpCI@-$fDrkQ;e;L0<L-;J)T^uK%\\:M)UbG?<8UnjsMa,?TA`;6f0LAS!Ce]Rcb5DWE*.8pB7GhDZ2`q=LR8:u"]cChX
%E>dU*k3OAamW4c98hX`.RM7P523_6PPOPfij_%K:S115QMFQfMR)\E.'X]NLQ(u9TRY6Hur%_fqK/658A&T[73QttZ?Z,\Af>Pg.
%Aq`sr_7&W?AsjC/`em7LEgXj]>Al+"?d-Yi@RX#._c@h1FkK]j$#QbgKJ&%*XQ2ZjPU=h;9FYQ6fH`RqjT0QV9?rc!@mqVa3D<qj
%l`-_U8"bFOM->RfkuRGb`ft+&)^c[MB/#BEh=RG`OuO?%Up*3GfY/l^S1(.%MFQfMR)Va6__M`sX;iNee0,fJ[<Q\f9G?,^nH`D1
%o2qQM?I681<e`@[ljt5H1;Q'Do8c2t7/gHrdl>I6:@HNbR$4;`M>Dj[XUMUE-"WOl`em:MEgXm>(AmEGm"q"$bR46"LM^>(0UOY-
%e6(*(>n5=cBe.Nk/r>jg`/=DDKC,LXgQZD=)_2u'b@)Hm6e41t9i#n%R2'lN%pN0Ga]^j6@anN-#[Iqh=C$j90"3Y@FHfm)TCB)8
%Ss*fYX<t<ZiXraAk-96UA9XID3m+O#clBJD.m$DLPYkpZ,BPq>>:dqk6$Hc$%&.7==<o2S=^JB<?L?SZ+-TQcY*4>OJ!cA%]X;VG
%;:=8\NkWnh4c_`m_cD-Q?>I+[,,)H@V\-K[#$H5rj'G^oHeq_=EU\O"$gHj0;AM[PT"<Mu(_mk\cf%CiR!a:J^\YMgl+2EV9%QAY
%(maa6g0/\]*tg;pY*4'e4j(a_j&Q*2>@loB_]BMpK@D^djl]KF@3nB2d"UfHSmi4N$0Cq6F8U*]XBRXQJRU>?JaplJ/bsE%Qp@\g
%Z[Wd@oPrgc='8.&m>b!Ze/J$DM7u;?jl;X("`+*Db9tf>q)gnYJ+VLHUp-bEHrn!YIr!C5qHN=PDV$ii.W-S=/O6#E`NNDO3lo,?
%ZgsX"eo0!s\luumd,2^$fBlPAEaujm5[8^FN]H7cpWB;;Wg>dsh^.aL"5Ab/4:Os>0s)rbg&fKA(o\[&%R!?/oWPFuo18.N"!?=i
%KpS?7lFW`2PrnOKkaT<MhF/N_@g^[`X.KVi4rerh1S09I^2:XK[;.9a4pZ6./UHU<UL[W/E63`#?5=>m,oh=u.m`1W0\'XR[NkkV
%Tr++5!P/]:ERMan`O_%TU5fj6Cf1`7<NYOQ0i&K[k<oDo)9h-JlX0W`RMJDU'6U;b;gIQpgQaTIKGl3ZTZ^^]-U%6P=PltOe5>4Y
%mAbffVV9QXF$eA:d/[GVo/Pt\\a,YD)2ar_CNZ"N]!LSb0cLm*j2;%A),0(4BIbLs60a:f8t<,02:,DbCJN>5k<mO#oQbh+7sf%2
%d,8C^ntG3r5[@s'hQbQD"k5O%!*og#3%ZU;D]7"oe55.X*N[.Xrp/uj<$)lQk<oDo),0(d>uD0]MKtqV+t%,8*N$<'>j[K1%u[B+
%iW6V!k&FR(G^a7"L(Ym#AK@YZ]KD7D&k1;1d/[GVdl;3M1qqEPY@5M-RTTac,*V9gbXhkNI!C/UI3+lP[?]=<3;==_N3K'7:flK=
%G2tI\F[e2QQbbLRg9k]XC7=6EMO^WIF`:N+SQ"#'P>L;X"*>F)j.s.eSL&>4PW3)ilS(K/KNf':6Cec!ct+njPBOaBkE0AZNZok#
%>6(QiMsX$'&eO?NAK%5b@$m.Zhl8RLOS?fH?;%I'=3G1br78.D5AK/#N+&`l(g/fNPN3aJZ*t@O-L#T/5&V@B9(ac!lO:]r%gnEY
%%p=#/C.g3T6LCsDr]0hNV6#,8=&Sr87LN@`0`.%-p>'1bSH9L<r5(=F*G#gGpU.2,lM(<FDc"&J+r#rT-]>DS]$^a<JGH;[i1$GN
%P-C[=r*`r('pa1TqgKhu[0P3VDPtN?XE.Sb%Nm:p@)M4CFHAj?Jc4"QC\LT;f,]44m"Ri5n%O8MD"YuiR]cs*AN+_T0aB.0m9VtT
%R9t>FB&=&:n:>ui9ZA[W"DHb2",(LBJ:1AW;'t/@<kf]0jg0\)Yb-PoA@%KgFtL?o'2WN,OD>1bqRc7!Y$F5m[3Y:DJIcY,@;GYJ
%H!XR?eumLUP:*U%[#o]q5"s!9\=Kp9-g>G7*o%.BP98YF9og+R<au8Yk;[EUECY<L:@YG.d$j#.#!TOuNM>L<e/H;t'HdgmNG<L[
%d>-tVnsS`6KCV4k><??^/\J6dMDb#8I_;"eZR?\bAJMMZh.IRjd,V%Zkmi^Q:C?\aSbe"H1+>SI'K0(ue#In[RM'2]8FZsGKk[@6
%U.:m%NCc-fUo;TpQl[a":8ANV8>Qo=$M-e/H4,W/S30_;M%mC%%T=6:hW7g2PYi[E,NKQ9OkQ+"26$nFEYM)B\)f:q74$VG-^rCO
%.ZKNgQq'c<#*qE916b=<b@NBXgIa4K!f[iik6.YZg/UgE9Mo_R3f90#k;&F==0`T:1nfn.)Bl"4O-E>fm_o>%SuJDO$JR1gl1)2f
%b+ok3;ER9@@32EF4[OE?;MHAECVT4:a0L02$Hb)sNDDOs^sf5%qg380bu>Z/.bK,/9Q^tlDs8R::ufG<j:pa=](MZY4d.Xc87DO0
%0WhoW8h\SF)CZ^NV_F+[\SE_*_OM$&9%8G1/.Y`g+.Qq0)l5AX8mi^8lV^/dVIV)p_Cj&@HL'D3-$*PF3:R87Kk[@JG,cZB:%fPq
%;UgL_9R#mL<n"DuToE"i+f@#Te?u=u2,3ca,uWBR),+'&ZDD8$6B)\?OAhN98j8qeR8'Is78hWq),*h+?`/`H65um\6;Cr1WCn;F
%[:E0i&h+O[K'BGtlgtZ]W0-'OEXEHr\[lEp>^;Uh:gW:Y:`!qd'iQEHF[BrA9-\O=N3`"PJ1OuJ?:d<U*IE5?AI+HSRH:kk,q)?j
%'A=oJm,,c(B&muGSS@IK9<o"TUUqcj]9n>T9Ya<7;Y;E2-HW+s\f:oWKdOCR+9'trOkm5H"kb<&F@5kXS6K_>NZ\V5aZfqN-"EBW
%h/Y/MANdJQ&(FTNjm&^pC42<rX+XVi27]XKK5=6I.:;ObrJmM[DUbm<$Jgr)=1T1r=^/!I0roJ]GE+f^b;#uo[[=GX3S090pqXTG
%IS%CS2lk5IhT(?RbZ1Om"$),XU_8R3pI/0Y&o.^ofEoFPDcg&R`.ma57EdWdkhO,u-"D8JU@Q.;%Gr.QE,1Kp^MYO%TXA`O<5NHq
%NkBH&;)0;b]_&`-R1pBr5.GHe&mdNI2oatM3?+8\h`%A4\dX<RIJ_05VQ/Fp_;!\(5.Idj3o8Kjf1V<NCC]*BWsQ+\D>$cqBCRFV
%n@J?WnM-:(?shirI;cJr.V22=o-+,JIhEhdT6T/C`dAaP51CZ6pun8Ym2e".Otbq6r[Igt5'gOG=d+f];<EK_Jq:Q3WXo(E1$3l)
%5K0858'h#anebq%NY3H!&e*Rg=0_=o:71Q[rtKqu+.977HGq]30pMKAUYrB,HPOkj5'=l8&,E-uPPF@Hq7WTEJUtao3X#bXpYO)I
%5BF]#%Jt5==_-C^7_KHS6^\GX$4^:RR'^-WlD#!SFN?\cT>YBo,H\!Qh^h8fR8<,d%(*F3(OpcKF"6=@U<[5AG=nu-Amm*mTT6k(
%=FUVSeR?\#Y^_NpM9knPqK5m%j!aN8VSU)=k0)uq9ou\)mhC0c)nd5(gWmaW:gudtK>Ua5"\mA'UCq0dfK[?I`+OMec)YQqjs]i;
%`kfK(Q1b+#h]^"0&,E-uZhWb'L><Ns;;ssVK7WnL;oj9)QA?D#p.t3+n^3q;bC1^#N\V\m+Um0!=&J`k-d;CJIu6IKc[.P5SL-=V
%&g((JJ?Ab4F#c3Q_Hck.r[Ih#+'hgf;mI/jP^Q>CeOmnEXu`M4o`D%dCaZ^K2+n[nm!:tI"(O)goru<F-3`LHME^@^UGqJh1g;ai
%9g1qY)J_;14_utJ,Ud8ri67==M1f,>X*ElBQ@WE$G+&OjXDopeRfh3:7n1jdP+[#Z4\E^t;TlB+89_!Lp;OELj<0&6LAb;rTgArM
%hL6GL;qOq_<Xb-ErQfX<gu6u'2fL98Taio*>jI;Wj['Yj<eqs_0(pEU-u8iDFI([-m<H1sd0E>1e8NuVoh\o*.kl]hYSGaB^WU#P
%P;a&d[+P_m0E$t;2a:+mh9=GoXcb<@A[(QLOE6:@ao`REWQI<1(GkQsbph/NL8A2qA=MsM-@sb%%c)3u@62+M?F9fKg6DWALUQ82
%hAZ:(g88E*qp>QCIQY2_kYWgmM0pYnq`;7Ule;hRjfp,(hW`tiK(;/$AI4+^>!1Qs+GM.<rZHN6%D/Ore(>B%Oa]76RqLt6ntFpK
%@4K%]p"WK;$#PpT#W[TaUgurDgeIGWR2S\nYdJ>8l9!nk^PlS=2,ZP':15'?Fjhq/1Qc\l8Ps,)0U9&hE?:W`65um\6;Cr1.=%kX
%X/Xr";aZBU2RWcfR5Q.&-H2pGiXp2<dn"?1,-SC)O`D.-;.!N]Q*lUbZs[!&)lYY\:151mRD[4$n4obf,uWCH2G@Z_.T>](.&07h
%8'!,Q,IQjuWen\W;$2pnFgVZOq35GCPL<-<UQe5=$-ZmYF\,CCUBV>UChX9CHEHJ#ZXhQ&nH^RpBoEOiPa$>380mIKEh\;s@/@=3
%i\VNhN08Zc?ll.CO0sHP"N]%gU4iJ]_mF;:cV'lmK1:^rErsf=SN7eA9>$+EUI^61fnSake%HtPRa=MRNK@)+7nU8eNfrONNY3f-
%AIGB@nlna^PYi[E,NKQ9OfGu7]@Sn"Eth2C.pF\jA^+.PU'Y\4dKhjeH),Q2I,?\.6\uM#Z3=00&!d'W8>q[1&TS6-86q-sa19ZX
%cVYrVNGQL30>CiaHon$]<#QpX0TX_'b.?_+D^\,4'_\d@;sc!C*'$kcN>.G8;jb$@P^aZW8M`P#BiTs]:b]S3Q6jkd'5@nB*[.F8
%9$.sqpNseT9uiqIe`aGZ-S];%C+8^)8bSY#[WG:ij:m>?\`EJ2)]25Zi5*f"]$#P"$jsFCeSSI3bG`O3BnS*o;-"jPXm`\Ae\)rL
%IYY49eE`O!$tJb4(m7,trK;@@I@-''DY6]O^26I6CZl_n.[/XLeVs`]Mi3RGNL\s.SkOcYGmlG92;p(\Wnc"=_$:=gPYkDA(G%Ik
%%@L%n,4c(G#,@DfH`4F#<5+@D_$=cQ,W'Ym>FohGVqZG&F$1aokMW+G6?p$)74kKeS:M4;\WBoM/G2bqeHBhT.&*kVU]GN6@6u;&
%<5I1SpA,eXE'K9aUL>Y`X0!s(HrRt!98rgJr*_d+[nmTp*,AK>q%fd$&+*CqcWINe=+.&OVqj6^K>(V_K%$7+1eO648(sh<:bn7`
%;4CRYYPR-S;P".4-196N1RLV1?92rY'.$/:&p@C]qXTPZipK>N0IK7_>''UUKQ_4tR((-U89CfH.T"`N7-gHZ=X%O4\3k%h5DtSo
%B9^a*AjVM5,AaP%N:]Zp](3!gK?f;LZfV[n;;/FMj,s=1NY3Z'Xr=`pFDsr=G6X$>[qEr'bbB3lduU@fo/%J!9%[Mdk\FPc,uGl5
%.8blOSA@$SHBd^I1*o;E'(o<0qV'MF5?"-Z)C9:JRPU=#l+O<rl-CPJ6^\Rq<sAG(N4b18-\>*MqQo;mAl6uW#hrJp,tEe)F]T%,
%pCbr?.5>M#\34WQ?lC>.(NMDK>,5j\;o7[s5[WjRkr6q];ki]]3J1J!['N:d^D#+ZVP?P9qPs[G'l,@W&qNN/)mn`9VGYe84*A`2
%$tW&`?kqm@=6"^'Gp;I:W'b@G?kt&*e5L*V1KI#&'(o<88rN+LVVaLg7Yr(kjp\+adO"$Ude(g^VM+>:_tMHK`r&=NbR%-jef9/T
%+`2RK>j66@+OQn.W^'jT!U9@(TFp27X==-*5"5?fVV.MkbQfC286t<rpRRI8d.uT"3W:G!Fjg];U@/@&qmJ05U&-t+?Fk]+l?2p%
%\q!.VVH[g0p9QWAoe?c#Drms`h/i4&^RtJ&gh3(T)TZh@lqZi0\gf5%Rc\^Jq.g8$SLO7dQZ%F.K:YNhFAuXeoSr4sD@gKuW=W4/
%ZG;kN=*C?[MET2&W\;-Zp<E"P%S+:d?i>a:RaD:@mhoD/=*=_KqSV`,r'<eLC]:1)[,!SsF*.&jH8fOpj.^K-g0$KS^\aM9<paN!
%/q[S-hK\P@%[!a^iJ0S#.=jP)BVm/,^!5t(p\oC?=t;aVkKou'67j@qJn7Zgjp"!tf)V3cW&<X+^S]gu##2-amO@obRpGn0>h]#;
%kA1sM$+Oc-2S_8Yr3YQ7H]q@V/S2>u=Sk'"1P=jl4@&WTI2\ZNpZiltj0C3V,sp,U'5Y(Gq3EFOkkVnJBnW"o4B?dCY.bU<Q(cD/
%)h3IA*`Z?8au#k8.ioks0TFV_pZouuKNU<-XJk_<fZI..)Tfh*#sH&&*K?/%R)_f@AUF8>)9A>PnRn5\HK`Nn#!Qck5>F=-b$Z-a
%9eY,S:!R=,3_H3HnL)uG5PK;s+%h<[h^XIPa>qISV-R=a;fm;^L,(:Gr<]oYIWA4KPRdXonH_.1BrlLF:UM4"Q(u9TRX]pk*cbO!
%Wt%;-\c[qRF-t!?\)6jEbH)+`<nR?aCcC`hJ##aoqQ]#lEXq\Ch0Ogf:%TW.6]%*$!-L)#jST_X,j.O<kkPr4Qc'&:bi*SUXOYg*
%Str(("oEe$m3QPE/,eltoHV:!j;d<e]!_3^agjN46^\ZI!!V-KVk/83h08)'MFY`Jba\4kg7I:pX;p>)+8,[<>A])!,ZYr^:&K6h
%SARHiZ<EP/J"Fe$Rc^p&"Vbe)+*gVZhgL9gkq%gUF-stIDVFBPVQ$2_`/<9!L@)-\AQ#6?4MS!`o$82tj)c:smG-..cV`hX>sQ67
%b'N8H^Q]6,=RcYWLM<imD>Qncndcp.e,U0k&&!u`rC/j?r3k*h"H#C(bbZ>^dM'J_-A9W._,PboPtWU$+!D[KAMB+,l:(,f9s[ql
%M%iN#_fdOpRkMm3gl/tCdKhjg@9.@X;*MY#VDCDr^<oZpMTSCBPqUfrZS[qEPHjZa3JC=.TcmG#j12!%pl9*2Qa*9t0hbS<@kD,;
%<!#e4b5ODP@7i-peJZtAZ\[/Y2nBasdbXP%eW^$1Fh&blc#B`MV*V[T#+:&?9n'&,S[o+Gpd"Y?`Jm`E?+pY\l4M+Ahic#ij;`nG
%R933j):t<'G_SCa+X`7Zf\Z?uiU/N*\H%]';tOKVVNfj-#J-cQ>"9[i^#4X6DC`JWCY=jNO$FN>O[_*=0M3d;K(RdHm5ls0Rmr,r
%\A(E]a0=*3[^U+Vq7)+3())bUjY2\EV3e)tqn]?R-!&NO&jCkP>6A1l;acT[O3luBO-O%E\m9YlALOn%G*MJ&<,E1KF/FaS.iP,)
%@2^XZBXI1#X0PD>-!&N[10A8JnZq4L#rPaG6C5SP<dKVfDIQmaALOn%es,Y1'Q"Y2k"HA0<]!.0__bDl?DD70?p%@XM%qnHKMOkZ
%/mS5D-T!`WEJ,s"H*#Rc)k^eDL,(8q;[K)3U#OB]B8WXoU(OsVVQnQ*Z,JPnQDfAQM4.EK-V8Pcci!#@C7KO%SA@<[g7%7_l)o(_
%PY#<,9&RI_rc?8>,3kt;KJ&$oXRq>EE?9t%UWf`\Y6=EsW^"*@&TpG&gdRgTA\D(Y<tcB;M$p_p"Q$b*5>099;'X"(F?*$)-%T&5
%QWQ8jXK[[1Hig4g5BEP!3[aLe176*R?LO`A2">XO3)M3LYcYAm(X/9[C92Z5/r+/B[/7sgPr/#PPZ_E^9DAXI[M[5i#^'0)6C5SP
%<q:Q$Xs6[=*$nY8ee1/t9s4u?Ei+X2.itD-@2^Y%e5WP5&1^8='fNOS:I'taf)5=WlE"ZP/r+_R["6lCV2:h>`/7`'L@(fbInS(O
%:h.HhF?.QL->JsH-;k%'-bQW(pb+*&4`[-M3[YghB/#=nY=3g0hckEq#0^F>d,;lA?16.odYCVkJ,@U+cX<!%eH]W$R>5?V]VBCe
%X&*c57@1dSAbSc;9UO?X=N-We%habokV!rqX/QVdUCYjc8V7hVb>29Mqae]W%(FAq)C$Ua9Zsgi.c<G<^4:bFQI&Ke(R?Nabp%rP
%IaT!P:XQ)f\Z;%MY,%A&PR(-_(i6U[\"u6o%fQ)(G_DU)[-q=(QLA%@Rcuhkh`e1VU[e6C8RK4@>=6(\8=.E!#DLaujh$\9"?B'b
%MKG6BT+hYs<r?+:W(Z6_hOLp>pn#q2Y0U@u1mB'G<&9OnQ%%:g(<eT"j\-Sdb@-L_?i<X3mCt<hQ/@o%s8Mkeomb*`s4cH0ana\`
%rN"iTqS3'u:]B[pjSl@_qEI,mop>^X[t"#(TDcgFq!5[DJ+KjmqmX?=fq8:U=oLmljhGaQ[gi-13s#?Y09<mDMnf;HkP,#SLHke7
%-,?/PQf%i!+9(":J,_b5f,t"e]0H,'J,K9Fq87-cs80S2LO]1!5Q0PjbCBBUn,E*;J,H3opu<HFqoAa,&-#]CF`N7%rR8OVci;sJ
%J+EU>R4,ct~>
%AI9_PrivateDataEnd
